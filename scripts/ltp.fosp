

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

funcdef uint PROCESS(Critter@,int&,int&,int&);                                      

LTProc[]procs;

class LTProc
{
	PROCESS@pointer;
	LTProc()
	{
		@pointer=null;
	}
}

bool RegisterProcess(uint8 type,any func)
{
	PROCESS@temp_func=null;
	
	func.retrieve(@temp_func);
	
	int param0=-1,
	param1=-1,
	param2=-1;
	
	if((@temp_func!=null)&&(temp_func(null,param0,param1,param2)==(0xF035BCF3))&&(uint8(param0)==type))
	{
		uint len=procs.length();
		
		if(len<=type)
		procs.resize(type+1);
		
		@procs[type].pointer=temp_func;
		
		Log("Process #"+type+" binded.");
		return true;
	}
	
	Log("Can't bind process! Type: "+type);
	
	return false;
}

uint makeTDH(uint8 type,uint16 hexX,uint16 hexY,uint8 dir)
{
	uint tck=0;
	tck|=(type&0xFF);
	tck|=((hexX&0x3FF)<<8);
	tck|=((hexY&0x3FF)<<18);
	tck|=((dir&0x7)<<28);
	
	return tck;
}

void setTDH(Critter&cr,uint8 type)
{
	cr.ParamBase[(140)]=int(makeTDH(type,cr.HexX,cr.HexY,cr.Dir));
}

bool checkTDH(Critter&cr)
{
	return((uint(cr.ParamBase[(140)])&0xFFFFFF00)==(makeTDH(0,cr.HexX,cr.HexY,cr.Dir)));
}

bool checkTDH(Critter&cr,uint8 type)
{
	return(cr.ParamBase[(140)]==int(makeTDH(type,cr.HexX,cr.HexY,cr.Dir)));
}

bool StartProcess(Critter&cr,uint8 type,uint time)
{
	if(!StartProcess(cr,type,0,0,0,time,false))
	return false;
	return true;
}

bool StartProcess(Critter&cr,uint8 type,int param0,uint time)
{
	if(!StartProcess(cr,type,param0,0,0,time,true))
	return false;
	return true;
}

bool StartProcess(Critter&cr,uint8 type,int param0,int param1,int param2,uint time)
{
	if(!StartProcess(cr,type,param0,param1,param2,time,true))
	return false;
	return true;
}

bool StartProcess(Critter&cr,uint8 type,int param0,int param1,int param2,uint time,bool paramWrite)
{
	if(procs.length()<=type||(@procs[type].pointer==null))
	{
		Log("fail "+type);
		return false;
	}
	
	PROCESS@temp_func=@procs[type].pointer;
	
	Map@map=cr.GetMap();
	uint mapId=0;
	
	if(paramWrite)
	{
		cr.ParamBase[(143)]=param0;
		cr.ParamBase[(144)]=param1;
		cr.ParamBase[(145)]=param2;
	}
	else if(uint(cr.ParamBase[(140)])&0xFF!=type)
	{
		cr.ParamBase[(143)]=0;
		cr.ParamBase[(144)]=0;
		cr.ParamBase[(145)]=0;
	}
	
	if((@map!=null))
	{
		mapId=map.Id;
		setTDH(cr,type);
	}
	else
	cr.ParamBase[(140)]=int(type);
	
	cr.SetEvent((0),"_Process");
	cr.ParamBase[(141)]=int(mapId);
	cr.ParamBase[(142)]=int(__FullSecond);
	cr.RunClientScript("client_main@_waiting",1,0,0,null,null);
	cr.Wait(time);
	
	return true;
}

bool StopProcess(Critter&cr)
{
	cr.SetEvent((0),null);
	cr.ParamBase[(142)]=-1;
	cr.RunClientScript("client_main@_waiting",0,0,0,null,null);
	
	cr.Wait(0);
	
	return true;
}

void _Process(Critter&cr)
{
	uint tdr=uint(cr.Param[(140)]),
	pmap=uint(cr.Param[(141)]);
	
	int param0=cr.Param[(143)],
	param1=cr.Param[(144)],
	param2=cr.Param[(145)];
	
	uint8 type=tdr&0xFF;
	
	if(uint(cr.ParamBase[(142)])<=__FullSecond)
	{
		Map@map=cr.GetMap();
		if(((pmap==0)&&(tdr==type))||((@map!=null)&&(map.Id==pmap)&&checkTDH(cr)))
		{
			if(procs.length()>type&&(@procs[type]!=null))
			{
				PROCESS@temp_func=@procs[type].pointer;
				
				uint time=temp_func(cr,param0,param1,param2);
				
				cr.ParamBase[(143)]=param0;
				cr.ParamBase[(144)]=param1;
				cr.ParamBase[(145)]=param2;
				
				if(time!=0)
				{
					cr.Wait(time);
					return;
				}
			}
			else
			{
				Log("_Process error #"+type);
			}
		}
		
	}
	StopProcess(cr);
}

void unsafe_StopProcess(Critter&player,int param0,int param1,int param2,string@param3,int[]@param4)
{
	if(player.Param[(95)]>0)
	return;
	player.ParamBase[(95)]+=1;
	StopProcess(player);
}
