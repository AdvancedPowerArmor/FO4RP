

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId)from"combat";

import void ChangeStatus(Critter&cr,uint16 status,uint8 value,bool set)from"critter_status";
import void ChangeCritterSpeed(Critter&cr)from"speed";
import void UseDrug(Critter&cr,Item&drug)from"drugs";    

void ProccessFirstAidSkill(Critter&cr,Critter&targetCr,bool alreadyAllowed)
{
	if(targetCr.IsDead())
	{
		cr.Say((11),"Это уже не поможет.");
		return;
	}
	
	targetCr.StatBase[(90)]=cr.Id;
	cr.StatBase[(90)]=targetCr.Id;
	
	if(targetCr.Id!=cr.Id&&targetCr.Stat[(72)]>-30&&!alreadyAllowed&&targetCr.IsPlayer()){
		targetCr.ShowScreen((2),2,"answer_ProccessFirstAidSkill");
		targetCr.Say((18),"Вас хотят осмотреть, согласиться?");
		targetCr.Say((19+(0)),"Да");
		targetCr.Say((11),"Вас хотят осмотреть");
	}else{
		answer_ProccessFirstAidSkill(targetCr,0,"");
	}
}

void answer_ProccessFirstAidSkill(Critter&targetCr,uint answerI,string&answerS)
{
	
	Critter@cr=GetCritter(targetCr.StatBase[(90)]);
	if(cr is null)return;
	
	bool isBandaged=(targetCr.GetTimeEvents((41),null,null,null)>0);
	
	bool powder=(cr.CountItem((273))>0);
	bool stim=(cr.CountItem((40))>0);
	bool ss=(cr.CountItem((144))>0); 
	
	uint16 statusFlag=targetCr.StatBase[(146)];
	bool isDamaged=false;
	string state="повреждения: ";
	
	int i=(730);
	int maxHP=targetCr.Stat[(7)];
	while(i<(737)){
		if(targetCr.ParamBase[i]>maxHP*0.8){
			state+="крит. ";
		}else if(targetCr.ParamBase[i]>maxHP*0.6){
			state+="оч. тяж. ";
		}else if(targetCr.ParamBase[i]>maxHP*0.4){
			state+="тяж. ";
		}else if(targetCr.ParamBase[i]>=maxHP*0.2){
			state+="средн. ";
		}
		if(targetCr.ParamBase[i]>=maxHP*0.2){
			isDamaged=true;
			switch(i){
				case(730):
				state+="головы, ";
				break;
				case(732):
				state+="глаз, ";
				break;
				case(735):
				state+="левой руки, ";
				break;
				case(734):
				state+="правой руки, ";
				break;
				case(737):
				state+="левой ноги, ";
				break;
				case(736):
				state+="правой ноги, ";
				break;
				case(733):
				state+="паха, ";
				break;
				case(731):
				state+="корпуса, ";
				break;
			}
		}
		i++;
	}      
	
	if(!isDamaged)state+="нет серьезных повреждений";
	
	if((((statusFlag)&((0x001)))!=0))state+=", кровотечение";
	if((((statusFlag)&((0x010)))!=0))
	{
		state+=", глубокие раны";
		cr.StatBase[(90)]=targetCr.Id;
		cr.ShowScreen((2),4,"answer_FIRSTAID_TO_DOCTOR");
		cr.Say((18),"Результат осмотра - "+state);
		cr.Say((19+(0)),"ХИРУРГИЯ");
		if(powder)cr.Say((19+(1)),"исп. порошок");
		else cr.Say((19+(1)),"нет Порошка");
		if(stim)cr.Say((19+(2)),"исп. стимпак");
		else cr.Say((19+(2)),"нет Стимпака");
		if(ss)cr.Say((19+(3)),"исп. СС");
		else cr.Say((19+(3)),"нет СС");
		return;
	}
	
	if(isBandaged)
	{
		state+=", повязки уже наложены.";
		cr.StatBase[(90)]=targetCr.Id;
		cr.ShowScreen((2),3,"answer_FIRSTAID_TO_UNBANDAGE");
		cr.Say((18),"Результат осмотра - "+state);
		cr.Say((19+(0)),"Снять повязки");
		if(powder)cr.Say((19+(1)),"исп. порошок");
		else cr.Say((19+(1)),"нет Порошка");
		if(stim)cr.Say((19+(2)),"исп. стимпак");
		else cr.Say((19+(2)),"нет Стимпака");
		return;
	}
	
	cr.StatBase[(90)]=targetCr.Id;
	cr.ShowScreen((2),3,"answer_FIRSTAID_1");
	cr.Say((18),"Результат осмотра - "+state);
	
	if(powder)cr.Say((19+(0)),"исп. Порошок");
	else cr.Say((19+(0)),"нет Порошка");
	
	if(stim)cr.Say((19+(1)),"исп. Стимпак");
	else cr.Say((19+(1)),"нет Стимпака");
	
	cr.Say((19+(2)),"без стимулянта");
}

void answer_FIRSTAID_1(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	
	bool powder=(player.CountItem((273))>0);
	bool stim=(player.CountItem((40))>0);
	
	if(answerI==0)
	{
		if(powder)player.StatBase[(91)]=1;
		else{ProccessFirstAidSkill(player,targetCr,true);return;}
	}
	if(answerI==1)
	{
		if(stim)player.StatBase[(91)]=2;
		else{ProccessFirstAidSkill(player,targetCr,true);return;}
	}
	if(answerI==2)
	{
		player.StatBase[(91)]=0;
	}
	
	bool booze=(player.CountItem((125))>0);
	bool anti=(player.CountItem((1322))>0);
	
	player.ShowScreen((2),3,"answer_FIRSTAID_2");
	player.Say((18),"Применяем антисептик:");
	
	if(booze)player.Say((19+(0)),"исп. Самогон");
	else player.Say((19+(0)),"нет Самогона");
	
	if(anti)player.Say((19+(1)),"исп. Антисептик");
	else player.Say((19+(1)),"нет Антисептика");
	
	player.Say((19+(2)),"без обеззараживания");
}

void answer_FIRSTAID_2(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	
	bool booze=(player.CountItem((125))>0);
	bool anti=(player.CountItem((1322))>0);
	
	if(answerI==0)
	{
		if(booze)player.StatBase[(92)]=1;
		else{ProccessFirstAidSkill(player,targetCr,true);return;}
	}
	if(answerI==1)
	{
		if(anti)player.StatBase[(92)]=2;
		else{ProccessFirstAidSkill(player,targetCr,true);return;}
	}
	if(answerI==2)
	{
		player.StatBase[(92)]=0;
	}
	
	bool rags=(player.CountItem((572))>0);
	bool bandage=(player.CountItem((1321))>0);
	
	player.ShowScreen((2),3,"answer_FIRSTAID_3");
	player.Say((18),"Материал повязки:");
	
	if(rags)player.Say((19+(0)),"исп. тряпки");
	else player.Say((19+(0)),"нет тряпок");
	
	if(bandage)player.Say((19+(1)),"исп. бинт");
	else player.Say((19+(1)),"нет бинтов");
	
	player.Say((19+(2)),"без перевязки");
}

void answer_FIRSTAID_3(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	
	int sk=player.Skill[(206)];
	
	bool booze=(player.CountItem((125))>0);
	bool anti=(player.CountItem((1322))>0);
	bool rags=(player.CountItem((572))>0);
	bool bandage=(player.CountItem((1321))>0);
	bool powder=(player.CountItem((273))>0);
	bool stim=(player.CountItem((40))>0);
	
	if(answerI==0)
	{
		if(rags)
		{
			player.StatBase[(93)]=1;
			player.DeleteItem((572),1);
		}
		else{ProccessFirstAidSkill(player,targetCr,true);return;}
	}
	if(answerI==1)
	{
		if(bandage)
		{
			player.StatBase[(93)]=2;
			player.DeleteItem((1321),1);
		}
		else{ProccessFirstAidSkill(player,targetCr,true);return;}
	}
	if(answerI==2)
	{
		player.StatBase[(93)]=0;
	}
	
	if(player.StatBase[(91)]==0&&player.StatBase[(92)]==0&&player.StatBase[(93)]==0)
	{
		player.Say((11),"Вы практически ничего не сделали.");
		return;
	}
	
	if(stim&&player.StatBase[(91)]==2)
	{
		Item@item=player.GetItem((40),-1);
		ItemStimpackUse(targetCr,item);
		item.GetCount()>1?item.SetCount(item.GetCount()-1):DeleteItem(item);
		sk+=30;
	}
	
	if(powder&&player.StatBase[(91)]==1)
	{
		Item@item=player.GetItem((273),-1);
		ItemPowderUse(targetCr,item);
		sk+=60;
	}
	
	if(player.StatBase[(93)]==0)
	{
		player.Say((11),"Без повязки раны быстрее заживать не будут.");
		return;
	}
	
	int chance=0;
	
	if(anti&&player.StatBase[(92)]==2)
	{
		player.DeleteItem((1322),1);
		sk+=30;
	}
	else
	{
		int16 hpCurrent=targetCr.StatBase[(72)];
		int16 hpMax=(targetCr.StatBase[(7)]+targetCr.StatBase[(0)]*4+targetCr.StatBase[(2)]*8);
		chance=20-targetCr.Stat[(6)];
		chance=(((chance)>(20))?(20):(((chance)<(0))?(0):(chance)));
	}
	
	if(booze&&player.StatBase[(92)]==1){chance*=0.1;sk+=10;player.DeleteItem((125),1);player.AddItem((542),1);}
	
	if(rags&&player.StatBase[(93)]==1){sk+=10;UseBandage(player,targetCr,sk);}
	else if(bandage&&player.StatBase[(93)]==2){chance*=0.5;sk+=30;UseBandage(player,targetCr,sk);}
	
	if(Random(0,100)<chance)ChangeStatus(targetCr,(0x008),0,true);
	
}

void answer_FIRSTAID_TO_DOCTOR(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	if(answerI==0)
	{
		ProccessDoctorSkill(player,targetCr,false);
		return;
	}
	if(answerI==1&&(player.CountItem((273))>0))
	{
		Item@item=player.GetItem((273),-1);
		ItemPowderUse(targetCr,item);
	}
	if(answerI==2&&(player.CountItem((40))>0))
	{
		Item@item=player.GetItem((40),-1);
		ItemStimpackUse(targetCr,item);
		item.GetCount()>1?item.SetCount(item.GetCount()-1):DeleteItem(item);
	}
	if(answerI==3&&(player.CountItem((144))>0))
	{
		Item@item=player.GetItem((144),-1);
		ItemSupUse(targetCr,item);
		player.DeleteItem((144),1);
	}
	ProccessFirstAidSkill(player,targetCr,true);
}

void answer_FIRSTAID_TO_UNBANDAGE(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	if(answerI==0)
	{
		player.Say((11),"Вы сняли бинты.");
		targetCr.EraseTimeEvents((41));
	}
	if(answerI==1&&(player.CountItem((273))>0))
	{
		Item@item=null;
		ItemPowderUse(targetCr,item);
		player.DeleteItem((273),1);
	}
	if(answerI==2&&(player.CountItem((40))>0))
	{
		Item@item=null;
		ItemStimpackUse(targetCr,item);
		player.DeleteItem((40),1);
	}
	ProccessFirstAidSkill(player,targetCr,true);
}

void ProccessDoctorSkill(Critter&cr,Critter&targetCr,bool alreadyAllowed)
{
	targetCr.StatBase[(90)]=cr.Id;
	cr.StatBase[(90)]=targetCr.Id;
	
	if(targetCr.Id!=cr.Id&&targetCr.Stat[(72)]>-30&&!alreadyAllowed&&targetCr.IsPlayer()){
		targetCr.ShowScreen((2),2,"answer_ProccessDoctorSkill");
		targetCr.Say((18),"Вас хотят оперировать, согласиться?");
		targetCr.Say((19+(0)),"Да");
		targetCr.Say((11),"Вас хотят осмотреть");
	}else{
		answer_ProccessDoctorSkill(cr,0,"");
	}
}

void answer_ProccessDoctorSkill(Critter&targetCr,uint answerI,string&answerS)
{
	if(answerI!=0)return;
	
	Critter@cr=GetCritter(targetCr.StatBase[(90)]);
	if(cr is null)return;
	
	uint16 statusFlag=targetCr.StatBase[(146)];
	string state;
	
	if(targetCr.Stat[(72)]>0)state="Есть пульс";
	else if(targetCr.Stat[(72)]>-30)state="Пульс слабый";
	else state="Нет пульса";
	
	bool damages=false;
	
	if(targetCr.ParamBase[(502)]>0){state+=", повреждены глаза";damages=true;}
	if(targetCr.ParamBase[(503)]>0){state+=", повреждена правая рука";damages=true;}
	if(targetCr.ParamBase[(504)]>0){state+=", повреждена левая рука";damages=true;}
	if(targetCr.ParamBase[(505)]>0){state+=", повреждена правая нога";damages=true;}
	if(targetCr.ParamBase[(506)]>0){state+=", повреждена левая нога";damages=true;}
	if(targetCr.ParamBase[(500)]>0){state+=", есть признаки отравления";damages=true;}
	if(targetCr.ParamBase[(147)]>0){state+=", есть признаки заражения крови";damages=true;}
	
	bool knife=(cr.CountItem((4))>0||cr.CountItem((236))>0);
	
	if((((statusFlag)&((0x001)))!=0))state+=", кровотечение";
	if((((statusFlag)&((0x040)))!=0))
	{
		state+=", пуля или осколок в ране, необходимо вынуть перед дальнейшими действиями.";
		cr.ShowScreen((2),3,"answer_DOCTOR_BULLET");
		cr.Say((18),""+state);
		if(cr.CountItem((1323))>0)cr.Say((19+(0)),"щипцами");
		else cr.Say((19+(0)),"нет шипцов");
		if(cr.CountItem((75))>0)cr.Say((19+(1)),"мультитулом");
		else cr.Say((19+(1)),"нет клещей");
		if(knife)cr.Say((19+(2)),"ножом");
		else cr.Say((19+(2)),"нет ножа");
		return;
	}
	
	if((((statusFlag)&((0x010)))!=0))
	{
		state+=", сложная рана, необходимо закрыть ее";
		cr.ShowScreen((2),2,"answer_DOCTOR_HEAVY");
		cr.Say((18),""+state);
		if(cr.CountItem((1326))>0&&cr.CountItem((1325))>0)cr.Say((19+(0)),"игла + нитки");
		else cr.Say((19+(0)),"нет иглы и ниток");
		if(knife&&cr.CountItem((101))>0)cr.Say((19+(1)),"нож + зажигалка");
		else cr.Say((19+(1)),"нет ножа и зажигалки");
		return;
	}
	if(damages)
	{
		cr.ShowScreen((2),7,"answer_DOCTOR_CRIPPLE");
		cr.Say((18),""+state+".");
		
		if(targetCr.ParamBase[(502)]>0)cr.Say((19+(0)),"лечить глаза");
		else cr.Say((19+(0)),"глаза в порядке");
		if(targetCr.ParamBase[(503)]>0)cr.Say((19+(1)),"лечить п.руку");
		else cr.Say((19+(1)),"п.рука в порядке");
		if(targetCr.ParamBase[(504)]>0)cr.Say((19+(2)),"лечить л.руку");
		else cr.Say((19+(2)),"л.рука в порядке");
		if(targetCr.ParamBase[(505)]>0)cr.Say((19+(3)),"лечить п.ногу");
		else cr.Say((19+(3)),"п.нога в порядке");
		if(targetCr.ParamBase[(506)]>0)cr.Say((19+(4)),"лечить л.ногу");
		else cr.Say((19+(4)),"л.нога в порядке");
		if(targetCr.ParamBase[(147)]>0)cr.Say((19+(5)),"таблетки от зар.");
		else cr.Say((19+(5)),"заражения нет");
		if(targetCr.ParamBase[(500)]>0)
		{
			if(cr.CountItem((49))>0)cr.Say((19+(6)),"дать антидот");
			else cr.Say((19+(6)),"нет антидота");
		}
	}
	else
	{
		cr.ShowScreen((2),1,"answer_DOCTOR_TO_FIRSTAID");
		cr.Say((18),""+state+", дальше может потребоваться только перевязка.");
		cr.Say((19+(0)),"перевязка");
	}
	return;
}

void answer_DOCTOR_CRIPPLE(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	if(answerI==5)
	{
		if(player.CountItem((1548))>0)
		{
			player.DeleteItem((1548),1);
			targetCr.StatBase[(147)]=0;
			targetCr.StatBase[(72)]=10;
			targetCr.Say((5),"Закидывает горсть таблеток в рот");
			(targetCr.StatBase[(146)]=((targetCr.StatBase[(146)])&(~((0x008)))));
			ChangeStatus(targetCr,(0x008),0,false);
		}
		player.Say((11),"Уровень заражения "+targetCr.StatBase[(147)]+" "+targetCr.StatBase[(0x008)]);
		ProccessDoctorSkill(player,targetCr,true);
		return;
	}
	else if(answerI==6)
	{
		if(player.CountItem((49))>0)
		{
			player.DeleteItem((49),1);
			targetCr.StatBase[(73)]=(((targetCr.StatBase[(73)]-50)>(1000))?(1000):(((targetCr.StatBase[(73)]-50)<(0))?(0):(targetCr.StatBase[(73)]-50)));
		}
		ProccessDoctorSkill(player,targetCr,true);
		return;
	}
	else
	{
		string state;
		uint16 damage=answerI+502;
		player.StatBase[(91)]=damage;
		
		uint[]rates;
		uint8 countTimes=targetCr.GetTimeEvents((42),null,null,rates);
		if(countTimes>0)
		{
			for(uint8 i=0;i<countTimes;i++)
			{
				if(rates[i]==damage)
				{
					player.Say((11),"Эта часть тела уже лечится.");
					ProccessDoctorSkill(player,targetCr,true);
					return;
				}
			}
		}
		
		if(targetCr.DamageBase[damage]==0)
		{
			player.Say((11),"Эта часть тела не нуждается в лечении.");
			ProccessDoctorSkill(player,targetCr,true);
			return;
		}
		
		if(answerI==0)
		{
			state="Необходимо наложить тугую повязку.";
			player.ShowScreen((2),2,"answer_DOCTOR_CRIPPLE_EYE");
			player.Say((18),""+state);
			if(player.CountItem((572))>0)player.Say((19+(0)),"исп.тряпки");
			else player.Say((19+(0)),"нет тряпок");
			if(player.CountItem((1321))>0)player.Say((19+(1)),"исп.бинты");
			else player.Say((19+(1)),"нет бинтов");
		}
		else
		{
			state="Необходимо правильно вправить и зафиксировать конечность.";
			bool plank=(player.CountItem((7))>0)||
			(player.CountItem((280))>0)||
			(player.CountItem((320))>0)||
			(player.CountItem((5))>0)||
			(player.CountItem((1425))>0)||
			(player.CountItem((1423))>0)||
			(player.CountItem((286))>0)||
			(player.CountItem((1425))>0);
			player.ShowScreen((2),2,"answer_DOCTOR_CRIPPLE_LIMB");
			player.Say((18),""+state);
			if(player.CountItem((1324))>0)player.Say((19+(0)),"мед.шина");
			else player.Say((19+(0)),"нет шины");
			if(plank&&player.CountItem((127))>0)player.Say((19+(1)),"веревка+деревяшка");
			else player.Say((19+(1)),"нет веревки и др.");
		}
	}
}

void answer_DOCTOR_CRIPPLE_EYE(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	if(answerI==0)
	{
		if(player.CountItem((572))>0)player.DeleteItem((572),1);
		else return;
	}
	if(answerI==1)
	{
		if(player.CountItem((1321))>0)player.DeleteItem((1321),1);
		else return;
	}
	
	int damage=player.StatBase[(91)];
	uint docTime=10*(400-answerI*100-player.Skill[(207)]-(targetCr.Stat[(2)]*10));
	docTime=(((docTime)>(3600))?(3600):(((docTime)<(900))?(900):(docTime)));
	docTime*=__TimeMultiplier;
	docTime=10;
	if(damage>=502&&damage<=506)targetCr.AddTimeEvent("cte_Doc",docTime,(42),damage);
	else{player.Say((11),"Ошибка, обратитесь к разработчикам.");return;}
	player.TimeoutBase[(231)]=(__FullSecond+((30)*__TimeMultiplier));
	player.AddScore((9),1);
	player.Say((11),"Вы наложили тугую повязку, остается только ждать.");
}

void answer_DOCTOR_CRIPPLE_LIMB(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	if(answerI==0)
	{
		if(player.CountItem((1324))>0)player.DeleteItem((1324),1);
		else{player.Say((11),"У вас нет медицинской шины.");return;}
	}
	if(answerI==1)
	{
		bool plank=(player.CountItem((7))>0)||
		(player.CountItem((280))>0)||
		(player.CountItem((320))>0)||
		(player.CountItem((5))>0)||
		(player.CountItem((1425))>0)||
		(player.CountItem((1423))>0)||
		(player.CountItem((286))>0)||
		(player.CountItem((1425))>0);
		if(plank&&player.CountItem((127))>0)player.DeleteItem((127),1);
		else{player.Say((11),"Нужна веревка и какая-нибудь палка или планка.");return;}
	}
	
	int damage=player.StatBase[(91)];
	uint docTime=10*(400+answerI*100-player.Skill[(207)]-(targetCr.Stat[(2)]*10));
	docTime=(((docTime)>(3600))?(3600):(((docTime)<(900))?(900):(docTime)));
	docTime*=__TimeMultiplier;
	docTime=10;
	if(damage>=502&&damage<=506)targetCr.AddTimeEvent("cte_Doc",docTime,(42),damage);
	else{player.Say((11),"Ошибка, обратитесь к разработчикам.");return;}
	player.TimeoutBase[(231)]=(__FullSecond+((30)*__TimeMultiplier));
	player.AddScore((9),1);
	player.Say((11),"Вы зафиксировали конечность, остается только ждать.");
}

void Prolonged_Doc(Critter&targetCr,uint16 doctime,uint16 damage)
{
	if(damage>=502&&damage<=506)targetCr.AddTimeEvent("cte_Doc",doctime,(42),damage);
}

uint cte_Doc(Critter&cr,int identifier,uint&rate)
{
	cr.DamageBase[rate]=0;
	switch(rate)
	{
		case(502):cr.Say((11),"Кажется глазам возвращается чувствительность.");break;
		case(503):cr.Say((11),"Кажется вы снова можете свободно двигать правой рукой.");break;
		case(504):cr.Say((11),"Кажется вы снова можете свободно двигать левой рукой.");break;
		case(505):cr.Say((11),"Кажется вы снова можете свободно двигать правой ногой.");break;
		case(506):cr.Say((11),"Кажется вы снова можете свободно двигать левой ногой.");break;
	}
	ChangeCritterSpeed(cr);
	return 0;
}

void answer_DOCTOR_TO_FIRSTAID(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	if(answerI==0)
	{
		ProccessFirstAidSkill(player,targetCr,true);
	}
}

void answer_DOCTOR_HEAVY(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	
	if(answerI==0)
	{
		if(player.CountItem((1326))>0&&player.CountItem((1325))>0)player.StatBase[(91)]=1;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==1)
	{
		bool knife=(player.CountItem((4))>0||player.CountItem((236))>0);
		if(knife)player.StatBase[(91)]=2;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	
	bool booze=(player.CountItem((125))>0);
	bool anti=(player.CountItem((1322))>0);
	
	player.ShowScreen((2),3,"answer_DOCTOR_HEAVY_2");
	player.Say((18),"Применяем антисептик:");
	
	if(booze)player.Say((19+(0)),"исп. Самогон");
	else player.Say((19+(0)),"нет Самогона");
	
	if(anti)player.Say((19+(1)),"исп. Антисептик");
	else player.Say((19+(1)),"нет Антисептика");
	
	player.Say((19+(2)),"без обеззараживания");
}

void answer_DOCTOR_HEAVY_2(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	
	bool booze=(player.CountItem((125))>0);
	bool anti=(player.CountItem((1322))>0);
	bool anest=(player.CountItem((1320))>0);
	
	if(answerI==0)
	{
		if(booze)player.StatBase[(92)]=1;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==1)
	{
		if(player.CountItem((1322))>0)player.StatBase[(92)]=2;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==2)
	{
		player.StatBase[(92)]=3;
	} 
	
	player.ShowScreen((2),3,"answer_DOCTOR_HEAVY_3");
	player.Say((18),"Применяем анестезию:");
	
	if(anest)player.Say((19+(0)),"исп. Анестетик");
	else player.Say((19+(0)),"нет Анестетика");
	
	if(booze)player.Say((19+(1)),"исп. Самогон");
	else player.Say((19+(1)),"нет Самогона");
	
	player.Say((19+(2)),"без анестезии");
}

void answer_DOCTOR_HEAVY_3(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	
	bool booze=(player.CountItem((125))>0);
	bool anti=(player.CountItem((1322))>0);
	bool anest=(player.CountItem((1320))>0);
	
	if(answerI==0)
	{
		if(anest)player.StatBase[(93)]=1;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==1)
	{
		if(booze)player.StatBase[(93)]=2;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==2)
	{
		player.StatBase[(93)]=3;
	}
	
	int damage=0;
	uint16 chance=5;
	uint16 sk=player.Skill[(207)]+30*(2-player.StatBase[(91)]);
	
	damage+=2+Random(3,9)*(player.StatBase[(91)]-1)*player.StatBase[(93)];
	damage+=Random(1,3)*(player.StatBase[(93)]-1);
	
	if(player.StatBase[(92)]==1){chance=1;player.DeleteItem((125),1);player.AddItem((542),1);}
	else if(player.StatBase[(92)]==2){chance=0;player.DeleteItem((1322),1);}
	if(chance>Random(0,99)+targetCr.Stat[(6)]-5)ChangeStatus(targetCr,(0x008),0,true);
	
	if(player.StatBase[(93)]==1)player.DeleteItem((1320),1);
	else if(player.StatBase[(93)]==2&&player.StatBase[(92)]!=1){player.DeleteItem((125),1);player.AddItem((542),1);}          
	
	if(targetCr.StatBase[(72)]>damage)
	{
		targetCr.StatBase[(72)]-=damage;
	}
	else if(targetCr.StatBase[(72)]<=damage&&targetCr.StatBase[(72)]>0)
	{
		targetCr.StatBase[(72)]=1;
	}
	else if(targetCr.StatBase[(72)]<=damage)
	{
		targetCr.StatBase[(72)]=targetCr.StatBase[(72)];
	}
	if(sk+(player.Stat[(6)]-5)*5>Random(0,100))
	{
		ChangeStatus(targetCr,(0x010),0,false);
		if(player.StatBase[(91)]==1)player.Say((11),"Вы зашили рану.");
		else player.Say((11),"Вы прижгли рану.");
	}
	else player.Say((11),"У вас не вышло закрыть рану.");
	ProccessFirstAidSkill(player,targetCr,true);
}

void answer_DOCTOR_BULLET(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	
	if(answerI==0)
	{
		if(player.CountItem((1323))>0)player.StatBase[(91)]=1;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==1)
	{
		if(player.CountItem((75))>0)player.StatBase[(91)]=2;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==2)
	{
		bool knife=(player.CountItem((4))>0||player.CountItem((236))>0);
		if(knife)player.StatBase[(91)]=3;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	
	bool booze=(player.CountItem((125))>0);
	bool anti=(player.CountItem((1322))>0);
	
	player.ShowScreen((2),3,"answer_DOCTOR_BULLET_2");
	player.Say((18),"Применяем антисептик:");
	
	if(booze)player.Say((19+(0)),"исп. Самогон");
	else player.Say((19+(0)),"нет Самогона");
	
	if(anti)player.Say((19+(1)),"исп. Антисептик");
	else player.Say((19+(1)),"нет Антисептика");
	
	player.Say((19+(2)),"без обеззараживания");
}

void answer_DOCTOR_BULLET_2(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	
	bool booze=(player.CountItem((125))>0);
	bool anti=(player.CountItem((1322))>0);
	bool anest=(player.CountItem((1320))>0);
	
	if(answerI==0)
	{
		if(booze)player.StatBase[(92)]=1;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==1)
	{
		if(player.CountItem((1322))>0)player.StatBase[(92)]=2;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==2)
	{
		player.StatBase[(92)]=3;
	} 
	
	player.ShowScreen((2),3,"answer_DOCTOR_BULLET_3");
	player.Say((18),"Применяем анестезию:");
	
	if(anest)player.Say((19+(0)),"исп. Анестетик");
	else player.Say((19+(0)),"нет Анестетика");
	
	if(booze)player.Say((19+(1)),"исп. Самогон");
	else player.Say((19+(1)),"нет Самогона");
	
	player.Say((19+(2)),"без анестезии");
}

void answer_DOCTOR_BULLET_3(Critter&player,uint answerI,string&answerS)
{
	Critter@targetCr=GetCritter(player.Stat[(90)]);
	if(targetCr is null)
	return;
	
	bool booze=(player.CountItem((125))>0);
	bool anti=(player.CountItem((1322))>0);
	bool anest=(player.CountItem((1320))>0);
	
	if(answerI==0)
	{
		if(anest)player.StatBase[(93)]=1;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==1)
	{
		if(booze)player.StatBase[(93)]=2;
		else{ProccessDoctorSkill(player,targetCr,true);return;}
	}
	if(answerI==2)
	{
		player.StatBase[(93)]=3;
	}
	
	int damage=0;
	uint16 chance=5;
	uint16 sk=player.Skill[(207)]+30*(3-player.StatBase[(91)]);
	
	damage+=Random(1,5)*player.StatBase[(91)];
	damage+=Random(1,5)*(player.StatBase[(93)]-1);
	
	if(player.StatBase[(92)]==1){chance=1;player.DeleteItem((125),1);player.AddItem((542),1);}
	else if(player.StatBase[(92)]==2){chance=0;player.DeleteItem((1322),1);}
	if(chance>Random(0,100))ChangeStatus(targetCr,(0x008),0,true);
	
	if(player.StatBase[(93)]==1)player.DeleteItem((1320),1);
	else if(player.StatBase[(93)]==2&&player.StatBase[(92)]!=1){player.DeleteItem((125),1);player.AddItem((542),1);}         
	
	if(targetCr.StatBase[(72)]>damage)
	{
		targetCr.StatBase[(72)]-=damage;
	}
	else if(targetCr.StatBase[(72)]<=damage&&targetCr.StatBase[(72)]>0)
	{
		targetCr.StatBase[(72)]=1;
	}
	else if(targetCr.StatBase[(72)]<=damage)
	{
		targetCr.StatBase[(72)]=targetCr.StatBase[(72)];
	}
	
	if(sk+(player.Stat[(6)]-5)*5>Random(0,150))
	{
		ChangeStatus(targetCr,(0x040),0,false);
		player.Say((11),"Вы вытащили пулю из раны.");
	}
	else player.Say((11),"У вас не вышло извлечь пулю.");
	ProccessFirstAidSkill(player,targetCr,true);
}

bool ItemStimpackUse(Critter&cr,Item&item)
{
	int16 hpCurrent=cr.StatBase[(72)];
	int16 hpMax=(cr.StatBase[(7)]+cr.StatBase[(0)]*4+cr.StatBase[(2)]*8);
	int8 hpHealRate=cr.Stat[(13)];
	
	uint8 overdose=cr.GetTimeEvents((54),null,null,null)+cr.GetTimeEvents((55),null,null,null)*3;      
	
	int16 healAdd=(hpHealRate*(5-overdose));
	healAdd=(((healAdd)>((cr.Stat[(2)]+cr.Stat[(0)])*2))?((cr.Stat[(2)]+cr.Stat[(0)])*2):(((healAdd)<(1))?(1):(healAdd)));
	hpCurrent+healAdd>hpMax?cr.StatBase[(72)]=hpMax:cr.StatBase[(72)]+=healAdd;
	
	cr.Say((11),"Ваша боль отступает, а раны начинают затягиваться.");
	
	int i=(730);
	while(i<=(737)){
		cr.ParamBase[i]-=healAdd;
		if(cr.ParamBase[i]<0)cr.ParamBase[i]=0;
		i++;
	}
	
	cr.AddTimeEvent("cte_stimoverdose",3600,(54),0); 
	
	if(hpCurrent>=(hpMax*0.75))
	{
		ChangeStatus(cr,(0x001),healAdd*0.5,false);
	}   
	
	if(cr.IsNpc())return true;
	
	if(overdose<=(cr.Stat[(2)]+cr.Stat[(0)])/2.5)
	{
		overdose++;
		overdose=(((overdose)>(7))?(7):(((overdose)<(0))?(0):(overdose)));
		cr.StatBase[(148)]|=overdose;
	}
	else
	{
		if(Random(0,95)>cr.Stat[(6)]*10)
		{
			cr.ToDead(Random(0,1)>0?(102):(103),null);
			cr.Say((11),"Вы умерли от передозировки.");
			return true;
		}
		else
		{
			cr.ToKnockout((((Random(0,1)==1))?(82):(83)),(((Random(0,1)==1))?(86):(87)),(((Random(0,1)==1))?(88):(89)),200-(cr.Stat[(2)]*cr.Stat[(13)]*2),cr.HexX,cr.HexY);
			cr.Say((11),"У Вас передозировка.");
		}
	}  
	
	ChangeCritterSpeed(cr);
	
	cr.Say((11),"Вы восстановили "+healAdd+" жизней");
	return true;
}

bool ItemPowderUse(Critter&cr,Item&item)
{
	if(cr.IsNpc())return true;
	
	uint8 overdose=((cr.StatBase[(148)]>>4)&0x4);
	
	int16 hpCurrent=cr.StatBase[(72)];
	int16 hpMax=(cr.StatBase[(7)]+cr.StatBase[(0)]*4+cr.StatBase[(2)]*8);
	uint8 hpHealRate=cr.Stat[(13)];      
	
	int16 healAdd=(hpHealRate*(3-overdose));
	healAdd=(((healAdd)>((cr.Stat[(2)]+cr.Stat[(0)])))?((cr.Stat[(2)]+cr.Stat[(0)])):(((healAdd)<(1))?(1):(healAdd)));
	hpCurrent+healAdd>hpMax?cr.StatBase[(72)]=hpMax:cr.StatBase[(72)]+=healAdd;
	
	cr.Say((11),"Ваша боль отступает.");       
	
	if(overdose<=((cr.Stat[(2)]*2)+(cr.Stat[(0)]*2)/5))
	{
		
		overdose=(((overdose)>(7))?(7):(((overdose)<(0))?(0):(overdose)));
		
	}
	else
	{
		if(Random(0,95)>cr.Stat[(6)]*10)
		{
			
			cr.ToKnockout((((Random(0,1)==1))?(82):(83)),(((Random(0,1)==1))?(86):(87)),(((Random(0,1)==1))?(88):(89)),200-(cr.Stat[(2)]*cr.Stat[(13)]*2),cr.HexX,cr.HexY);
			cr.Say((11),"У вас передозировка.");
			return true;
		}
		else
		{
			cr.ToKnockout((((Random(0,1)==1))?(82):(83)),(((Random(0,1)==1))?(86):(87)),(((Random(0,1)==1))?(88):(89)),200-(cr.Stat[(2)]*cr.Stat[(13)]*2),cr.HexX,cr.HexY);
			cr.Say((11),"У Вас передозировка.");
		}
	}
	
	if((@item!=null))item.GetCount()>1?item.SetCount(item.GetCount()-1):DeleteItem(item);
	
	return true;
}

bool __Bandage(Critter&cr,Critter@targetCr)
{
	ProccessFirstAidSkill(cr,targetCr,false);
	return true;
}

void Prolonged_heal(Critter&targetCr,uint16 sk)
{
	targetCr.AddTimeEvent("cte_Heal",1500,(41),sk);
}

bool UseBandage(Critter&cr,Critter&targetCr,uint16 sk)
{
	uint rate=0;
	
	rate=targetCr.Stat[(7)]/(750/sk);
	
	targetCr.AddTimeEvent("cte_Heal",0,(41),rate);
	
	ChangeStatus(targetCr,(0x001),sk*0.5,false);
	
	targetCr.Say((11),"Вам наложили повязки.");
	targetCr.StatBase[(149)]=targetCr.StatBase[(149)]/8;
	
	if((@cr!=null))
	{
		if(cr.IsPlayer())
		{
			cr.Say((11),"Вы наложили повязку.");
			cr.TimeoutBase[(230)]=(__FullSecond+((15)*__TimeMultiplier));
			cr.AddScore((9),1);
		}
	}
	return true;
}

uint cte_Heal(Critter&cr,int identifier,uint&rate)
{
	uint heal=cr.Stat[(13)];
	if(heal<1)heal=3;
	if(heal>rate)heal=rate*2;
	
	bool isHealed=true;
	int i=(730);
	while(i<=(737)){
		if(cr.ParamBase[i]>0)isHealed=false;
		cr.ParamBase[i]-=heal;
		if(cr.ParamBase[i]<0)cr.ParamBase[i]=0;
		i++;
	}
	cr.StatBase[(72)]+=heal;
	int16 aidTime=6*60*__TimeMultiplier;
	
	if(!isHealed)cr.Say((11),"Вы восстановили "+heal+" жизней.");
	
	rate-=heal;
	if(cr.Param[(703)]==(4))cr.Say((11),"+hp="+heal+" ,rate="+rate+" ,time="+aidTime);
	
	ChangeCritterSpeed(cr);
	
	bool repeat=true;
	
	if(rate<=1){
		repeat=false;
		cr.Say((11),"Кажется, от повязки больше нет проку.");
	}
	return repeat?aidTime:0;
}

void ItemHypoUse(Critter&cr,Item&item){
	cr.AddTimeEvent("cte_quickheal",0,(53),cr.Stat[(7)]);
	cr.Say((11),"Вы начинаете быстро регенерировать.");
	cr.Say((5),"Раны срастаются");
	cr.ParamBase[(739)]-=30;
	cr.StatBase[(72)]+=100;
}

uint cte_quickheal(Critter&cr,int identifier,uint&rate){
	int heal=10;
	if(heal>rate)heal=rate;
	bool isHealed=true;
	int i=(730);
	while(i<=(737)){
		if(cr.ParamBase[i]>0)isHealed=false;
		cr.ParamBase[i]-=heal;
		if(cr.ParamBase[i]<0)cr.ParamBase[i]=0;
		i++;
	}
	cr.StatBase[(72)]+=heal;
	int16 aidTime=2;
	
	rate-=heal;
	
	ChangeCritterSpeed(cr);
	
	bool repeat=true;
	if(rate<=0){
		repeat=false;
	}
	return repeat?aidTime:0;
}

void ItemSupUse(Critter&cr,Item&item)
{
	uint8 overdose=cr.GetTimeEvents((54),null,null,null)+cr.GetTimeEvents((55),null,null,null)*3;
	
	cr.AddTimeEvent("cte_quickheal",0,(53),cr.Stat[(7)]/3);
	cr.Say((11),"Ваше сердце бьется учащенно. Вы чувствуете себя легче.");
	cr.Say((5),"Быстро дышит");
	cr.AddTimeEvent("cte_sstimoverdose",3600,(55),0);
	
	if(overdose<=(cr.Stat[(2)]+cr.Stat[(0)])/2.5)
	{
		
		overdose=(((overdose)>(7))?(7):(((overdose)<(0))?(0):(overdose)));
		
	}
	else
	{
		if(Random(0,95)>cr.Stat[(2)]*10)
		{
			
			cr.Say((11),"У вас передозировка");
			cr.ToKnockout((((Random(0,1)==1))?(82):(83)),(((Random(0,1)==1))?(86):(87)),(((Random(0,1)==1))?(88):(89)),30-(cr.Stat[(2)]*cr.Stat[(13)]*2),cr.HexX,cr.HexY);
		}
		else
		{
			cr.ToKnockout((((Random(0,1)==1))?(82):(83)),(((Random(0,1)==1))?(86):(87)),(((Random(0,1)==1))?(88):(89)),15-(cr.Stat[(2)]*cr.Stat[(13)]*2),cr.HexX,cr.HexY);
			cr.Say((11),"Вам становится плохо..");
		}
	}
} 

uint cte_stimoverdose(Critter&cr,int identifier,uint&rate){
	return 0;
}

uint cte_sstimoverdose(Critter&cr,int identifier,uint&rate){
	int damage=cr.Stat[(7)]/12;
	int i=(730);
	while(i<=(737)){
		cr.ParamBase[i]+=damage;
		i++;
	}
	return 0;
}
