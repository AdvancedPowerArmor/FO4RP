                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

funcdef uint PROCESS(Critter@,int&,int&,int&);                  

import bool RegisterProcess(uint8 type,any func)from"ltp";

import bool StartProcess(Critter&cr,uint8 type,int param0,int param1,int param2,uint time)from"ltp";
import bool StartProcess(Critter&cr,uint8 type,int param0,uint time)from"ltp";
import bool StartProcess(Critter&cr,uint8 type,uint time)from"ltp";

import bool StopProcess(Critter&cr)from"ltp";

import bool checkTDH(Critter&cr)from"ltp";
import bool checkTDH(Critter&cr,uint8 type)from"ltp";         

bool ltp_inited=false;
void ltp_init()
{
	PROCESS@___pfunc=@process_farming;any ___pany;___pany.store(@___pfunc);RegisterProcess((11),___pany);
	ltp_inited=true;
}

import uint GetTile(Map&map,uint16 hexX,uint16 hexY,uint8 layer)from"qmap";
import bool SetTile(Map&map,uint hash,uint16 hexX,uint16 hexY,uint8 layer)from"qmap";

import uint8 checkSand(Map&map,uint16 tx,uint16 ty)from"qmap_sand";

bool hashes_inited=false;   

uint[][]hashes_farm((1));

void init_hashes()
{
	string dir="art/tiles/",
	gar="gar",
	png=".png",
	frm=".frm";
	
	uint[]@data=null;
	
	@data=hashes_farm[(0)];
	data.resize(0);
	data.insertLast(GetStrHash(dir+gar+1000+png));
	uint i=0;
	for(i=2000;i<=2004;i++)
	data.insertLast(GetStrHash(dir+gar+i+frm));
	
	hashes_inited=true;
}

string color_emote="|0xFF00FF ";
string color_femote="|0xFF3366FF ";

void femote(Critter&cr,string&str)
{
	cr.Say((6),color_femote+str+color_emote);
}

bool UseShovel(Critter&cr,Item&item)
{
	return dig(cr);
}

void dig(Critter&player,int var,int param1,int param2)
{
	dig(player);
}

bool dig(Critter&player)
{
	Map@map=player.GetMap();
	if(map is null)
	return false;
	
	if(!hashes_inited)
	init_hashes();
	if(!ltp_inited)
	ltp_init();  
	
	if(player.GetAccess()<(2)&&map.GetProtoId()!=(191))
	{
		player.Say((11),"Здесь копать нельзя.");
		return true;
	}
	
	uint16 tx=((player.HexX)>>1);
	uint16 ty=((player.HexY)>>1);
	
	if(checkSand(map,tx,ty)==0)
	{
		player.Say((11),"Попробуйте копать песок.");
		return true;
	}
	
	uint16 hexX=((player.HexX)>>1);
	uint16 hexY=((player.HexY)>>1);
	
	uint hash=GetTile(map,hexX,hexY,0);
	
	if(hash!=0)
	{
		player.Say((11),"Нечего копать.");
		return true;
	}
	
	for(int i=-2;i<=2;i++)
	{
		for(int k=-2;k<=2;k++)
		{
			if((i==0&&k==0)||map.IsHexPassed(player.HexX+i,player.HexY+k))
			continue;
			player.Say((11),"Здесь нельзя копать.");
			
			return true;
		}
	}
	
	femote(player,"копает");
	StartProcess(player,(11),(11-player.Param[(0)])*1000);
	
	return true;
}

uint process_farming(Critter@cr,int&param0,int&param1,int&param2)
{
	if(param0==-1&&(cr is null)){param0=int((11));return(0xF035BCF3);}
	
	Map@map=cr.GetMap();
	
	uint16 hexX=((cr.HexX)>>1);
	uint16 hexY=((cr.HexY)>>1);
	
	uint hash=GetTile(map,hexX,hexY,0);
	
	if(hash!=0)
	{
		return 0;
	}
	
	uint[]@data=hashes_farm[(0)];
	
	uint prevTile=GetTile(map,hexX,hexY-1,0),
	nextTile=GetTile(map,hexX,hexY+1,0),
	newTile=0;  
	
	bool prev=true,next=true;
	
	if(prevTile==data[0])
	{
		SetTile(map,data[1],hexX,hexY-1,0);
	}
	else if(prevTile==data[5])
	{
		SetTile(map,data[Random(2,4)],hexX,hexY-1,0);
	}
	else
	prev=false;
	
	if(nextTile==data[0])
	{
		SetTile(map,data[5],hexX,hexY+1,0);
	}
	else if(nextTile==data[1])
	{
		SetTile(map,data[Random(2,4)],hexX,hexY+1,0);
	}
	else
	next=false;
	
	if(prev&&next)
	newTile=data[Random(2,4)];
	else if(prev)
	newTile=data[5];
	else if(next)
	newTile=data[1];
	else
	newTile=data[0];  
	
	SetTile(map,newTile,hexX,hexY,0);
	
	return 0;
}

void CheckGard(Critter&player,int var,int param1,int param2)
{
	Map@map=player.GetMap();
	if(map is null)
	return;
	
	player.Say((11),"На грядке "+(CheckGard(map,player.HexX,player.HexY)?"true":"false"));
}

bool CheckGard(Map&map,uint16 hexX,uint16 hexY)
{
	if(!hashes_inited)
	init_hashes();
	
	uint16 hexX0=((hexX>>1)<<1)+1;
	
	if(hexX!=hexX0)
	{
		
		return false;
	}
	
	uint tile=GetTile(map,((hexX)>>1),((hexY)>>1),0),
	tile2=map.GetTile(hexX>>1,hexY>>1);
	
	uint[]@data=hashes_farm[(0)];
	
	if(tile==data[0]||tile==data[5]||tile2==data[0]||tile2==data[5])
	return(hexY%2==0);
	
	if(tile==data[1]||tile2==data[1])
	return(hexY%2==1);
	
	if(tile==data[2]||tile==data[3]||tile==data[4]||tile2==data[2]||tile2==data[3]||tile2==data[4])
	return true;
	
	return false;
}
