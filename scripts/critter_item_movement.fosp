

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

bool critter_check_move_item(Critter&cr,Item&item,uint8 toSlot,Item@itemSwap)
{
	uint8 fromSlot=item.CritSlot;
	
	bool moveFreeze=false,
	dropFreeze=false;
	
	if(cr.Stat[(67)]>4&&cr.Stat[(67)]<10||cr.Stat[(67)]>10)
	{
		moveFreeze=true;
		dropFreeze=true;
	} 
	
	if(toSlot==(255))
	return!dropFreeze; 
	
	bool handsSwap=((fromSlot==(1)&&toSlot==(2))||(fromSlot==(2)&&toSlot==(1)));
	if((@itemSwap!=null)&&!handsSwap)
	return false;
	
	if(moveFreeze&&!handsSwap)
	return false; 
	
	if(toSlot==(1))
	{
		if(item.GetType()==(3)&&!IsCritterAnim1(cr.CrType,item.Proto.Weapon_Anim1))
		return false;
	} 
	
	if(toSlot==(3))
	{
		if(item.GetType()!=(1))
		return false;
		if(item.Proto.Slot!=(0))
		return false;
		if(!IsCritterCanArmor(cr.CrType))
		return false;
	} 
	
	if(toSlot>(3))
	{
		if(toSlot!=item.Proto.Slot)
		return false;
	} 
	
	return true;
}  

import void ChangeCritterSpeed(Critter&cr)from"speed";  

void critter_move_item(Critter&cr,Item&item,uint8 fromSlot)
{
	uint8 toSlot=item.CritSlot;          
	
	if(fromSlot==0xFF||item.CritSlot==0xFF)
	{
		ChangeCritterSpeed(cr);
		
		if(item.GetType()==(8))
		{
			int contWeight=0;
			Item@[]items;
			uint len=item.GetItems(-1,items);
			for(uint i=0;i<len;i++)
			{
				if(items[i]is null)
				continue;
				
				contWeight+=int(items[i].Proto.Weight*items[i].GetCount());
			}
			if(fromSlot==0xFF)
			contWeight*=-1;
			cr.ParamBase[(43)]+=contWeight;  
			
			return;
		}
	}           
	
	if(item.GetType()==(1)&&(fromSlot==(3)||toSlot==(3)))
	{
		if(GetCritterAnimType(cr.CrType)!=(1))
		{
			
			bool isMale=(cr.Stat[(71)]==(0));
			uint crType=cr.Stat[(112)];
			if(crType==0)
			crType=(isMale?((106)):((4)));
			if(toSlot==(3))
			crType=(isMale?item.Proto.Armor_CrTypeMale:item.Proto.Armor_CrTypeFemale); 
			
			if(crType!=104&&crType!=111&&crType!=112&&crType!=3&&crType!=10&&crType!=71&&crType!=1&&crType!=2&&crType!=122&&crType!=84)
			{
				uint[]NoArmorSkins={
					9,
					28,
					33,
					34,
					35,
					36,
					37,
					39,
					42,
					45,
					48,
					57,
					72,
					73,
					79,
					89,
					91,
					92,
					93,
					95,
					99};
				if(NoArmorSkins.find(cr.Stat[(112)])!=-1)crType=cr.Stat[(112)];
			} 
			
			if((cr.Stat[(112)]==(106)||cr.Stat[(112)]==(110))&&isMale)
			{
				crType=cr.Stat[(112)];
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=(107);
					else if(crType==(136))
					crType=(140);
					else if(crType==(142))
					crType=(125);
					else if(crType==(13))
					crType=(108);
					else if(crType==(14))
					crType=(109);
					else if(crType==(124))
					crType=(125);
					else if(crType==(11))
					crType=(106);
				}
			}
			else if((cr.Stat[(112)]==(116)||cr.Stat[(112)]==(120))&&isMale)
			{
				crType=cr.Stat[(112)];
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=(117);
					else if(crType==(136))
					crType=(139);
					else if(crType==(142))
					crType=(126);
					else if(crType==(13))
					crType=(118);
					else if(crType==(14))
					crType=(119);
					else if(crType==(124))
					crType=(126);
					else if(crType==(11))
					crType=(116);
				}
			}
			
			else if(cr.Stat[(112)]==(100))
			{
				crType=cr.Stat[(112)];
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=(99);
					else if(crType==(136))
					crType=(99);
					else if(crType==(13))
					crType=(99);
					else if(crType==(142))
					crType=(99);
					else if(crType==(14))
					crType=(99);
					else if(crType==(124))
					crType=(99);
					else if(crType==(11))
					crType=(99);
					else if(crType==(122))
					crType=(99);
				}
			}
			else if(cr.Stat[(112)]==(149))
			{
				crType=cr.Stat[(112)];
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=(150);
					else if(crType==(136))
					crType=(150);
					else if(crType==(13))
					crType=(153);
					else if(crType==(142))
					crType=(150);
					else if(crType==(14))
					crType=(155);
					else if(crType==(124))
					crType=(150);
					else if(crType==(10))
					crType=(154);
				}
			}
			if(toSlot==(3))
			{
				uint body=cr.Param[(112)];
				if(body==20||body==21||body==114)
				{
					if(item.GetProtoId()!=592&&item.GetProtoId()!=593)
					{
						uint flags=item.BrokenFlags;
						cr.SayMsg((11),(3),105664);
						uint pid=item.GetProtoId();
						uint16 wear=item.Deterioration;
						DeleteItem(item);
						Item@newArmor=cr.AddItem(pid,1);
						newArmor.Deterioration=wear;
						newArmor.BrokenFlags=flags;
						newArmor.Update();
						crType=cr.Param[(112)];
					}
				}
				else if(body!=20&&body!=21&&body!=114)
				{
					if(item.GetProtoId()==592||item.GetProtoId()==593)
					{
						uint flags=item.BrokenFlags;
						uint16 wear=item.Deterioration;
						cr.SayMsg((11),(3),105663);
						uint pid=item.GetProtoId();
						DeleteItem(item);
						Item@newArmor=cr.AddItem(pid,1);
						newArmor.Deterioration=wear;
						newArmor.BrokenFlags=flags;
						newArmor.Update();
						crType=cr.Param[(112)];
					}
				}
			} 
			
			if(cr.CrType!=crType)
			cr.ChangeCrType(crType);
		}  
		
		int sign=(toSlot==(3)?int(1):-1);
		switch(item.Proto.Armor_Perk)
		{
			case(1):
			cr.StatBase[(32)]+=3*sign;
			cr.StatBase[(62)]+=30*sign;
			break;
			case(2):
			cr.StatBase[(62)]+=20*sign;
			break;
			case(3):
			cr.StatBase[(32)]+=4*sign;
			cr.StatBase[(62)]+=60*sign;
			break;
			case(4):
			cr.StatBase[(32)]+=4*sign;
			cr.StatBase[(62)]+=75*sign;
			break;
			case(5):
			cr.StatBase[(35)]+=1*sign;
			break;
			case(6):
			cr.StatBase[(62)]+=50*sign;
			cr.StatBase[(32)]+=2*sign;
			break;
			case(7):
			cr.StatBase[(62)]+=10*sign;
			cr.StatBase[(32)]+=3*sign;
			break;
			default:
			break;
		}
		cr.StatBase[(114)]=(toSlot==(3)?item.Proto.Armor_Perk:0);
	}     
	
}

