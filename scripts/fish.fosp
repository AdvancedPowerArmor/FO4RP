

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

funcdef uint PROCESS(Critter@,int&,int&,int&);                  

import bool RegisterProcess(uint8 type,any func)from"ltp";

import bool StartProcess(Critter&cr,uint8 type,int param0,int param1,int param2,uint time)from"ltp";
import bool StartProcess(Critter&cr,uint8 type,int param0,uint time)from"ltp";
import bool StartProcess(Critter&cr,uint8 type,uint time)from"ltp";

import bool StopProcess(Critter&cr)from"ltp";

import bool checkTDH(Critter&cr)from"ltp";
import bool checkTDH(Critter&cr,uint8 type)from"ltp";         

bool ltp_inited=false;
void ltp_init()
{
	PROCESS@___pfunc=@process_fishing;any ___pany;___pany.store(@___pfunc);RegisterProcess((10),___pany);
	ltp_inited=true;
} 

import uint8 checkSand(Map&map,uint16 tx,uint16 ty)from"qmap_sand";
import uint8 checkWaterAround(Map&map,uint16 tx,uint16 ty,uint8 coast_flags,uint8 radius,bool smartRadius)from"qmap_water";
import uint8 checkCoast(Map&map,uint16 tx,uint16 ty)from"qmap_coast";

string color_emote="|0xFF00FF ";
string color_femote="|0xFF3366FF ";
string color_fish="|0xFFCC2233 ";
string color_size="|0xFF999999 ";

void femote(Critter&cr,string&str)
{
	cr.Say((6),color_femote+str+color_emote);
}                      

void _InitFish(Item&item,bool firstTime)
{
	if(firstTime)
	{
		uint16 proto=item.GetProtoId();
		if(proto<(940)||proto>(944))
		return;
		
		uint size=proto-(940),
		length=size*10+Random(1,10),
		quality=size*5+Random(1,10),
		freshness=0;
		
		item.Val7=length;
		item.Val2=quality;
		item.Val3=freshness;
		
		item.Cost=(1+size)*length;
	}
	
}

void _InitRod(Item&item,bool firstTime)
{
	item.SetEvent((2),"_UseRod");
	item.SetEvent((4),"_SkillRod");
	item.SetEvent((6),"_MoveRod");
}

bool _UseRod(Item&rod,Critter&cr,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	uint16 pid=rod.GetProtoId();
	if(!IsRod(pid))
	return true;
	
	if(pid!=(924))
	{
		if(pid==(920))
		cr.Say((11),"На удочке нет лески и крючка.");
		else if(pid==(923))
		cr.Say((11),"На удочке нет крючка.");
	}
	else
	{
		fish(cr);
	}
	
	return true;
}

bool _SkillRod(Item&rod,Critter&cr,int skill)
{
	uint16 pid=rod.GetProtoId();
	if(!IsRod(pid))
	return false;
	
	if(skill!=(213)||pid==(920))
	return false;
	
	if(modifyRod(rod,(920)))
	{
		cr.AddItem((922),1);
		if(pid==(924))
		cr.AddItem((921),1);
		femote(cr,"снимает леску с удочки");
	}
	return true;
}

void _MoveRod(Item&rod,Critter&cr,uint8 fromSlot)
{
	uint16 pid=rod.GetProtoId();
	if(!IsRod(pid))
	return;
	
	if(rod.CritSlot!=(1)||fromSlot==(1))
	return;
	
	femote(cr,"достает удочку");
}

void _InitHook(Item&item,bool firstTime)
{
	item.SetEvent((2),"_UseHook");
}

bool _UseHook(Item&item,Critter&cr,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	Item@rod=cr.GetItem(0,(1));
	uint16 pid=0;
	if(@rod!=null)
	pid=rod.GetProtoId();  
	
	if(pid!=(923))
	{
		if(pid==(920))
		cr.Say((11),"На удочке нет лески.");
		else if(pid==(924))
		cr.Say((11),"На удочке уже есть крючок.");
		else
		cr.Say((11),"Вы пытаетесь воткнуть крючок себе в глаз, но в последний момент передумываете.");
	}
	else
	{
		if(modifyRod(rod,(924)))
		{
			cr.Say((11),"Вы успешно закрепили крючок на конце лески.");
			femote(cr,"привязывает крючок к леске");
			DeleteItem(item);
		}
	}
	
	return true;
}

void _InitString(Item&item,bool firstTime)
{
	item.SetEvent((2),"_UseString");
}

bool _UseString(Item&item,Critter&cr,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	Item@rod=cr.GetItem(0,(1));
	uint16 pid=0;
	if(@rod!=null)
	pid=rod.GetProtoId();  
	
	if(pid!=(920))
	{
		if(pid==(923)||pid==(924))
		cr.Say((11),"На удочке уже есть леска.");
		else
		cr.Say((11),"Вы пытаетесь вытащть леской застрявший между зубов кусок еды, но он не поддается.");
	}
	else
	{
		if(modifyRod(rod,(923)))
		cr.Say((11),"Вы успешно привязали леску.");
		femote(cr,"привязывает леску к удочке");
		DeleteItem(item);
	}
	
	return true;
}

void _InitAlgae(Item&item,bool firstTime)
{}  

void fish(Critter&player,int var,int con,int param2)
{
	fishing_checkTiles(player);
}

void fish(Critter&player)
{
	fishing_checkTiles(player);
}

uint8[]dir={3,5,0,2};
void fishing_checkTiles(Critter&player)
{
	Map@map=player.GetMap();
	if(map is null)
	return;
	
	if(!ltp_inited)
	ltp_init();
	
	if(checkTDH(player,(10))&&player.Param[(141)]==map.Id)
	{ 
		
		femote(player,"закинул удочку");
		StartProcess(player,(10),Random(5,15)*1000);
		return;
	}
	
	uint16 tx=((player.HexX)>>1);
	uint16 ty=((player.HexY)>>1);
	
	GameVar@is_dock=GetLocalVar((30),map.Id);
	uint is_dock_val=is_dock.GetValue();
	
	uint8 coast_flags=0,
	water_flags=0;
	bool aboveGround=false;   
	
	coast_flags=checkCoast(map,tx,ty);
	
	if(is_dock_val!=0&&coast_flags==0&&(checkSand(map,tx,ty)==0))
	{
		coast_flags=0xF;
		aboveGround=true;
	}
	
	if(coast_flags!=0)
	{
		water_flags=checkWaterAround(map,tx,ty,coast_flags,1+(aboveGround?1:0),aboveGround);
		if(water_flags!=0)
		{ 
			
			for(uint i=0;i<4;i++)
			{
				if(water_flags&(0x1<<i)==0)
				continue;
				player.SetDir(dir[i]);
				break;
			}       
			
			femote(player,"закинул удочку");
			StartProcess(player,(10),(aboveGround?1:0),Random(5,15)*1000);
		}
		else
		player.Say((11),"Рядом нет воды.");
	}
	else
	player.Say((11),"Вы не на берегу.");
	
}                     

uint process_fishing(Critter@cr,int&param0,int&param1,int&param2)
{
	if(param0==-1&&(cr is null)){param0=int((10));return(0xF035BCF3);}
	if(fishing(cr,param0!=0))
	{
		return Random(5,15)*1000;
	}
	else
	{
		return 0;
	}
}

bool fishing(Critter&cr,bool aboveGround)
{
	uint roll=Random(0,500);
	
	bool fh=true;
	
	Item@catch=null;
	
	if(roll<300)
	{
		cr.Say((11),color_size+"Не клюет.");
	}
	else if(roll==300&&aboveGround)
	{
		cr.Say((11),color_size+"Вы утопили удочку.");
		modifyRod(cr,0);
		fh=false;
		femote(cr,"утопил удочку");
	}
	else if(roll<310)
	{
		cr.Say((11),color_size+"Вы порвали леску.");
		modifyRod(cr,(920));
		fh=false;
		femote(cr,"порвал леску");
	}
	else if(roll<315)
	{
		cr.Say((11),color_size+"Крючок оборвался с лески.");
		modifyRod(cr,(923));
		fh=false;
		femote(cr,"потерял крючок");
	}
	else if(roll<330)
	cr.Say((11),color_size+"Приманка соскочила с крючка.");
	else if(roll==330)
	{
		cr.Say((11),"Вы поймали: "+color_fish+"дырявый башмак");
		fh=false;
		femote(cr,"выудил башмак");
	}
	else if(roll<350)
	{
		cr.Say((11),"Вы поймали: "+color_fish+"полиэтиленовый пакет");
		fh=false;
		femote(cr,"выудил кусок полиэтилена");
	}
	else if(roll==350)
	{
		cr.Say((11),"Вы поймали: "+color_fish+"кастет");
		@catch
		=
		cr.AddItem((21),1);
		fh=false;
		femote(cr,"выудил какую-то железку");
	}
	else if(roll<365)
	{
		cr.Say((11),"Вы поймали: "+color_fish+"мусор");
		@catch
		=
		cr.AddItem((98),1);
		fh=false;
		femote(cr,"выудил мусор");
	}
	else if(roll==365)
	{
		cr.Say((11),"Вы поймали: "+color_fish+"бутылку Нюка-колы");
		@catch
		=
		cr.AddItem((106),1);
		fh=false;
		femote(cr,"выудил бутылку");
	}
	else if(roll<390)
	{
		cr.Say((11),"Вы поймали: "+color_fish+"плотоядные водоросли");
		@catch
		=
		cr.AddItem((939),1);
		fh=false;
		femote(cr,"выудил водоросли");
	}
	else if(roll<430)
	{
		catch_fish(cr,(0),0);
		fh=false;
	}
	else if(roll<460)
	{
		catch_fish(cr,(1),0);
		fh=false;
	}
	else if(roll<480)
	{
		catch_fish(cr,(2),(aboveGround?-10:0));
		fh=false;
	}
	else if(roll<490)
	{
		catch_fish(cr,(3),(aboveGround?-20:0));
		fh=false;
	}
	else if(roll<500)
	{
		catch_fish(cr,(4),(aboveGround?-40:0));
		fh=false;
	}
	else if(roll==500)
	{
		if(aboveGround)
		cr.Say((11),color_fish+"В вводе промелькнула огромная тень.");
		else
		{
			cr.Say((11),color_fish+"Ваш улов поймал вас.");
			cr.ToKnockout(((false)?(82):(83)),((false)?(86):(87)),((false)?(88):(89)),30,cr.HexX,cr.HexY);
			cr.ParamBase[(72)]-=Random(5,10);
			if(Random(0,4)==4)
			cr.ParamBase[(503)]=1;
			fh=false;
		}
	}
	
	if(fh)
	femote(cr,"рыбачит");
	
	return fh;
}

string[]size_names_t={"мелкую рыбешку","рыбку","рыбу","рыбищу","рыбу-гиганта"};
Item@catch_fish(Critter&cr,uint8 size,int16 roll_mod)
{
	if(size>(4))
	return null;
	
	int pull_roll=Random(0,100);
	
	Item@catch=null;  
	
	if(pull_roll+roll_mod>(size+1)*10)
	{
		@catch
		=
		cr.AddItem((940)+size,1);
		
		if(catch is null)
		return null;
		
		cr.Say((11),"Вы поймали: "+color_fish+size_names_t[size]);
		
		cr.Say((11),"Размер: "+color_size+(catch.Val7)+" см");
		
		femote(cr,"поймал "+size_names_t[size]);
	}
	else
	{
		cr.Say((11),color_size+"Рыба сорвалась с крючка.");
		femote(cr,"упустил рыбу");
	}
	
	return catch;
}

bool IsRod(uint16 pid)
{
	return(pid==(920)||pid==(923)||pid==(924));
}

bool modifyRod(Critter&cr,uint16 toPid)
{
	Item@rod=cr.GetItem(0,(1));
	if(rod is null)
	return false;
	return modifyRod(rod,toPid);
}

bool modifyRod(Item&rod,uint16 toPid)
{
	uint16 fromPid=rod.GetProtoId();
	
	if(toPid!=0)
	{
		if(fromPid==toPid)
		return false;
		if(!IsRod(fromPid))
		{
			Log("modifyRod wtf with fromPid");
			return false;
		}
		if(!IsRod(toPid))
		{
			Log("modifyRod wtf with toPid");
			return false;
		}
		
		rod.ChangeProto(toPid);
	}
	else
	{
		DeleteItem(rod);
	}
	
	return true;
}
