// temprorary interactive objects for satter
// powermagic

#include "_macros.fos"
#include "_defines.fos"
#include "_itempid.fos"
#include "_maps.fos"

import void DropBleed( Critter& cr ) from "critter_status";
import void DropToxic( Critter& cr ) from "critter_status";

#define PID_OBJECT_WATERPUMP    ( 1300 )
#define PID_OBJECT_WATTS        ( 1303 )
#define PID_OBJECT_AIRLOCK      ( 1302 )
#define PID_OBJECT_DOC          ( 1304 )
#define PID_OBJECT_LIGHT        ( 1305 )

#define DATA_POWER	            ( 24 )
#define DATA_DYSPNEA            ( 25 )

/*bool s_WaterPump(Critter& cr, Scenery& scen, int skill, Item@ item){
        if(skill == SKILL_PICK_ON_GROUND){
                GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, );
        }
   }*/

/*
 * val1 - powerOn
 * val2 - switcher
 * val3 - (power, water, charge)
 */

void WaterPumpInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "_WaterPumpSkill" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "_WaterPumpOnMe" );
}

const uint[] bottlePid = { PID_BOTTLE_GLASS, PID_BOTTLE_EMPTY };
const uint[] bottleFull = { PID_NUKA_COLA, PID_BOTTLE_FULL };
const uint[] bottleSize = { 1, 1 };
const uint[] mapPids = { /*MAP_SATTER_CENTER, */ MAP_SATTER_CENTER_DN, MAP_SATTER_CENTER_DN_2 /*, MAP_SATTER_CENTER_UP, MAP_SATTER_CENTER_UP_1*/ };
const uint[] mapLight = { MAP_SATTER_CENTER, MAP_SATTER_CENTER_DN, MAP_SATTER_CENTER_DN_2 };

bool _WaterPumpSkill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
        // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

        uint8 switcher = item.Val2;
        uint8 powerOn = item.Val1;

        // if(switcher is null || powerOn is null) return false;

        if( powerOn /*.GetValue()*/ > 0 )
        {
            int val = switcher /*.GetValue()*/;
            val = ( val > 0 ? 0 : 1 );

            string msg = "";

            if( val > 0 )
            {
                msg = "Включено";
            }
            else
            {
                msg = "Выключено";
            }

            // switcher.opAssign(val);
            item.Val2 = val;

            cr.Say( SAY_NETMSG, "" + msg + ". Вода " + ( val > 0 ? "" : "не" ) + " очищается." );
        }
        else
        {
            cr.Say( SAY_NETMSG, "Энергоснабжение отклчено. Запустите генератор сначала." );
        }
    }
    else if( skill == SK_SCIENCE )
    {
        // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
        // if(switcher is null) return true;

        int    val = item.Val2;     // switcher.GetValue();

        string msg = "";

        if( val > 0 )
        {
            msg = "включено";
        }
        else
        {
            msg = "выключено";
        }

        cr.Say( SAY_NETMSG, "Сейчас " + msg + "." );
    }

    return true;
}
bool _WaterPumpOnMe( Item& item, Critter& cr, Item@ usedItem )
{

    if( usedItem is null )
        return false;

    uint pid = usedItem.GetProtoId();
    int8 index = bottlePid.find( pid );

    // if(skill == SKILL_PICK_ON_GROUND){
    if( index != -1 )
    {
        // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
        // GameVar @ water = GetLocalVar(LIVAR_Object_Water, item.Id);
        // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

        // if(switcher is null || water is null || powerOn is null) return false;

        uint8 powerOn = item.Val1;
        uint8 switcher = item.Val2;
        uint8 water = item.Val3;

        if( powerOn /*.GetValue()*/ > 0 )
        {
            if( switcher /*.GetValue()*/ > 0 )
            {
                if( water /*.GetValue()*/ > 0 )
                {
                    _SubItem( usedItem, 1 );
                    //cr.AddItem( PID_NUKA_COLA, 1 ); PID_BOTTLE_FULL
		    cr.AddItem( bottleFull[index], 1 );
                    // switcher.opSub(bottleSize[index]);
                    item.Val3 -= bottleSize[ index ];
                }
                else
                {
                    cr.Say( SAY_NETMSG, "Воды больше нет." );
                }
            }
            else
            {
                cr.Say( SAY_NETMSG, "Помпа отключена. Включите ее сначала." );
            }
        }
        else
        {
            cr.Say( SAY_NETMSG, "Энергия отключена. Включите генератор." );
        }

        return true;
    }

    return false;
}

void WattsInit( Item& item, bool firstTime )
{
    // item.SetEvent(ITEM_EVENT_SKILL, "_WaterPumpSkill");
    item.SetEvent( ITEM_EVENT_SKILL, "_WattsSkill" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "_WattsOnMe" );
}

bool _WattsSkill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
        // GameVar @ power = GetLocalVar(LIVAR_Object_Energy, item.Id);

        // if(switcher is null || power is null) return false;

        uint8 power = item.Val3;
        uint8 switcher = item.Val2;

        if( power /*.GetValue()*/ > 0 )
        {
            int val = switcher /*.GetValue()*/;
            val = ( val > 0 ? 0 : 1 );

            // switcher.opAssign(val);
            item.Val2 = val;
            WattsRelease( val );

            string msg = "";

            if( val > 0 )
            {
                msg = "включен";
            }
            else
            {
                msg = "выключен";
            }

            cr.Say( SAY_NETMSG, "Генератор " + msg + "." );
        }
        else
        {
            cr.Say( SAY_NETMSG, "Кончился заряд. Зарядите генератор." );
        }
    }
    else if( skill == SK_SCIENCE )
    {
        // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
        // GameVar @ power = GetLocalVar(LIVAR_Object_Energy, item.Id);

        // if(switcher is null || power is null) return true;

        uint8  power = item.Val3;
        uint8  switcher = item.Val2;

        int    val = switcher /*.GetValue()*/;

        string msg = "", addMsg = "";

        if( val > 0 )
        {
            msg = "включен";
            addMsg = " Уровень заряда генератора : " + power /*.GetValue()*/ + " .";
        }
        else
        {
            msg = "выключен";
        }

        cr.Say( SAY_NETMSG, "Сейчас " + msg + "." + addMsg );
    }

    return true;
}

bool _WattsOnMe( Item& item, Critter& cr, Item@ usedItem )
{
    if( usedItem is null || usedItem.GetProtoId() != PID_MICRO_FUSION_CELL )
        return false;

    // GameVar @ power = GetLocalVar(LIVAR_Object_Energy, item.Id);

    // if(power is null) return false;

    uint8 power = item.Val3;

    // power.opAddAssign(1);
    power++;
    power = CLAMP( power, 0, 100 );
    item.Val3 = power;

    _SubItem( usedItem, 1 );

    cr.Say( SAY_NETMSG, "Вы подзарядили генератор." );

    return true;
}

void WattsRelease( int val )
{
    for( uint8 i = 0; i < mapPids.length(); ++i )
    {
        Map @ map = GetMapByPid( mapPids[ i ], 0 );
        if( map is null )
            continue;
	
	map.SetData(DATA_POWER, val); 		//for elevators

        Item@[] water;
        Item@[] air;
        Item@[] doc;
        Item@[] door;

        map.GetItems( PID_OBJECT_WATERPUMP, water );
        map.GetItems( PID_OBJECT_AIRLOCK, air );
        map.GetItems( PID_OBJECT_DOC, doc );

        map.GetItemsByType( ITEM_TYPE_DOOR, door );

        for( uint8 ii = 0, jj = water.length(); ii < jj; ++ii )
        {
            Item @ item = water[ ii ];

            if( item is null )
                continue;

            // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
            // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

            // if(switcher is null || powerOn is null) continue;

            uint8 powerOn = item.Val1;
            uint8 switcher = item.Val2;

            if( switcher /*.GetValue()*/ > 0 )
            {
                // switcher.opAssign(0); powerOn.opAssign(0);
                item.Val1 = 0;
                item.Val2 = 0;
            }
            else
            {
                // powerOn.opAssign(1);
                item.Val1 = 1;
            }
        }

        for( uint8 ii = 0, jj = air.length(); ii < jj; ++ii )
        {
            Item @ item = air[ ii ];

            if( item is null )
                continue;

            //	GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
            //	GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

            //	if(switcher is null || powerOn is null) continue;

            uint8 powerOn = item.Val1;
            uint8 switcher = item.Val2;

            if( switcher /*.GetValue()*/ > 0 )
            {
                // switcher.opAssign(0); powerOn.opAssign(0);
                item.Val1 = 0;
                item.Val2 = 0;
            }
            else
            {
                // powerOn.opAssign(1);
                item.Val1 = 1;
            }
        }

        for( uint8 ii = 0, jj = doc.length(); ii < jj; ++ii )
        {
            Item @ item = doc[ ii ];

            if( item is null )
                continue;

            // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
            // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

            // if(switcher is null || powerOn is null) continue;

            uint8 powerOn = item.Val1;
            uint8 switcher = item.Val2;

            if( switcher /*.GetValue()*/ > 0 )
            {
                // switcher.opAssign(0); powerOn.opAssign(0);
                item.Val1 = 0;
                item.Val2 = 0;
            }
            else
            {
                // powerOn.opAssign(1);
                item.Val1 = 1;
            }
        }

        for( uint8 ii = 0, jj = door.length(); ii < jj; ++ii )
        {
            Item @ item = door[ ii ];

            if( item is null )
                continue;

            if( IsDoorAutomatic( item.GetProtoId() ) )
            {

                int val = item.Val6;
                val = ( val > 0 ? 0 : 1 );
                item.Val6 = val;
            }
        }

    }

    for( uint8 i = 0, j = mapLight.length(); i < j; ++i )
    {
        Map @ map = GetMapByPid( mapLight[ i ], 0 );
        if( map is null )
            continue;

        Item@[] light;

        map.GetItems( PID_OBJECT_LIGHT, light );

        for( uint8 ii = 0, jj = light.length(); ii < jj; ++ii )
        {
            Item @ item = light[ ii ];

            if( item is null )
                continue;

            // if(IsDoorAutomatic(item.GetProtoId())){

            int val = item.Val1;
            val = ( val > 0 ? 0 : 1 );
            item.Val1 = val;

            bool switcher = ( val > 0 );

            if( switcher )
            {
                // UNSETFLAG(item.Flags, ITEM_HIDDEN);
                // SETFLAG(item.Flags, ITEM_LIGHT);
                // item.LightDistance = 6;
                item.LightIntensity = 100;


            }
            else
            {
                // SETFLAG(item.Flags, ITEM_HIDDEN);
                // UNSETFLAG(item.Flags, ITEM_LIGHT);
                // item.LightDistance = 0;
                item.LightIntensity = -1;
            }

            item.Update();
        }
    }
}

// void TurnOnAir

bool IsDoorAutomatic( uint pid )
{
    bool automat = ( pid == 2142 || pid == 2143 || pid == 3169 || pid == 3170 || pid == 4763 || pid == 4765 );

    return automat;
}

void AirLockInit( Item& item, bool firstTime )
{
    // item.SetEvent(ITEM_EVENT_SKILL, "_WaterPumpSkill");
    item.SetEvent( ITEM_EVENT_SKILL, "_AirLockSkill" );
}

bool _AirLockSkill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
        // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

        // if(switcher is null || powerOn is null) return false;

        uint8 powerOn = item.Val1;
        uint8 switcher = item.Val2;

        if( powerOn /*.GetValue()*/ > 0 )
        {
            int val = switcher /*.GetValue()*/;
            val = ( val > 0 ? 0 : 1 );

            string msg = "";

            if( val > 0 )
            {
                msg = "Включено";
            }
            else
            {
                msg = "Выключено";
            }

            // switcher.opAssign(val);
            item.Val2 = val;
            cr.Say( SAY_NETMSG, "" + msg + ". Воздух " + ( val > 0 ? "" : "не" ) + " поступает." );
        }
        else
        {
            cr.Say( SAY_NETMSG, "Энергия отключена. Включите генератор." );
        }
    }
    else if( skill == SK_SCIENCE )
    {
        // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
        // if(switcher is null) return true;

        uint8  switcher = item.Val2;

        int    val = switcher /*.GetValue()*/;

        string msg = "";

        if( val > 0 )
        {
            msg = "включено";
        }
        else
        {
            msg = "выключено";
        }

        cr.Say( SAY_NETMSG, "Сейчас " + msg + "." );
    }

    return true;
}

void DocInit( Item& item, bool firstTime )
{
    // item.SetEvent(ITEM_EVENT_SKILL, "_WaterPumpSkill");
    item.SetEvent( ITEM_EVENT_SKILL, "_DocSkill" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "_DocOnMe" );
}

bool _DocSkill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
        // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);
        // GameVar @ charge = GetLocalVar(LIVAR_Object_DocCharge, item.Id);

        // if(switcher is null || powerOn is null || charge is null) return false;

        uint8 powerOn = item.Val1;
        uint8 switcher = item.Val2;
        uint8 charge = item.Val3;

        if( powerOn /*.GetValue()*/ > 0 )
        {
            if( charge /*.GetValue()*/ > 0 )
            {
                DocHeal( cr );
                // charge.opSub(1);

                charge--;
                charge = CLAMP( charge, 0, 100 );
                item.Val3 = charge;
            }
            else
            {
                cr.Say( SAY_NETMSG, "Закончился биогель, обновите резервуар." );
            }
        }
        else
        {
            cr.Say( SAY_NETMSG, "Энергия отключена. Включите генератор." );
        }
    }
    else if( skill == SK_SCIENCE )
    {
        // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);
        // GameVar @ charge = GetLocalVar(LIVAR_Object_DocCharge, item.Id);

        // if(powerOn is null || charge is null) return true;

        uint8  powerOn = item.Val1;
        uint8  charge = item.Val3;

        int    val = powerOn /*.GetValue()*/;

        string msg = "", addMsg = "";

        if( val > 0 )
        {
            msg = "включено";
            addMsg = " Биогеля хватит на " + charge /*.GetValue()*/ + " операций.";
        }
        else
        {
            msg = "выключено";
        }

        cr.Say( SAY_NETMSG, "Сейчас " + msg + "." + addMsg );
    }

    return true;
}

bool _DocOnMe( Item& item, Critter& cr, Item@ usedItem )
{
    if( usedItem is null || usedItem.GetProtoId() != PID_BIO_GEL )
        return false;

    // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);
    // GameVar @ charge = GetLocalVar(LIVAR_Object_DocCharge, item.Id);

    // if(powerOn is null || charge is null) return false;

    uint8 powerOn = item.Val1;
    uint8 charge = item.Val3;

    if( charge == 0 )
    {
        // charge.opAssign(100);

        item.Val3 = 100;
        _SubItem( usedItem, 1 );

        cr.Say( SAY_NETMSG, "Вы залили биогель в резервуар." );
    }
    else
    {
        cr.Say( SAY_NETMSG, "Биогель пока не требуется." );
    }

    return true;
}

void DocHeal( Critter& cr )
{
    for( uint16 i = DAMAGE_BEGIN; i < DAMAGE_END; ++i )
    {
        cr.ParamBase[ i ] = 0;
    }

    DropBleed( cr );
    DropToxic( cr );

    cr.StatBase[ ST_CRSTATUS ] = 0;

    cr.StatBase[ ST_CURRENT_HP ] =  cr.StatBase[ ST_MAX_LIFE ] + cr.StatBase[ ST_STRENGTH ] * 4 + cr.StatBase[ ST_ENDURANCE ] * 8;
}

#include "_colors.fos"

void LightInit( Item& item, bool firstTime )
{
    // item.SetEvent(ITEM_EVENT_SKILL, "_WaterPumpSkill");
    item.SetEvent( ITEM_EVENT_SKILL, "_LightSkill" );

    // item.LightDistance = 6;
    // item.LightColor = COLOR_DRED;
    // item.LightIntensity = 100;

    // SETFLAG(item.Flags, ITEM_COLORIZE);
    // SETFLAG(item.Flags, ITEM_ALWAYS_VIEW);
    // SETFLAG(item.Flags, ITEM_LIGHT);

    string picName = "art\\scenery\\whitePXL.frm";

    uint   hash = GetStrHash( picName );
    item.SetMapPic( hash );

    item.LightColor = 9999666;
    item.LightDistance = 6;

    item.LightIntensity = ( item.Val1 > 1 ? 0 : 100 );

    item.Update();
    // item.SetEvent(ITEM_EVENT_USE_ON_ME, "_DocOnMe");
}

bool _LightSkill( Item& item, Critter& cr, int skill )
{
    return true;
}

// void Air

void ReduseEnergy()
{
    Map @ map = GetMapByPid( MAP_SATTER_CENTER_DN, 0 );
    if( map is null )
        return;

    Item@[] watts;

    map.GetItems( PID_OBJECT_WATTS, watts );

    if( watts.length() > 0 )
    {

        Item @ item = watts[ 0 ];
        // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, watts[0].Id);
        // GameVar @ power = GetLocalVar(LIVAR_Object_Energy, watts[0].Id);

        // if(switcher is null || power is null) return;

        // power.opSub(1);

        uint8 switcher = item.Val2;
        uint8 power = item.Val3;

        if( switcher > 0 )
        {
            if( power /*.GetValue()*/ > 0 )
            {
                // switcher.opAddAssign(0);

                power--;
                item.Val3 = power;
            }
            else
            {
                WattsRelease( 0 );
            }
        }
    }
}

void ObjectTimeLoop()
{
    for( uint8 i = 0; i < mapPids.length(); ++i )
    {
        Map @ map = GetMapByPid( mapPids[ i ], 0 );
        if( map is null )
            continue;

        Item@[] water;
        Item@[] air;

        map.GetItems( PID_OBJECT_WATERPUMP, water );
        map.GetItems( PID_OBJECT_AIRLOCK, air );
        uint8 airLen = air.length();
        uint8 airMod = 100 / ( airLen > 0 ? airLen : 1 );
        uint8 airPer = 0;

        for( uint8 ii = 0, jj = air.length(); ii < jj; ++ii )
        {
            Item @ item = air[ ii ];

            if( item is null )
                continue;

            // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);

            // if(switcher is null) continue;

            uint8 switcher = item.Val2;

            if( switcher /*.GetValue()*/ > 0 )
            {
                airPer += airMod;
            }
        }

        GameVar @ dyspnea = GetLocalVar( LMVAR_Dyspnea, map.Id );
        if( !(dyspnea is null) )
        {
            if( airPer < 70 )
            {
                dyspnea.opAddAssign( 25 );
                map.SetData( DATA_DYSPNEA, 1 );
            }
            else
            {
                dyspnea.opSub( 20 );
                map.SetData( DATA_DYSPNEA, 0 );
            }
        }

        for( uint8 ii = 0, jj = water.length(); ii < jj; ++ii )
        {
            Item @ item = water[ ii ];

            if( item is null )
                continue;

            // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
            // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);
            // GameVar @ water = GetLocalVar(LIVAR_Object_Water, item.Id);

            // if(switcher is null || water is null || powerOn is null) continue;

            uint8 powerOn = item.Val1;
            uint8 switcher = item.Val2;
            uint8 water = item.Val3;

            if( powerOn /*.GetValue()*/ > 0 )
            {
                // water.opAddAssign(1);
                water++;
                water = CLAMP( water, 0, 100 );
                item.Val3 = water;
            }
            // switcher.GetValue(1);
        }
    }
}

void ProccessAir() {}

void ShowLight( Critter& cr, int x, int, int )
{
    Item@[] item;
    Map @ map = cr.GetMap();

    if( map is null )
        return;

    map.GetItems( PID_OBJECT_LIGHT, item );

    for( uint16 i = 0, j = item.length(); i < j; ++i )
    {
        string picName = "art\\scenery\\";

        if( x > 0 )
        {
            picName += "grid_wall.frm";
        }
        else
        {
            picName += "whitePXL.frm";
        }

        uint hash = GetStrHash( picName );
        item[ i ].SetMapPic( hash );

        cr.Say( SAY_NETMSG, "flag " + item[ i ].Flags );
    }

}
/*
   void DyspneaTimeLoop(){
        for(uint8 i = 0; i < mapPids.length(); ++i){
                Map @ map = GetMapByPid(mapPids[i], 0);
                if(map is null) continue;

                Critter@[] crs;
                if(map.GetCritters(0, FIND_LIFE|FIND_ONLY_PLAYERS, crs) > 0){
                        for(uint8 ii = 0, jj = crs.length(); ++ii){

                        }
                }
        }
   }*/
/* val1 - powerOn
 * val2 - switcher
 * val3 - (power, water, charge)*/


void debugOnOff(Critter& cr, int val, int, int){
	/*Map @ map = cr.GetMap();
	
	if(map is null) return;
	
	Item@[] items;
	map.GetItems(PID_OBJECT_WATTS, items);
	
	for(uint8 i = 0, j = items.length(); i < j; ++i){
		items[i].Val1 = 1;
		if(items[i].Val3 <= 0){
			items[i].Val3 = 4;
		}
	}*/
	
	for( uint8 i = 0; i < mapPids.length(); ++i )
	{
        Map @ map = GetMapByPid( mapPids[ i ], 0 );
        if( map is null )
            continue;
	
	map.SetData(DATA_POWER, val); 		//for elevators

        Item@[] water;
        Item@[] air;
        Item@[] doc;
        Item@[] door;

        map.GetItems( PID_OBJECT_WATERPUMP, water );
        map.GetItems( PID_OBJECT_AIRLOCK, air );
        map.GetItems( PID_OBJECT_DOC, doc );

        map.GetItemsByType( ITEM_TYPE_DOOR, door );

        for( uint8 ii = 0, jj = water.length(); ii < jj; ++ii )
        {
            Item @ item = water[ ii ];

            if( item is null )
                continue;

            // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
            // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

            // if(switcher is null || powerOn is null) continue;

            item.Val1 = val;
            item.Val2 = val;

        }

        for( uint8 ii = 0, jj = air.length(); ii < jj; ++ii )
        {
            Item @ item = air[ ii ];

            if( item is null )
                continue;

            //	GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
            //	GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

            //	if(switcher is null || powerOn is null) continue;

            item.Val1 = val;
            item.Val2 = val;
        }

        for( uint8 ii = 0, jj = doc.length(); ii < jj; ++ii )
        {
            Item @ item = doc[ ii ];

            if( item is null )
                continue;

            // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
            // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

            // if(switcher is null || powerOn is null) continue;

            item.Val1 = val;
	    item.Val2 = val;

        }

        for( uint8 ii = 0, jj = door.length(); ii < jj; ++ii )
        {
            Item @ item = door[ ii ];

            if( item is null )
                continue;

            if( IsDoorAutomatic( item.GetProtoId() ) )
            {
                item.Val6 = val;
            }
        }

    }

    for( uint8 i = 0, j = mapLight.length(); i < j; ++i )
    {
        Map @ map = GetMapByPid( mapLight[ i ], 0 );
        if( map is null )
            continue;

        Item@[] light;

        map.GetItems( PID_OBJECT_LIGHT, light );

        for( uint8 ii = 0, jj = light.length(); ii < jj; ++ii )
        {
            Item @ item = light[ ii ];

            if( item is null )
                continue;

            // if(IsDoorAutomatic(item.GetProtoId())){

            item.Val1 = val;
	    
            item.LightIntensity = (val > 0 ? 100 : 0);

            item.Update();
        }
    }
	
	
}

void debugDyspnea(Critter& cr, int val, int, int){
	Map @ map = cr.GetMap();
	if(map is null) return;
	
	GameVar @ dyspnea = GetLocalVar( LMVAR_Dyspnea, map.Id );
        if(dyspnea is null) return;
	
	dyspnea.opAssign(CLAMP(val, 0, 100));
	map.SetData(DATA_DYSPNEA, CLAMP(val, 0, 1));
	
	
	return;
}