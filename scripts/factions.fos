# include "_macros.fos"
# define __MODULE_Fractions__
# include "Fractions.fosh"

import uint GetAllPlayers( Critter@[]& crs ) from "manager";

dictionary Library;
array<Fraction@> List = {};

class Manager
{

}

void RestartFactions( )
{
	Critter@[] crs;
    GetAllPlayers( crs );
    
	for( uint i = 0, iEnd = GetAllPlayers( crs ); i < iEnd; i++ )
        CheckFaction( crs[ i ], true );
}

void RestartFactions( Critter& cr, int p0, int p1, int p2 )
{
    RestartFactions( );
}

bool FactionInGame( Critter& player, Critter@ npc, int faction, int number )
{
	Log( "Use delete stuff" );
    return false;
}

void DrugsALARM( Critter& player, Critter@ npc, int chance )
{
    Log( "Use delete stuff" );
}

void PackageAlarm( Critter& player, int destination )
{
    Log( "Use delete stuff" );
}

void CheckFaction( Critter& cr, bool join )
{
    Log( "Use delete stuff" );
}

int GetCritterColor( uint , Critter& fromCr, Critter& toCr )
{
	Fraction@ fromf=Get(fromCr.Stat[ST_FACTION]);
	if( @fromf != null )
	{
		for( uint n = 0, nMax = fromf.ColorList.length( ); n < nMax; n += 2 )
		{
			Log( "" + fromf.ColorList[ n ] + " " + n + " " + nMax );
            if( fromf.ColorList[ n ] == fromf.Id )
			{
				return int( fromf.ColorList[ n + 1 ] );		
			}
		}
	}	
	return 0;
}

uint GetId(string& name)
{
	if(!Library.exists(name)) return 0;
	return GetStrHash( name );
}

array<string@> GetList(uint exclude)
{
	array<string@> list;
	for( uint n=0, nMax=List.length(); n<nMax; n++ )
	{
		if(List[n].Id!=exclude)
			list.insertLast(@List[n].Name);
	}
	return list;
}

array<string@> GetList()
{
	array<string@> list = {};
	Library.keys(list);
	return list;
}

array<string@> GetUnrelatedOrgList(uint id)
{
	array<string@> list;
	Fraction@ fr=Get(id);
	if(!valid(fr)) return list;
	uint enemyLength=fr.Enemies.length(),
		 friendsLength= fr.Allies.length();
	for(uint n=0, nMax=List.length(); n<nMax; n++)
	{
		if(id==List[n].Id) continue;
		bool skip=false;
		for(uint m=0; m<FR_MAX_REQUESTS; m++)
		{
			if(fr.Requests[m]==List[n].Id)
			{
				skip=true;
				break;
			}
		}
		if(skip) continue;
		for(uint m=0; m<enemyLength; m++)
		{
			if(fr.Enemies[m]==List[n].Id)
			{
				skip=true;
				break;
			}
		}
		if(skip) continue;
		for(uint m=0; m<friendsLength; m++)
		{
			if(fr.Allies[m]==List[n].Id)
			{
				skip=true;
				break;
			}
		}
		if(skip) continue;
		list.insertLast(@List[n].Name);
	}
	return list;
}

Fraction@ Get(uint id)
{
	for(uint n=0; n<List.length(); n++)
	{
		if(List[n].Id==id) return @List[n];
	}
	return null;
}

Fraction@ Get(string& name)
{
	for(uint n=0; n<List.length(); n++)
	{
		if(List[n].Name==name) return List[n];
	}
	return null;
}

string@ GetName(uint id)
{
	Fraction@ fr=Get(id);
	if(!valid(fr)) return "";
	return fr.Name;
}

bool Exist( string& name) { return Library.exists(name); }

bool SaveFractions()
{
	filesystem fs;
	file f;
	fs.deleteFile(".\\save\\fractions.bak");
	fs.move(".\\save\\fractions.fo", ".\\save\\fractions.bak");
	if(f.open("./save/fractions.fo", "w")!=0) return false;
	for(uint n=0; n<List.length(); n++)
		List[n].Serialize(f);
	f.close();
	return true;
}

void CorruptFaction( Critter& admin, int, int, int)
{
	Fraction@ fraction=Get(admin.Stat[ST_FACTION]);
	fraction.Stats.resize(1);
}

void ReloadFactions( Critter& admin, int, int, int)
{
	LoadFractions();
}

string@ LoadFile(string@ fileName)
{
	file f;
	if(f.open(fileName, "r") != -1)
	{
		string txt = "";
		f.readString( f.getSize(), txt); 
		f.close();
		return @txt;
	}
	Log("Error loading factions! Can't open file.");
	return null;
}

void LoadFractions()
{
	uint start=GetTick();
	List.resize(0);
	Library.deleteAll();
	string@ txt = LoadFile("./save/fractions.fo" );
	if( txt is null ) return;
	LoadFractions( txt );
	Log("Loaded "+List.length()+" fractions in "+(GetTick()-start)+" miliseconds.");
}

void AddFraction( string& name, uint leaderId)
{
	Critter@ player=GetCritter(leaderId);
	if(validEngineObject(player))
	{
		player.StatBase[ST_FACTION]=GetStrHash( name );
		player.StatBase[ST_FR_LEADERSHIP]=2;
		player.RunClientScript("client_fraction_gui@__Scr_ReInit", leaderId,2,0,null,null);
	}
	else return;
	Fraction fraction(name);
	List.insertLast(@fraction);
	fraction.AddPlayer( leaderId );
	fraction.InitProccess = false;
	fraction.Stats[FR_POPULATION]++;
	Library.set(name, leaderId);
}

void DeleteFraction(uint id)
{
	Fraction@ fraction = Get(id);
	if( fraction is null ) return;
	Library.delete( fraction.Name );
	fraction.Delete();
	uint index=0;
	int m = 0;
	for(uint n=0, nMax=List.length(); n<nMax; n++)
	{
		@fraction = List[n];
		if(fraction.Id==id)
		{
			index=n;
			continue;
		}
		m = fraction.Enemies.find( id );
		if( m != -1 )
			fraction.Enemies.removeAt( m );
		m = fraction.Allies.find( id );
		if( m != -1 )
			fraction.Allies.removeAt( m );
		m = fraction.Requests.find( id );
		if( m != -1 )
			fraction.Requests.removeAt( m );
	}
	List.removeAt(index);
}

void SortFractions(uint low, uint high) //TabaK. QuickSort
{
	uint i=low;
	uint j=high;
	Fraction middle=List[(low+high)/2];
	while(i<j)
	{
		while(List[i].Stats[FR_RATING]>middle.Stats[FR_RATING] && i<high)
		{
		//	Log(List[i].Stats[FR_RATING]+">"+middle.Stats[FR_RATING]+"; i="+i+". Increasing");
			i++;
		}
		while(List[j].Stats[FR_RATING]<middle.Stats[FR_RATING] && j>low)
		{
		//	Log(List[j].Stats[FR_RATING]+"<"+middle.Stats[FR_RATING]+"; j="+j+". Decreasing");
			j--;
		}
		if(i<=j)
		{
			Fraction temp=List[j];
			List[j]=List[i];
			List[i]=temp;
			if(i!=high) i++;
			if(j!=low) j--;
		}
		else break;
	}
	if(low < j) SortFractions(low, j);
    if(i < high) SortFractions(i, high);
}

array<uint>@ GetPlayersByFraction(uint orgId)
{
	array<uint> retArr;
	Fraction@ fraction = Get(orgId);
	if( fraction is null ) retArr;
	retArr=fraction.GetPlayers( );
	retArr.insertLast(orgId);
	return retArr;
}

uint e_FractionOrder_Update(array<uint>@ values)
{
	uint lng=List.length();
	if(lng<2) return REAL_MINUTE(30);
	else if(lng==2)
	{
		if(List[1].Stats[FR_RATING]>List[0].Stats[FR_RATING]) List.reverse();
		return REAL_MINUTE(30);
	}
	SortFractions(0, lng-1);
	return REAL_MINUTE(30);
}

uint e_DeleteFraction(array<uint>@ values)
{
	DeleteFraction(values[0]);
	return 0;
}

bool IdentifyPlayerFraction(Critter& critter )
{
	Fraction @fraction = Get(critter.Stat[ST_FACTION]);
	if( fraction is null )
	{
		Dismiss( critter.Id );
		return false;
	}
	if( fraction.CheckCritter( critter.Id ) )
		return true;
	fraction.Dismiss(critter.Id);
	return false;
}

void DrapRatingsAll()
{
	for( uint n = 0, nEnd = List.length(); n < nEnd; n++ )
		List[n].Stats[FR_RATING]=0;
}

bool AddFactionRating(int index, int val)
{
	Fraction@ fraction = Get( index );
	if( fraction is null ) return false;
	fraction.Stats[FR_RATING] += val;
	return true;
}

string@ clearstr( string&in str )
{
	uint len = str.length();
	while( 0 != len )
	{
		if( str[0] != ' ' )
			break;
		str = substring( str, 1, --len );
	}
	return str;
}

void LoadFractions( string@ txt )
{
	string@[] lines = splitEx( txt, "\n" );
	string@ currentLine = null;
	string@[]@ data = null, check = null;
	Fraction @fraction = null;
	int tempi = -1;
	uint tempu = 0, countLine = lines.length();
	string@ name = null;
	for( uint i = 0; i < countLine; i++ )
	{
		@currentLine = lines[i];
		if( currentLine is null || currentLine.length() == 0  )
			continue;
		if( currentLine[0] == '#' )
			continue;
		
		@data = splitEx( currentLine, "#" );
		if( data.length() > 1 )
			@currentLine = data[0];
		data = splitEx( currentLine, "=" );
		if( data.length() == 2 )
		{
			if( data[0] == "Fraction" )
			{
				if( fraction !is null )
				{
					Library.set( fraction.Name, fraction );
					List.insertLast(fraction);
					fraction.InitProccess = false;
				}
				@fraction = Fraction( clearstr( data[1] ) );
			}
			else if( data[0] == "Players" )
			{
				@check = splitEx( data[1], " " );
				tempu = check.length();
				for( uint i = 0; i < tempu; i++ )
				{
					if( StrToInt( check[i], tempi ) )
						fraction.AddPlayer( tempi );
					else fraction.AddPlayer( GetStrHash( check[i] ) );
				}
			}
			else if( data[0] == "Requests" )
			{
				@check = splitEx( data[1], " " );
				tempu = check.length();
				for( uint i = 0; i < tempu; i++ )
				{
					StrToInt( check[i], tempi );
					fraction.Requests[i] = tempi;
				}
			}
			else if( data[0] == "Stats" )
			{
				@check = splitEx( data[1], " " );
				tempu = check.length();
				for( uint i = 0; i < tempu; i++ )
				{
					StrToInt( check[i], tempi );
					fraction.Stats[i] = tempi;
				}
			}
			else if( data[0] == "Allies" )
			{
				@check = splitEx( data[1], " " );
				tempu = check.length();
				fraction.Allies.resize( tempu );
				for( uint i = 0; i < tempu; i++ )
				{
					if( StrToInt( check[i], tempi ) )
						fraction.Allies[i] = tempi;
					else fraction.Allies[i] = GetStrHash( check[i] );
				}
			}
			else if( data[0] == "Enemies" )
			{
				@check = splitEx( data[1], " " );
				tempu = check.length();
				fraction.Enemies.resize( tempu );
				for( uint i = 0; i < tempu; i++ )
				{
					if( StrToInt( check[i], tempi ) )
						fraction.Enemies[i] = tempi;
					else fraction.Enemies[i] = GetStrHash( check[i] );
				}
			}
			else if( data[0] == "KnownLocs" )
			{
				@check = splitEx( data[1], " " );
				tempu = check.length();
				fraction.KnownLocs.resize( tempu );
				for( uint i = 0; i < tempu; i++ )
				{
					if( StrToInt( check[i], tempi ) )
						fraction.KnownLocs[i] = tempi;
					else fraction.KnownLocs[i] = GetStrHash( check[i] );
				}
			}
			else if( data[0] == "IsNpc" )
			{
				fraction.IsNpc = clearstr( data[1] ) == "true";
			}
			else if( data[0] == "ColorList" )
			{
				@check = splitEx( data[1], " " );
				tempu = check.length();
				fraction.ColorList.resize( tempu );
				for( uint i = 0; i < tempu; i++ )
				{
					StrToInt( check[i], tempi );
					fraction.ColorList[i] = tempi;
				}
			}
			else if( substring( data[0], 0, 13 ) == "GameVariable_" )
			{
				StrToInt( data[1], tempi );
				fraction.InitVariable( data[0], tempi );
			}
		}
	}
	if( fraction !is null )
	{
		Library.set( fraction.Name, fraction );
		List.insertLast(fraction);
		fraction.InitProccess = false;
	}
}


void NpcFractionGeneration( )
{
	const string ex_fraction_files = "fofraction";
	filesystem fs;
	fs.changeCurrentPath( fs.getCurrentPath() + "/data/NpcFractions/" );
	//GetFolderFiles( "./data/NpcFractions/" + "*.fofraction", code );
	string@[] files = fs.getFiles();
	string code = "";
	for( uint i = 0, iEnd = files.length(); i < iEnd; i++ )
	{
		if( files[i].length() > ex_fraction_files.length() && substring( files[i], files[i].length() - ex_fraction_files.length(), ex_fraction_files.length() ) == ex_fraction_files ) //.fofraction
			code += LoadFile( "./data/NpcFractions/" + files[i] ); 
	}
	LoadFractions( code );
}

