

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

import bool IsHuman(Critter&cr)from"races";
import bool IsMutant(Critter&cr)from"races";
import bool IsGhoul(Critter&cr)from"races";
import void ApplyGhoul(Critter&cr)from"morphes";           

const int[]RadiationEffects=
{
	1,100,200,400,600,1000,
	(0),0,0,0,2,4,6,
	(1),0,0,1,0,3,5,
	(2),0,0,0,1,3,5,
	(3),0,0,0,0,3,5,
	(4),0,0,0,0,1,3,
	(5),0,0,1,2,5,6,
	(72),0,1,3,5,15,20,
	(13),0,0,0,5,10,10,
};      

void AffectRadiation(Critter&cr,int value)
{
	int body=cr.Stat[(112)];
	if(cr.IsDead())
	return;
	
	if(cr.Stat[(67)]==(10)||cr.Stat[(67)]==(16))
	return;
	
	if(IsGhoul(cr)||IsMutant(cr)||cr.Perk[(420)]>0)
	{
		cr.SayMsg((11),(3),Random(12961,12964));
		return;
	}
	
	uint[]indexes;
	uint[]rates;
	bool isActive=cr.GetTimeEvents((2),indexes,null,rates)!=0;
	int levelVal=cr.Stat[(74)];
	int resistVal=cr.Stat[(30)];
	
	if(value>=0)
	value-=value*resistVal/100;
	cr.StatBase[(74)]=(((levelVal+value)>(2000))?(2000):(((levelVal+value)<(0))?(0):(levelVal+value)));
	levelVal=cr.Stat[(74)];
	
	if(cr.Stat[(74)]>450&&(body==0||body==(11)||body==(106)))
	{
		int crType=cr.CrType;
		cr.StatBase[(112)]=(116);
		if(crType==(107))
		crType=(117);
		else if(crType==(108))
		crType=(118);
		else if(crType==(109))
		crType=(119);
		else if(crType==(12))
		crType=(117);
		else if(crType==(13))
		crType=(118);
		else if(crType==(14))
		crType=(119);
		cr.ChangeCrType(crType);
	}
	
	if(value>(66))
	cr.SayMsg((11),(3),(12807));
	
	if(levelVal>=(66))
	{
		if(cr.Damage[(501)]==0)
		cr.DamageBase[(501)]=1;
	}
	else
	{
		if(cr.Damage[(501)]!=0)
		cr.DamageBase[(501)]=0;
	}
	
	if(isActive)
	{
		uint stage=rates[0];
		uint newStage=GetRadiationStage(levelVal);
		if(stage!=newStage)
		cr.ChangeTimeEvent(indexes[0],0,stage);
	}
	else
	{
		int stage1Val=RadiationEffects[(1)-1];
		if(levelVal>=stage1Val)
		cr.AddTimeEvent("cte_Radiation",0,(2));
	}
	
	if(levelVal>=(1800))
	{
		cr.ToDead((116),null);
		cr.SayMsg((11),(3),(12806));
	}
}

void DropRadiation(Critter&cr)
{
	bool isActive=cr.GetTimeEvents((2),null,null,null)!=0;
	if(isActive)
	{
		uint stage=GetRadiationStage(cr.Stat[(74)]);
		ChangeStage(cr,stage,false);
		cr.EraseTimeEvents((2));
	}
	cr.StatBase[(74)]=0;
	if(cr.Damage[(501)]!=0)
	cr.DamageBase[(501)]=0;
}

uint cte_Radiation(Critter&cr,int identifier,uint&stage)
{
	int body=cr.Stat[(112)];
	if(cr.IsDead())
	return((5)*__TimeMultiplier*60);
	if(cr.Stat[(74)]>450&&(body==0||body==(11)||body==(106)))
	{
		int crType=cr.CrType;
		cr.StatBase[(112)]=(116);
		if(crType==(107))
		crType=(117);
		else if(crType==(108))
		crType=(118);
		else if(crType==(109))
		crType=(119);
		else if(crType==(12))
		crType=(117);
		else if(crType==(13))
		crType=(118);
		else if(crType==(14))
		crType=(119);
		cr.ChangeCrType(crType);
	}
	if(cr.Stat[(74)]>800&&cr.Stat[(74)]<1000&&IsHuman(cr))
	{
		if((cr.Stat[(183)]!=0||Random(0,100)>40)||Random(0,100)>80)
		{
			ApplyGhoul(cr);
			return 0;
		}
	}
	
	uint newStage=GetRadiationStage(cr.Stat[(74)]);
	uint duration=(10080*60);
	
	if(stage!=newStage)
	{
		ChangeStage(cr,stage,false);
		ChangeStage(cr,newStage,true);
		stage=newStage;
	}
	else
	{
		ChangeStage(cr,stage,false);
		duration=0;
	}
	return duration;
}

uint GetRadiationStage(int level)
{
	for(uint i=0,j=(6);i<=j;i++)
	{
		int valMin=(i>0?RadiationEffects[(i)-1]:0);
		int valMax=(i<j?RadiationEffects[(i+1)-1]:level+1);
		if(level>=valMin&&level<valMax)
		return i;
	}
	return 0;
}

void ChangeStage(Critter&cr,uint stage,bool gain)
{
	if(stage==0)
	return;
	if(gain)
	cr.SayMsg((11),(3),(12799+(stage)));
	
	for(uint i=0,j=(8);i<j;i++)
	{
		uint statIndex=RadiationEffects[6+(i)*7];
		int statAmount=RadiationEffects[6+(i)*7+(stage)];
		
		if(statAmount!=0)
		{
			int curVal=cr.Stat[statIndex];
			
			if(gain)
			{
				statAmount=-statAmount;
				if(statIndex<(32))
				cr.StatBase[(32)+statIndex]+=statAmount;
				else if(statIndex==(72))
				{
					cr.StatBase[(72)]+=statAmount;
					if(cr.Stat[(72)]<=0)
					cr.ToDead((116),null);
				}
			}
			else
			{
				if(statIndex<(32))
				cr.StatBase[(32)+statIndex]+=statAmount;
			}    
			
		}
	}
}                                              

