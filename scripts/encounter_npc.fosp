

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import void SetDeterioration(Item&item,int deteriorationProcent)from"repair";     

uint LastDeadId=0;
uint[]CollectedNpcIds;

void _NpcInit(Critter&npc,bool firstTime)
{
	uint bt=npc.Stat[(67)];
	if(bt>=(0)&&bt<=(4))
	{
		npc.SetEvent((18),"_NpcMessage");
		npc.SetEvent((2),"_NpcDead");
		npc.SetEvent((26),"_NpcSmthDead");
		npc.SetEvent((31),"_NpcSmthUseSkill");
		npc.SetEvent((36),"_NpcPlaneEnd");
		npc.SetEvent((17),"_NpcStealing");
		npc.SetEvent((30),"_NpcSmthUseItem");
		npc.SetEvent((32),"_NpcSmthDropItem");
		
		Item@[]items;
		npc.GetItems(-1,items);
		bool favrtAmmoSet=false;
		bool favrtWpnSet=false;
		for(uint i=0,j=items.length();i<j;i++)
		{
			SetDeterioration(items[i],Random(80,95));
			if(items[i].GetType()==(3)&&!favrtWpnSet)
			{
				npc.SetFavoriteItem((1),items[i].GetProtoId());
				favrtWpnSet=true;
			}     
			
		}
	}
}

Critter@GetCritterForLooting(Critter&lootCr)
{
	
	Critter@result=null;
	lootCr.SendMessage((30),0,(0));
	if(CollectedNpcIds.length()>0)
	{
		
		for(uint i=0,j=CollectedNpcIds.length();i<j;i++)
		{
			Critter@cr=GetCritter(CollectedNpcIds[i]);
			if(cr.GetPlanes((30),null)==0)
			{
				@result=cr;
				break;
			}
		} 
		
		if(not(@result!=null))
		@result=GetCritter(CollectedNpcIds[Random(0,CollectedNpcIds.length()-1)]); 
		
		CollectedNpcIds.resize(0);
	}
	return result;
}

void _NpcSmthUseItem(Critter&npc,Critter&fromCr,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(85)||pid==(544)||pid==(222)||pid==(51))
		{
			AddAttackPlane(npc,0,fromCr,__RunOnCombat);
			npc.SendMessage((31),fromCr.Id,(2));
		}
	}
}

void _NpcSmthDropItem(Critter&npc,Critter&fromCr,Item&item)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(209)||pid==(545)||pid==(206))
		{
			AddAttackPlane(npc,0,fromCr,__RunOnCombat);
			npc.SendMessage((31),fromCr.Id,(2));
		}
	}
}

void _NpcMessage(Critter&npc,Critter&fromCr,int message,int value)
{
	if(message==(30))
	{
		if(not npc.IsDead())
		CollectedNpcIds.insertLast(npc.Id);
	}
	else if(message==(31))
	{
		if(fromCr.Stat[(106)]==npc.Stat[(106)]&&npc.IsLife())
		{
			Critter@target=GetCritter(value);
			if((@target!=null))
			AddAttackPlane(npc,0,target,__RunOnCombat);
		}
	}
	else if(message==(32))
	{
		Critter@target=GetCritter(value);
		if((@target!=null))
		AddAttackPlane(npc,0,target,__RunOnCombat);
	}
}

void _NpcDead(Critter&npc,Critter@killer)
{
	NpcPlane@[]planes;
	if(npc.GetPlanes((30),planes)>0)
	{
		Critter@cr=GetCritterForLooting(npc);
		if((@cr!=null))
		{
			
			for(uint i=0,j=planes.length();i<j;i++)
			cr.AddPlane(planes[i]);
		}
	}
}

void _NpcSmthDead(Critter&npc,Critter&fromCrit,Critter@killer)
{
	if(fromCrit.Id!=LastDeadId)
	{
		if(fromCrit.ItemsCount()>0&&(fromCrit.Mode[(511)]==0&&fromCrit.Mode[(523)]==0))
		{
			Critter@cr=GetCritterForLooting(fromCrit);
			if((@cr!=null))
			AddWalkPlane(cr,0,(30),fromCrit.Id,fromCrit.HexX,fromCrit.HexY,6,false,1);
		}
		LastDeadId=fromCrit.Id;
	}
}

void _NpcSmthUseSkill(Critter&npc,Critter&fromCr,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if((skill==(-5)||skill==(210))&&(@onCritter!=null)&&npc.GetPlanes((30),onCritter.Id,null)>0)
	AddAttackPlane(npc,(50)+1,fromCr,__RunOnCombat);
	
}

int _NpcPlaneEnd(Critter&npc,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(plane.Identifier==(30)&&reason==(30))
	{
		Critter@cr=GetCritter(plane.IdentifierExt);
		if((@cr!=null)&&cr.IsDead())
		{
			Item@[]items;
			cr.GetItems((0),items);
			cr.GetItems((1),items);
			cr.GetItems((2),items);
			npc.GetMap().GetItems(cr.HexX,cr.HexY,items);
			
			for(uint i=0,j=items.length();i<j;i++)
			{
				int type=items[i].GetType();
				if(type<(1)||type>(7))
				@items[i]=null;
			}
			
			MoveItems(items,npc);
			npc.Animate(0,(27),null,true,true);
			npc.Wait(__Breaktime);
		}
		return(2);
	}
	return(0);
}

void _NpcStealing(Critter&npc,Critter&thief,bool success,Item&item,uint count)
{
	if(!success)
	{
		AddAttackPlane(npc,0,thief,__RunOnCombat);
		npc.SendMessage((31),thief.Id,(2));
	}
}
