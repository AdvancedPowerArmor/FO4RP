                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}

bool s_Onehanded(Critter&cr,Scenery&onehanded,int skill,Item@item)
{
	if(skill!=(-1)||((@item!=null)&&item.GetProtoId()!=(41)))
	{
		cr.SayMsg((11),(3),(10202));
		return true;
	} 
	
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return true; 
	
	uint bet=(25);
	if((@item!=null))
	{
		
		bet=item.GetCount();
	}
	else
	{
		
		bet=cr.CountItem((41));
		if(bet<(25))
		{
			cr.SayMsg((11),(3),(10202));
			return true;
		}
		if(bet>(25))
		bet=(25);
	} 
	
	if(bet>(75))
	bet=(75); 
	
	if((@map!=null))
	map.SetTextMsg(onehanded.HexX,onehanded.HexY,((uint((0xFF<<24)|(((0x7F)&0xFF)<<16)|(((0x7F)&0xFF)<<8)|((0x7F)&0xFF)))),(0),(2000)); 
	
	if(Random(1,100)>=(80-cr.Skill[(216)]/10))
	{
		cr.AddItem((41),bet);
		cr.Say((11),"+"+bet+"$");
	}
	
	else
	{
		cr.DeleteItem((41),bet);
		cr.Say((11),"-"+bet+"$");
	}
	
	return true;                                                                                   
	
}

bool SlotMachineWork(Critter&cr,Item&onehanded,int skill,Item@item)
{
	if(skill!=(-1)||((@item!=null)&&item.GetProtoId()!=(41)))
	{
		cr.SayMsg((11),(3),(10202));
		return true;
	} 
	
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return true; 
	
	uint bet=(25);
	if((@item!=null))
	{
		
		bet=item.GetCount();
	}
	else
	{
		
		bet=cr.CountItem((41));
		if(bet<(25))
		{
			cr.SayMsg((11),(3),(10202));
			return true;
		}
		if(bet>(25))
		bet=(25);
	} 
	
	if(bet>(75))
	bet=(75); 
	
	if((@map!=null))
	map.SetTextMsg(onehanded.HexX,onehanded.HexY,((uint((0xFF<<24)|(((0x7F)&0xFF)<<16)|(((0x7F)&0xFF)<<8)|((0x7F)&0xFF)))),(0),(2000)); 
	
	if(Random(1,100)>=(80-cr.Skill[(216)]/10))
	{
		cr.AddItem((41),bet);
		cr.Say((11),"+"+bet+"$");
	}
	
	else
	{
		cr.DeleteItem((41),bet);
		cr.Say((11),"-"+bet+"$");
	}
	
	return true;                                                                                 
	
}
