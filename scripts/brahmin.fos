#include "_macros.fos"

void brahminInitSearch (Critter& cr) {
	if (cr.GetTimeEvents ("cte_search_partner", null, null, null) > 0) return;
	cr.AddTimeEvent ("cte_search_partner", 0, CTE_BRAHMIN_SEARCH, 0);
}

void brahminBirth (Map@ map, uint16 hexX, uint16 hexY) {
	Critter@ baby = map.AddNpc (NPC_BRAHMIN_SM, hexX, hexY, Random (0, 5));
	baby.StatBase [ST_GENDER] = (Random (0, 1) == 0) ? GENDER_MALE : GENDER_FEMALE;
}

uint cte_brahmin_pregnancy (Critter& cr, int identifier, uint& rate) {
	if (!cr.IsDead ()) {
		Map@ map = cr.GetMap ();
		brahminBirth (map, cr.HexX, cr.HexY);
	}
	return 0;
}

uint cte_search_partner (Critter& cr, int identifier, uint& rate) {
	if (cr.Stat [ST_GENDER] == GENDER_FEMALE) return 1*__TimeMultiplier;
	Map@ map = cr.GetMap ();
	Critters [] partners;
	rate += 1;
	if (Random (0, 99) < rate) {
		GetCrittersHex (cr.HexX, cr.HexY, 15, FIND_LIFE, partners);
		int plen = partners.length ();
		int i = 0;
		Critter@ closestPartner = null;
		bool foundOne = false;
		int minDistance = 15;
		while (i < plen) {
			bool isPregnant = (partners[i].GetTimeEvents (CTE_BRAHMIN_PREGNANCY, null, null, null) > 0);
			if (partners[i].Stat [ST_BASE_CRTYPE] == 15 && partners[i].Stat [ST_GENDER] == GENDER_FEMALE && !isPregnant) {
				foundOne = true;
				if (GetCrittersDistantion (cr, partners[i]) <= minDistance) {
					minDistance = GetCrittersDistantion (cr, partners[i]);
					closestPartner = partners [i];
				}
			}
			i ++;
		}
		if (valid (closestPartner)) {
			if (GetCrittersDistantion (cr, closestPartner) <= 2) {
				cr.Say (SAY_EMOTE, "Браминий секс");
				closestPartner.Say (SAY_EMOTE, "Браминий секс");
				closestPartner.AddTimeEvent ("cte_brahmin_pregnancy", 1*__TimeMultiplier, CTE_BRAHMIN_PREGNANCY, 0);
				cr.AddTimeEvent ("cte_search_partner", 1*__TimeMultiplier, CTE_BRAHMIN_SEARCH, 0);
				return 0;
			} else {
				cr.SetHomePos (closestPartner.HexX, closestPartner.HexY, Random (0, 5));
				cr.Say (SAY_EMOTE, "Возбужденно мычит");
				return 1*__TimeMultiplier;
			}
		}
	}
	return 1*__TimeMultiplier;
}
