

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

import void PerkUp(Critter&cr,uint perk)from"perks";
import void PerkDown(Critter&cr,uint perk)from"perks";  

import void ChangeCritterSpeed(Critter&cr)from"speed";  

void changedParam_Hp(Critter&cr,uint,int oldValue)
{
	int curHp=cr.StatBase[(72)];
	if(curHp<=0&&cr.IsLife())
	cr.StatBase[(72)]=1;
	if(curHp<__DeadHitPoints&&not cr.IsDead())
	cr.StatBase[(72)]=__DeadHitPoints+1;
	if(curHp>cr.Stat[(7)])
	cr.StatBase[(72)]=cr.Stat[(7)];
}

void changedParam_Experience(Critter&cr,uint,int oldValue)
{
	int exp=cr.StatBase[(76)]-oldValue;
	if(exp>0)
	{
		uint level=cr.Stat[(77)];
		if(level>=__LevelCap&&not __LevelCapAddExperience)
		return;
		
		exp+=exp*(cr.Perk[(351)]*5)/100;
		cr.StatBase[(76)]=oldValue+(exp*cr.StatBase[(124)]);
		
		if(level>=__LevelCap)
		return;
		
		int perkUp=(cr.Trait[(564)]!=0?4:3);
		while(true)
		{
			if(cr.StatBase[(76)]>=NextLevelNeedExp(cr))
			{
				level++;
				cr.StatBase[(77)]++;
				
				cr.StatBase[(78)]+=5+cr.StatBase[(4)]*2;
				if(cr.Trait[(564)]!=0)
				cr.StatBase[(78)]+=5;
				
				cr.StatBase[(78)]+=cr.Perk[(319)]*2;
				if(cr.StatBase[(78)]>99)
				cr.StatBase[(78)]=99;  
				
				if((level%3)==0)
				cr.StatBase[(7)]+=cr.StatBase[(2)];
				
				if((level%perkUp)==0)
				{
					cr.StatBase[(79)]=1;
				}
			}
			else
			break;
		}
	}
}

void changedParam_Perks(Critter&cr,uint perk,int oldValue)
{
	int curValue=cr.Param[perk];
	if(curValue>oldValue)
	for(uint i=0,j=curValue-oldValue;i<j;i++)
	PerkUp(cr,perk);
	else if(curValue<oldValue)
	for(uint i=0,j=oldValue-curValue;i<j;i++)
	PerkDown(cr,perk);
}

void changedParam_Hide(Critter&cr,uint,int oldValue)
{
	cr.RefreshVisible();
}

void changedParam_FastShot(Critter&cr,uint,int oldValue)
{
	
}

int NextLevelNeedExp(Critter&cr)
{
	int level=cr.Stat[(77)];
	return(((level)%2)!=0?(level)*((level)/2+1):(level)*(level)/2+(level)/2)*1000;
}

int getParamDialog_Intellect(Critter@master,Critter@slave,uint index)
{
	if((@master!=null))
	return master.Stat[(4)]+2*master.Perk[(350)];
	return 0;
}

int getParamDialog_Reputation(Critter@master,Critter@slave,uint index)
{
	if((@master!=null))
	{
		if(master.ReputationBase[index]==int(0x80000000))
		master.ReputationBase[index]=0;
		return master.ReputationBase[index];
	}
	return 0;
}                                    

import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId)from"combat";

void changedParam_Hunger(Critter&cr,uint,int oldValue)
{
	cr.StatBase[(128)]=(((cr.StatBase[(128)])>(100))?(100):(((cr.StatBase[(128)])<(0))?(0):(cr.StatBase[(128)])));
	
	if(cr.StatBase[(128)]<=0&&!cr.IsDead())
	{
		InjureCritter(cr,100/cr.Stat[(2)],(1),cr.Dir,0);
	}
}

void changedParam_Thrist(Critter&cr,uint,int oldValue)
{
	cr.StatBase[(127)]=(((cr.StatBase[(127)])>(100))?(100):(((cr.StatBase[(127)])<(0))?(0):(cr.StatBase[(127)])));
	
	if(cr.StatBase[(127)]<=0&&!cr.IsDead())
	{
		InjureCritter(cr,100/cr.Stat[(2)],(1),cr.Dir,0);
	}
}

void changedParam_Dyspnea(Critter&cr,uint,int oldValue)
{
	cr.StatBase[(126)]=(((cr.StatBase[(126)])>(100))?(100):(((cr.StatBase[(126)])<(0))?(0):(cr.StatBase[(126)])));
	
	if(cr.StatBase[(126)]<=5&&!cr.IsDead()&&cr.ParamBase[(420)]==0&&cr.Timeout[(248)]<=((0)*__TimeMultiplier)&&cr.Param[(703)]!=(0)&&(cr.GetAccess()<(2)||cr.Param[(703)]==(4)))
	{
		cr.ToKnockout((((Random(0,1)==1?true:false))?(82):(83)),(((Random(0,1)==1?true:false))?(86):(87)),(((Random(0,1)==1?true:false))?(88):(89)),30,cr.HexX,cr.HexY);
		
		cr.Say((6),"Задыхается");
		cr.Say((11),"Вам нужно срочно убираться отсюда!");
		cr.StatBase[(191)]+=1;
		cr.StatBase[(72)]-=10;
		cr.TimeoutBase[(248)]=__FullSecond+((22)*__TimeMultiplier);
		if(cr.StatBase[(191)]>=30&&cr.StatBase[(126)]<=0)
		{
			cr.StatBase[(191)]=0;
			cr.ToDead(Random(0,1)>0?(102):(103),null);
		}
	}
	else if(cr.StatBase[(126)]>=6&&cr.StatBase[(126)]<=50&&cr.Timeout[(248)]<=((0)*__TimeMultiplier))
	{
		cr.StatBase[(191)]=0;
		cr.Say((6),"Тяжело дышит");
		cr.TimeoutBase[(248)]=__FullSecond+((20)*__TimeMultiplier);
	}
	else if(cr.StatBase[(126)]>=51&&cr.StatBase[(126)]<=99&&cr.Timeout[(248)]<=((0)*__TimeMultiplier))
	{
		cr.StatBase[(191)]=0;
		cr.Say((6),"Кашель");
		cr.TimeoutBase[(248)]=__FullSecond+((20)*__TimeMultiplier);
	}
	
}            

void changedParam_SpeedMod(Critter&cr,uint,int oldValue)
{
	ChangeCritterSpeed(cr);
}                                           

void CritterGenerate(Critter&cr)    

{
	if(cr.ParamBase[(77)]<=0)
	cr.ParamBase[(77)]=1;
	
	if(cr.ParamBase[(552)]!=0)
	cr.ParamBase[(5)]+=1;
	if(cr.ParamBase[(551)]!=0)
	cr.ParamBase[(0)]+=2;
	if(cr.ParamBase[(560)]!=0)
	{
		cr.ParamBase[(206)]+=15;
		cr.ParamBase[(207)]+=15;
		cr.ParamBase[(214)]+=15;
		cr.ParamBase[(215)]+=15;
		cr.ParamBase[(200)]-=10;
		cr.ParamBase[(201)]-=10;
		cr.ParamBase[(202)]-=10;
		cr.ParamBase[(203)]-=10;
		cr.ParamBase[(204)]-=10;
		cr.ParamBase[(205)]-=10;
	}     
	
	cr.ParamBase[(200)]+=5+4*cr.ParamBase[(5)];
	cr.ParamBase[(201)]+=0+2*cr.ParamBase[(5)];
	cr.ParamBase[(202)]+=0+2*cr.ParamBase[(5)];
	cr.ParamBase[(203)]+=30+2*(cr.ParamBase[(5)]+cr.ParamBase[(0)]);
	cr.ParamBase[(204)]+=20+2*(cr.ParamBase[(5)]+cr.ParamBase[(0)]);
	cr.ParamBase[(205)]+=0+4*cr.ParamBase[(5)];
	cr.ParamBase[(206)]+=0+2*(cr.ParamBase[(1)]+cr.ParamBase[(4)]);
	cr.ParamBase[(207)]+=5+cr.ParamBase[(1)]+cr.ParamBase[(4)];
	cr.ParamBase[(208)]+=5+3*cr.ParamBase[(5)];
	cr.ParamBase[(209)]+=10+cr.ParamBase[(1)]+cr.ParamBase[(5)];
	cr.ParamBase[(210)]+=0+3*cr.ParamBase[(5)];
	cr.ParamBase[(211)]+=10+cr.ParamBase[(1)]+cr.ParamBase[(5)];
	cr.ParamBase[(212)]+=0+4*cr.ParamBase[(4)];
	cr.ParamBase[(213)]+=0+3*cr.ParamBase[(4)];
	cr.ParamBase[(214)]+=0+5*cr.ParamBase[(3)];
	cr.ParamBase[(215)]+=0+4*cr.ParamBase[(3)];
	cr.ParamBase[(216)]+=0+5*cr.ParamBase[(6)];
	cr.ParamBase[(217)]+=0+2*(cr.ParamBase[(2)]+cr.ParamBase[(4)]);
	
	if(cr.ParamBase[(226)]!=0)
	cr.ParamBase[cr.ParamBase[(226)]]+=30;
	if(cr.ParamBase[(227)]!=0)
	cr.ParamBase[cr.ParamBase[(227)]]+=30;
	if(cr.ParamBase[(228)]!=0)
	cr.ParamBase[cr.ParamBase[(228)]]+=30;
	
	if(cr.ParamBase[(550)]!=0)
	{
		cr.ParamBase[(30)]-=cr.ParamBase[(2)]*2;
		cr.ParamBase[(31)]-=cr.ParamBase[(2)]*5;
		cr.ParamBase[(13)]+=2;
	}
	if(cr.ParamBase[(551)]!=0)
	cr.ParamBase[(8)]-=2;
	if(cr.ParamBase[(555)]!=0)
	{
		cr.ParamBase[(9)]-=cr.ParamBase[(5)];
		cr.ParamBase[(12)]+=5;
	}
	if(cr.ParamBase[(556)]!=0)
	cr.ParamBase[(10)]+=4;
	if(cr.ParamBase[(554)]!=0)
	cr.ParamBase[(14)]+=10;
	if(cr.ParamBase[(556)]!=0)
	cr.ParamBase[(15)]-=30;                    
	
	cr.ParamBase[(8)]+=5;
	cr.ParamBase[(72)]=cr.ParamBase[(7)];
	cr.ParamBase[(75)]=cr.ParamBase[(8)]*100;
	cr.ParamBase[(124)]=1;
	
	cr.ParamBase[(128)]=100;
	cr.ParamBase[(127)]=100;
	cr.ParamBase[(126)]=100;
	cr.ParamBase[(120)]=100;
	cr.ParamBase[(194)]=60+cr.ParamBase[(4)]*5+cr.ParamBase[(3)]*2;
}                                                               

void NpcProcessLevel(Critter&npc)
{
	for(int i=0,j=npc.Stat[(77)];i<j;i++)
	{ 
		
	}
}

