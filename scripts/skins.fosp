

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

import void ChangeCritterSpeed(Critter&cr)from"speed";  

class Starter{
	Starter(string&module,string&func)
	{
		AddStartCallback(module,func);
	}
}  

Starter starter("skins","start");;

void start()
{
	skins_setup_load(0);
}

bool[]skins_toggled;

void skins_setup_start(Critter&player,int param0,int param1,int param2)
{
	skins_toggled.resize(1);
	skins_toggled[0]=false;
	player.ParamBase[(90)]=1;
	ask_next_setup(player);
}

void skins_setup_continue(Critter&player,int param0,int param1,int param2)
{
	if(player.ParamBase[(90)]<1)
	return;
	ask_next_setup(player);
}

void skins_setup_save(Critter&player,int fileIndex,int param1,int param2)
{
	string result="";
	for(uint i=0;i<skins_toggled.length();i++)
	{
		result+=((skins_toggled[i])?"1":"0");
	}
	if(result.length()<1)
	return;
	
	file skins_file;
	skins_file.open("skins_cfg_"+fileIndex+".txt","w");
	
	skins_file.setPos(0);
	
	skins_file.writeString(result);
	
	skins_file.close();
}

void skins_setup_load(Critter&player,int fileIndex,int param1,int param2)
{
	skins_setup_load(uint(fileIndex));
}

void skins_setup_load(uint fileIndex)
{
	file skins_file;
	skins_file.open("skins_cfg_"+fileIndex+".txt","r");
	
	skins_file.setPos(0);
	
	string result="";
	
	skins_file.readLine(result);
	
	if(result.length()<1)
	return;
	
	skins_toggled.resize(0);
	
	for(uint i=0;i<result.length();i++)
	{
		bool bb=((result[i]==49)?true:false);
		
		skins_toggled.insertLast(bb);
	}
	
	skins_file.close();
}

void skins_setup_list(Critter&player,int fileIndex,int param1,int param2)
{
	for(uint i=0;i<skins_toggled.length();i++)
	{
		if(!skins_toggled[i])
		continue;
		player.Say((11),"Skin #"+i+" enabled.");
	}
}

void skins_setup_getn(Critter&player,int ni,int param1,int param2)
{
	uint n=ni;
	uint oldlen=skins_toggled.length();
	if(n>=oldlen)
	{
		if(n>=(114))
		{
			player.Say((11),"Номер скина больше максимально возможного.");
			return;
		}
		
		skins_toggled.resize(n+1);
		for(uint i=oldlen;i<n+1;i++)
		{
			skins_toggled[i]=false;
		}
	}
	
	player.Say((11),"Skin #"+n+((skins_toggled[n])?" enabled.":" disabled."));
}

void skins_setup_setn(Critter&player,int ni,int val,int param2)
{
	uint n=ni;
	uint oldlen=skins_toggled.length();
	if(n>=oldlen)
	{
		if(n>=(114))
		{
			player.Say((11),"Номер скина больше максимально возможного.");
			return;
		}
		
		skins_toggled.resize(n+1);
		for(uint i=oldlen;i<n+1;i++)
		{
			skins_toggled[i]=false;
		}
	}
	
	skins_toggled[n]=((val==0)?false:true);
	
	player.Say((11),"Skin #"+n+((skins_toggled[n])?" enabled.":" disabled."));
}

void ask_next_setup(Critter@player)
{
	if(!(@player!=null)||!player.IsLife()||player.Param[(90)]<1||player.Param[(90)]>=(114))
	return;
	player.ChangeCrType(player.Param[(90)]);
	
	player.ShowScreen((2),2,"answer_next_setup");
	player.Say((18),"Позволить skin #"+player.Param[(90)]+"?");
	player.Say((19+(0)),"Включить");
	player.Say((19+(1)),"Отключить");
	
}

void answer_next_setup(Critter&player,uint answerI,string&answerS)
{
	bool bb=((answerI==0)?true:false);
	
	skins_toggled.insertLast(bb);
	
	player.ParamBase[(90)]+=1;
	ask_next_setup(player);
}

uint skins_viewer_find_next(uint n)
{
	uint m=n;
	for(uint i=n+1;i<=skins_toggled.length();i++)
	{
		if(i==skins_toggled.length())
		return n;
		if(skins_toggled[i])
		{
			m=i;
			break;
		}
	}
	return m;
}

uint skins_viewer_find_prev(uint n)
{
	uint m=n;
	for(uint i=n-1;i>=0;i--)
	{
		if(i==0)
		return n;
		if(skins_toggled[i])
		{
			m=i;
			break;
		}
	}
	return m;
}

void _CrIdleClearSkin(Critter&cr)
{
	Item@armor=cr.GetItem(0,(3));
	
	if((@armor!=null))
	cr.MoveItem(armor.Id,armor.GetCount(),(0));
	
	uint type=cr.Stat[(112)];
	if(type==0)
	type=(cr.Stat[(71)]==(0)?((106)):((4)));
	cr.ChangeCrType(type);
	
	cr.SetEvent((0),"");
}

void ask_next_viewer(Critter@player)
{
	if(!(@player!=null)||!player.IsLife())
	return;
	
	uint n=player.Param[(90)];
	
	if(n<1||n>=(114)||n>=skins_toggled.length())
	return;
	
	if(!skins_toggled[n])
	return;
	
	player.ChangeCrType(n);
	
	player.SetEvent((0),"_CrIdleClearSkin"); 
	
	player.ShowScreen((2),7,"answer_next_viewer");
	player.Say((18),"Skin #"+n);
	player.Say((19+(0)),"Следующий");
	player.Say((19+(1)),"Предыдущий");
	player.Say((19+(2)),"Выбрать");
	player.Say((19+(3)),"Пижама");
	player.Say((19+(4)),"Патлатый М");
	player.Say((19+(5)),"Лысый М");
	player.Say((19+(6)),"Негр");
}

void answer_next_viewer(Critter&player,uint answerI,string&answerS)
{
	if(answerI==0)
	{
		player.ParamBase[(90)]=skins_viewer_find_next(player.Param[(90)]);
		ask_next_viewer(player);
	}
	else if(answerI==1)
	{
		player.ParamBase[(90)]=skins_viewer_find_prev(player.Param[(90)]);
		ask_next_viewer(player);
	}
	else if(answerI==2)
	{
		uint result=player.Param[(90)];
		
		if(!skins_toggled[result])
		return;
		
		if(!canUseCloth(player))
		return;
		
		player.ChangeCrType(result);
		
		player.StatBase[(112)]=result;
		
		player.DeleteItem((905),1);
		
		ChangeCritterSpeed(player);
	}
	else if(answerI==3)
	{
		if(!canUseCloth(player))
		return;
		
		player.ChangeCrType(player.Stat[(71)]==(0)?(11):((4)));
		player.StatBase[(112)]=0;
		ChangeCritterSpeed(player);
	}
	else if(answerI==4)
	{
		if(!canUseCloth(player))
		return;
		
		player.ChangeCrType(player.Stat[(71)]==(0)?(106):((4)));
		player.StatBase[(112)]=106;
		ChangeCritterSpeed(player);
	}
	else if(answerI==5)
	{
		if(!canUseCloth(player))
		return;
		
		player.ChangeCrType(player.Stat[(71)]==(0)?(116):((4)));
		player.StatBase[(112)]=116;
		ChangeCritterSpeed(player);
	}
	else if(answerI==6)
	{
		if(!canUseCloth(player))
		return;
		
		player.ChangeCrType(player.Stat[(71)]==(0)?(149):((4)));
		player.StatBase[(112)]=149;
		ChangeCritterSpeed(player);
	}
}

bool canUseCloth(Critter&player)
{
	uint defbody=player.Stat[(71)]==(0)?((106)):((4));
	if(!player.IsLife())
	return false;
	
	if(player.CountItem((905))<1)
	return false;
	
	uint8 mode=0;
	if(player.GetSlotProto((3),mode).ProtoId!=1100)
	{
		player.Say((11),"Ваша броня мешает вам сменить обличие.");
		return false;
	}
	
	uint cur_skin=player.Stat[(112)];
	
	if(cur_skin!=defbody&&(cur_skin>=skins_toggled.length()||!skins_toggled[cur_skin]))
	{
		player.Say((11),"Вы не можете сменить обличие.");
		return false;
	}
	
	return true;
}

bool _cloth_use(Item&item,Critter&player,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	
	if((@onCritter!=null)||(@onItem!=null)||(@onScenery!=null))
	return true;
	
	if(!canUseCloth(player))
	return true;
	
	player.ParamBase[(90)]=skins_viewer_find_next(0);
	ask_next_viewer(player);             
	
	return true;
	
}           

void answer_cloth_get(Critter&player,uint answerI,string&answerS)
{
	uint8 mode=0;
	if(player.GetSlotProto((3),mode).ProtoId!=1100)
	{
		player.Say((11),"Ваша броня мешает вам сменить обличие.");
		return;
	}
	
	int result=0;
	
	if(!StrToInt(answerS,result))
	return;
	
	if(result==0)
	{
		player.ChangeCrType(player.Stat[(71)]==(0)?((106)):((4)));
		player.StatBase[(112)]=player.Stat[(71)]==(0)?((106)):((4));
		return;
	}
	
	if(result<1||result>=(114)||uint(result)>=skins_toggled.length())
	return;
	
	if(!skins_toggled[result])
	return;
	
	if(player.CountItem((905))<1)
	return;
	
	player.ChangeCrType(result);
	
	player.StatBase[(112)]=result;
	
	player.DeleteItem((905),1);
	
}  

void _InitCloth(Item&item,bool firstTime)
{
	item.SetEvent((2),"_cloth_use");
}

void GM_skin(Critter&player,int param0,int param1,int param2,string@param3,int[]@param4)
{
	skin(player,param0,param1,param2);
}

void skin(Critter&player,int playerId,int crType,int param2)
{
	Critter@cr;
	if(playerId!=0)
	@cr=GetCritter(playerId);
	else
	@cr=@player;
	
	if(!(@cr!=null))
	return;
	
	skin(cr,crType);
	
}

void skin(Critter&cr,int crType)
{
	int lastBody=cr.CrType;
	if(lastBody==51||lastBody==60||lastBody==100||lastBody==81)
	{
		Item@spec=cr.GetItem(0,(1));
		if((@spec!=null))
		{
			if(spec.GetProtoId()==(595)||spec.GetProtoId()==(596))
			DeleteItem(spec);
		}
		else
		{
			@spec=cr.GetItem(0,(2));
			if((@spec!=null))
			{
				if(spec.GetProtoId()==(595)||spec.GetProtoId()==(596))
				DeleteItem(spec);
			}
		}
	}
	
	Item@armor=cr.GetItem(0,(3));
	
	if((@armor!=null))
	cr.MoveItem(armor.Id,armor.GetCount(),(0));
	
	int result=crType;
	
	if(crType==0)
	result=(cr.Stat[(71)]==(0)?((106)):((4)));
	
	cr.StatBase[(66)]=0;
	cr.StatBase[(23)]=cr.Perk[(313)]*10;
	cr.StatBase[(24)]=0;
	cr.StatBase[(25)]=0;
	cr.StatBase[(26)]=0;
	cr.StatBase[(27)]=0;
	cr.StatBase[(29)]=0;
	cr.StatBase[(16)]=0;
	cr.StatBase[(17)]=0;
	cr.StatBase[(18)]=0;
	cr.StatBase[(19)]=0;
	cr.StatBase[(20)]=0;
	cr.StatBase[(22)]=0;                                                                                                                                                                          
	
	cr.ChangeCrType(result);
	
	if(crType==20||crType==21||crType==114)
	cr.StatBase[(67)]=(3);
	else if(crType==25)
	{
		cr.StatBase[(66)]=650;                 
		
		cr.StatBase[(67)]=(9);
	}
	else if(crType==15)
	{
		cr.StatBase[(66)]=150;           
		
		cr.StatBase[(67)]=(5);
	}
	else if(crType==28||crType==29||crType==79)
	cr.StatBase[(67)]=(4);
	else if(crType==16)
	{
		cr.StatBase[(66)]=80;          
		
		cr.StatBase[(67)]=(11);
	}
	else if(crType==19)
	{
		cr.StatBase[(66)]=120;          
		
		cr.StatBase[(67)]=(7);
	}
	else if(crType==24)
	{
		cr.StatBase[(66)]=80;    
		
		cr.StatBase[(67)]=(7);
	}
	else if(crType==76)
	{
		cr.StatBase[(66)]=250;           
		
		cr.StatBase[(67)]=(7);
	}
	else if(crType==55)
	{
		cr.StatBase[(66)]=80;    
		
		cr.StatBase[(67)]=(7);
	}
	else if(crType==22)
	{
		cr.StatBase[(66)]=60;         
		
		cr.StatBase[(67)]=(6);
	}
	else if(crType==59)
	{
		cr.StatBase[(66)]=110;             
		
		cr.StatBase[(67)]=(6);
	}
	else if(crType==60)
	{
		Item@[]items;
		uint itemscount=cr.GetItems((1),items);
		if(itemscount>0)
		{
			cr.MoveItem(items[0].Id,itemscount,(0));
			items[0].Update();
		}
		Item@weapon=cr.AddItem((595),1);
		cr.MoveItem(weapon.Id,1,(1));
		weapon.Update();
		cr.StatBase[(66)]=250;              
		
		cr.StatBase[(67)]=(13);
	}
	else if(crType==51)
	{
		Item@[]items;
		uint itemscount=cr.GetItems((1),items);
		if(itemscount>0)
		{
			cr.MoveItem(items[0].Id,itemscount,(0));
			items[0].Update();
		}
		Item@weapon=cr.AddItem((595),1);
		cr.MoveItem(weapon.Id,1,(1));
		weapon.Update();
		cr.StatBase[(66)]=1000;                  
		
		cr.StatBase[(67)]=(13);
	}
	else if(crType==100)
	{
		Item@[]items;
		uint itemscount=cr.GetItems((1),items);
		if(itemscount>0)
		{
			cr.MoveItem(items[0].Id,itemscount,(0));
			items[0].Update();
		}
		Item@weapon=cr.AddItem((595),1);
		cr.MoveItem(weapon.Id,1,(1));
		weapon.Update();
		cr.StatBase[(66)]=1250;                  
		
		cr.StatBase[(67)]=(13);
	}
	else if(crType==81)
	{
		Item@[]items;
		uint itemscount=cr.GetItems((1),items);
		if(itemscount>0)
		{
			cr.MoveItem(items[0].Id,itemscount,(0));
			items[0].Update();
		}
		Item@weapon=cr.AddItem((596),1);
		cr.MoveItem(weapon.Id,1,(1));
		weapon.Update();
		cr.StatBase[(66)]=1000;                
		
		cr.StatBase[(67)]=(15);
	}
	else if(crType==80)
	{
		cr.StatBase[(66)]=500;
		cr.StatBase[(23)]+=40;                
		
		cr.StatBase[(67)]=(16);
	}
	else if(crType==86)
	{
		cr.StatBase[(66)]=1000;
		cr.StatBase[(23)]+=40;                
		
		cr.StatBase[(67)]=(16);
	}
	else if(crType==67)
	{
		cr.StatBase[(66)]=60;          
		
		cr.StatBase[(67)]=(15);
	}
	else if(crType==68)
	{
		cr.StatBase[(66)]=135;           
		
		cr.StatBase[(67)]=(15);
	}
	else if(crType==70||crType==17||crType==53||crType==54||crType==66||crType==101)
	cr.StatBase[(67)]=(10);
	else if(crType==52)
	{
		cr.StatBase[(66)]=70;    
		
		cr.StatBase[(67)]=(12);
	}
	else if(crType==97)
	{
		cr.StatBase[(66)]=30;    
		
		cr.StatBase[(67)]=(17);
	}
	else if(crType==23)
	{
		cr.StatBase[(66)]=85;               
		
		cr.StatBase[(67)]=(8);
	}
	else if(crType==65)
	cr.StatBase[(67)]=(14);
	else if(cr.Stat[(67)]!=(29))
	cr.StatBase[(67)]=0;
	
	cr.StatBase[(112)]=crType;
	
	ChangeCritterSpeed(cr);
}
