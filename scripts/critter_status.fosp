

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

import int GetDeteriorationProcent(Item&item)from"repair";
import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId)from"combat";

void ChangeStatus(Critter&cr,uint16 status,uint8 value,bool set)
{
	bool onlyFlag=false;
	
	if(set)
	{
		switch(status)
		{
			case(0x001):
			BleedCritter(cr,value);
			break;
			case(0x008):
			BloodToxicCritter(cr);
			break;
			default:
			break;
		}
		
		(cr.StatBase[(146)]=(cr.StatBase[(146)])|(status));
	}
	else
	{
		switch(status)
		{
			case(0x010):
			onlyFlag=true;
			break;
			case(0x040):
			onlyFlag=true;
			break;
			default:
			break;
		}
		
		if(onlyFlag&&(((cr.StatBase[(146)])&(status))!=0))
		(cr.StatBase[(146)]=((cr.StatBase[(146)])&(~(status))));
	}
}

void BleedCritter(Critter&cr,int8 bleedValue)
{
	
	uint[]indexes;
	uint[]rates;
	uint[]durations;
	int eventCount=cr.GetTimeEvents((44),indexes,durations,rates);
	uint time=60*__TimeMultiplier;
	int maxHP=cr.Stat[(7)];
	
	if(eventCount>0){
		cr.StatBase[(149)]+=bleedValue/3;
		if(cr.StatBase[(149)]>maxHP/5){
			cr.Say((11),"Из вас хлещет кровь");
			cr.Say((5),"Кровь бьет фонтаном");
			DropBleed(cr);
			cr.AddTimeEvent("cte_bleed",0,(44),0);
		}
	}else{
		cr.StatBase[(149)]=bleedValue/3;
		cr.AddTimeEvent("cte_bleed",0,(44),0);
		if(bleedValue/3<maxHP/10)cr.Say((11),"У Вас началось легкое кровотечение.");
		else if(bleedValue/3<maxHP/5)cr.Say((11),"У Вас началось кровотечение.");
		else{
			cr.Say((11),"Из вас хлещет кровь");
			cr.Say((5),"Кровь бьет фонтаном");
		}
	}
}

uint cte_bleed(Critter&cr,int identifier,uint&rate)
{
	int maxHP=cr.Stat[(7)];
	int bleed=cr.StatBase[(149)];
	if((bleed<=0)||(cr.ParamBase[(739)]>maxHP-__DeadHitPoints))
	{
		if(cr.ParamBase[(739)]>maxHP-__DeadHitPoints)cr.ParamBase[(739)]=maxHP-__DeadHitPoints;
		(cr.StatBase[(146)]=((cr.StatBase[(146)])&(~((0x001)))));
		cr.Say((11),"Вы перестали истекать кровью.");
		return 0;
	}
	int damage=Random(2,6);
	uint anim2Dead=0; 
	
	cr.ParamBase[(739)]+=damage;
	if(cr.ParamBase[(739)]>=maxHP-__DeadHitPoints){
		if(cr.IsKnockout()){
			if(cr.Anim2Knockout==(86))
			anim2Dead=(100);
			else
			anim2Dead=(101);
		}else{
			anim2Dead=(102);
		}
		cr.ToDead(anim2Dead,cr);
	}
	
	if(bleed<maxHP/5)
	{
		bleed--;
		bleed=(((bleed)>(100))?(100):(((bleed)<(0))?(0):(bleed)));
		cr.StatBase[(149)]=bleed;
		cr.Say((11),"Используйте тряпки или бинты, чтобы остановить кровотечение");
		cr.Say((5),"Истекает кровью");
		uint16 hx=cr.HexX,hy=cr.HexY;
		cr.GetMap().AddItem(hx,hy,Random(3321,3323),1);
	}
	else
	{ 
		
		if(Random(0,4)==0){
			cr.StatBase[(149)]-=Random(0,1);
			cr.Say((11),"Кровь хлещет из Вас!");
			cr.Say((5),"Быстро теряет кровь");
			uint16 hx=cr.HexX,hy=cr.HexY;
			cr.GetMap().AddItem(hx,hy,Random(3321,3326),1);
		}
		return(12*__TimeMultiplier);
	}
	return(60*__TimeMultiplier);
}

void DropBleed(Critter&cr)
{
	uint[]indexes;
	uint[]rates;
	uint[]durations;
	uint8 eventCount=cr.GetTimeEvents((44),indexes,durations,rates);
	
	if(eventCount>0)
	{
		cr.EraseTimeEvents((44));
	}
}

void BloodToxicCritter(Critter&cr)
{
	if(cr.GetTimeEvents((46),null,null,null)>0)
	{
		cr.StatBase[(147)]++;
	}
	
	else cr.AddTimeEvent("cte_blood_toxic",10*__TimeMultiplier,(46),0);
}

uint cte_blood_toxic(Critter&cr,int identifier,uint&rate)
{
	uint8 toxicLevel=cr.StatBase[(147)];
	if(cr.StatBase[(67)]==(10))
	{
		(cr.StatBase[(146)]=((cr.StatBase[(146)])&(~((0x008)))));
		cr.StatBase[(147)]=0;
		cr.Say((11),"Роботы не страдают от заражения крови, ведь у них ее нет!");
		return 0;
	}
	if(toxicLevel>=cr.Stat[(2)]*20)
	{
		cr.ToDead(Random(0,1)==0?(102):(103),null);
		(cr.StatBase[(146)]=((cr.StatBase[(146)])&(~((0x008)))));
		cr.StatBase[(147)]=0;
		cr.Say((11),"Вы умерли от заражения крови.");
		return 0;
	}
	else if(toxicLevel<=0)
	return 0;
	
	cr.StatBase[(147)]++;
	cr.Say((11),"Вы страдаете от заражения крови. /используйте таблетки через навык доктора, дабы спасти себя/");
	return(60*5*__TimeMultiplier);
}

void DropToxic(Critter&cr)
{
	uint[]indexes;
	uint[]rates;
	uint[]durations;
	uint8 eventCount=cr.GetTimeEvents((46),indexes,durations,rates);
	
	if(eventCount>0)
	{
		cr.EraseTimeEvent(indexes[0]);
	}
	
	cr.StatBase[(147)]=0;
}                             

