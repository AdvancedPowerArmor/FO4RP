// TabaK
// import void DropParalysis(Critter& cr, int value) from "paralysis";
// import void AffectParalysis(Critter& cr, int value) from "paralysis";
// import void DropParalysisInstant(Critter& cr) from "paralysis";

#include "_macros.fos"
#include "_colors.fos"
#define EVENT_ID( 6 )
int strength, perception, agility, endurance;

void AffectParalysis( Critter& cr, int value ) // Export
{
    uint[] indexes;
    uint[] durations;
    uint stats;
    int  resist;
    bool isActive = cr.GetTimeEvents( EVENT_ID, indexes, durations, null ) != 0;

    if( value > 0 )
        resist = value * cr.Stat[ ST_POISON_RESISTANCE ] / 100;
    value -= resist;
    if( cr.Param[ ST_PARALYSIS_LEVEL ] == 0 )
    {
        stats = cr.Param[ ST_STRENGTH ];
        stats = stats | ( cr.Param[ ST_PERCEPTION ] << 8 ) | ( cr.Param[ ST_AGILITY ] << 16 ) | ( cr.Param[ ST_ENDURANCE ] << 24 );
    }
    cr.ParamBase[ ST_PARALYSIS_LEVEL ] += value;
    if( cr.ParamBase[ ST_PARALYSIS_LEVEL ] > 0 )
        cr.ParamBase[ DAMAGE_POISONED ] = 1;

    if( !isActive )
    {
        cr.AddTimeEvent( "cte_Paralysis", 10 * 60, EVENT_ID, stats );
    }
}


uint cte_Paralysis( Critter& cr, int identifier, uint& rate )
{
	if( cr.Perk[ PE_SNAKEATER ] >= 2 )
	{
		cr.Say( SAY_NETMSG, "Вы чувствуете прилив сил." );
		cr.StatBase[ ST_CURRENT_HP ] += cr.Stat[ ST_HEALING_RATE ];
		return 0;
	}
	
    uint paral_stage = 0;
    strength = ( rate ) & 0xFF;
    perception = ( rate >> 8 ) & 0x00FF;
    agility = ( rate >> 16 ) & 0x0000FF;
    endurance = ( rate >> 24 ) & 0x000000FF;

/*string str="Уровень отравления = ";
   str+=cr.Param[ST_PARALYSIS_LEVEL];
   cr.Say(SAY_NETMSG,str);*/

    if( cr.Param[ ST_PARALYSIS_LEVEL ] < 0 )
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] = 0;
    if( cr.Param[ ST_PARALYSIS_LEVEL ] <= 50 )
        paral_stage = 1;
    if( cr.Param[ ST_PARALYSIS_LEVEL ] > 50 )
        paral_stage = 2;
    if( cr.Param[ ST_PARALYSIS_LEVEL ] > 100 )
        paral_stage = 3;
    if( cr.Param[ ST_PARALYSIS_LEVEL ] == 0 )
        paral_stage = 0;

    if( paral_stage != 0 && cr.IsPlayer() )
    {
        cr.ParamBase[ DAMAGE_POISONED ] = 1;
        if( cr.Stat[ ST_BODY_TYPE ] < 5 && cr.Stat[ ST_BODY_TYPE ] != 10 )
            cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, Random( 12904, 12907 ) );
    }
    else
        cr.ParamBase[ DAMAGE_POISONED ] = 0;

    switch( paral_stage )
    {
    case 0:
        cr.ParamBase[ ST_STRENGTH ] = strength;
        cr.ParamBase[ ST_PERCEPTION ] = perception;
        cr.ParamBase[ ST_AGILITY ] = agility;
        cr.ParamBase[ ST_ENDURANCE ] = endurance;
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12903 );
        return 0;

    case 1:
        cr.ParamBase[ ST_STRENGTH ]--;
        cr.ParamBase[ ST_PERCEPTION ]--;
        cr.ParamBase[ ST_AGILITY ]--;
        cr.ParamBase[ ST_ENDURANCE ]--;
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] -= 5;
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12900 );
        return 10 * 60;

    case 2:
        cr.ParamBase[ ST_STRENGTH ] -= 2;
        cr.ParamBase[ ST_PERCEPTION ] -= 2;
        cr.ParamBase[ ST_AGILITY ] -= 2;
        cr.ParamBase[ ST_ENDURANCE ] -= 2;
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] -= 5;
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12901 );
        return 30 * 60;

    case 3:
        if( !cr.IsKnockout() )
            cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( false ), 50, cr.HexX, cr.HexY );
        cr.ParamBase[ ST_STRENGTH ] = 1;
        cr.ParamBase[ ST_PERCEPTION ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 1;
        cr.ParamBase[ ST_ENDURANCE ] = 1;
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] -= 5;
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12902 );
        return 60 * 60;

    default:
        return 10 * 60;
    }
    return 20 * 60;
}

void DropParalysis( Critter& cr, int value ) // Export
{
    if( value > 0 )
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12908 );
    if( value > cr.Param[ ST_PARALYSIS_LEVEL ] )
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] = 0;
    else
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] -= value;
}


void DropParalysisInstant( Critter& cr ) // Export
{

    if( cr.Param[ ST_PARALYSIS_LEVEL ] != 0 )
    {
        cr.ParamBase[ ST_STRENGTH ] = strength;
        cr.ParamBase[ ST_PERCEPTION ] = perception;
        cr.ParamBase[ ST_AGILITY ] = agility;
        cr.ParamBase[ ST_ENDURANCE ] = endurance;
        cr.ParamBase[ ST_PARALYSIS_LEVEL ] = 0;
        if( cr.Param[ ST_POISONING_LEVEL ] == 0 )
            cr.ParamBase[ DAMAGE_POISONED ] = 0;
        cr.EraseTimeEvents( EVENT_ID );
    }
}
