

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

import void DropBleed(Critter&cr)from"critter_status";

void initRespawnLoop(Map&map,bool firstTime){
	map.SetData((2),0);
	map.SetEvent((6),"startLoop");
}

uint mapRespawn(uint[]@values){
	Map@map=GetMap(values[0]);
	bool noPlayers=(map.GetCritters(0,(0x01)|(0x10),null)==0);
	if(noPlayers&&map.GetData((2))==1){
		Critter@[]npcs;
		map.GetCritters(0,(0x0F)|(0x20),npcs);
		bool allClear=false;
		uint npcLength=npcs.length();
		while(!allClear){
			int i=0;
			allClear=true;
			while(i<npcLength){
				if(!respawnNpc(npcs[i]))allClear=false;
				i++;
			}
		}
		map.SetData((2),0);
		return 0;
	}else{
		return 2;
	}
}

void startLoop(Map&map,Critter&cr){
	if(map.GetData((2))==0){
		map.SetData((2),1);
		
	}
	CreateTimeEvent(__FullSecond+(1000),"mapRespawn",map.Id,false);
}

bool respawnNpc(Critter&cr){
	uint mapId=0;
	uint16 hexX=0,hexY=0;
	uint8 dir=0;
	cr.GetHomePos(mapId,hexX,hexY,dir);
	cr.TransitToHex(hexX,hexY,dir);
	bool success=cr.ToLife();
	
	cr.StatBase[(72)]=cr.Stat[(7)];
	int i=(730);
	while(i<=(737)){
		cr.ParamBase[i]=0;
		i++;
	}
	cr.ParamBase[(739)]=0;
	DropBleed(cr);
	i=(__DamageBegin);
	while(i<=(__DamageEnd)){
		cr.DamageBase[i]=0;
		i++;
	}
	return success;
}
