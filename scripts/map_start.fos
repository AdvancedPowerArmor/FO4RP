#include "_macros.fos"
#include "_cell.fos"

import void   CreateCell( uint16 x, uint16 y, uint mapId, uint8 type, int8 visibility ) from "globalmap_group";
import int    GetCellMap( uint16 x, uint16 y ) from "globalmap_group";
import void   unsafe_arcade( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 ) from "arcade_menu";
import string TimeToString( Critter& player ) from "gm";
import void   ShowInputBoxScreen( Critter& cr, string funcName, uint16 textLength, uint8 flags ) from "main";

void _StartMapInit( Map& map, bool firstTime )
{
    map.SetEvent( MAP_EVENT_OUT_CRITTER, "_crOut" );
    map.SetEvent( MAP_EVENT_IN_CRITTER, "_crIn" );
}

void _ArcadeKindmanInit( Critter& cr, bool firstTime )
{
    cr.StatBase[ ST_DIALOG_ID ] = 331;   // нпц_гайд
    cr.ModeBase[ MODE_NO_WALK ] = 1;
    cr.ModeBase[ MODE_NO_RUN ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.ModeBase[ MODE_NO_PVP ] = 1;
    cr.ModeBase[ MODE_INVULNERABLE ] = 1;
    cr.ModeBase[ MODE_NO_PUSH ] = 1;
    cr.ModeBase[ MODE_NO_ENEMY_STACK ] = 1;
    cr.ModeBase[ MODE_NO_UNARMED ] = 1;
    cr.ParamBase[ QST_INVIS ] = 40;
    cr.SetEvent( CRITTER_EVENT_TALK, "_ArcadeKindman_talk" );
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "_Arcade_sight" );
}

void _Arcade_sight( Critter& cr, Critter& showCr )
{
    Map@ map = cr.GetMap();
    Critter@[] critters;
    if( showCr.IsPlayer() && showCr.ParamBase[ QST_GAMEMODE ] == GAME_START && ( map.GetCrittersHex( cr.HexX, cr.HexY, 15, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, critters ) <= 1 ) )
    {
        uint16[] ArcadeSkins = { 15, 16, 19, 22, 23, 24, 25, 51, 52, 55, 58, 59, 60, 65, 67, 68, 80, 81, 86, 97 };
        cr.ChangeCrType( ArcadeSkins[ Random( 0, ArcadeSkins.length() ) ] );
    }
}

bool _ArcadeKindman_talk( Critter& player, Critter& talkCr, bool attach, uint talkCount ) // выбор режима игры
{
    if( talkCr.Param[ QST_GAMEMODE ] == GAME_START )
    {
        talkCr.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_ArcadeKindman_talk" );
        talkCr.Say( SAY_DIALOGBOX_TEXT, "НПЦ стоит временно без диалога" );
        talkCr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Войти в игру аркадой" );
        talkCr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Постоять пока тут" );
        return false;
    }
    else
        talkCr.Say( SAY_NETMSG, "Ошибка, обратитесь к ГеймМастерам." );
    return false;
}

void answer_ArcadeKindman_talk( Critter& player, uint answerI, string& answerS )
{
    if( player.Param[ QST_GAMEMODE ] != GAME_START )
        return;
    if( answerI == 0 )
    {
        Map@ start = GetMapByPid( MAP_UTILITY_START, 0 );
        _crOut( start, player );
        unsafe_arcade( player, 0, 0, 0, null, null );
    }
}

void _SurvivalKindmanInit( Critter& cr, bool firstTime )
{
    cr.StatBase[ ST_DIALOG_ID ] = 331;   // нпц_гайд
    cr.ModeBase[ MODE_NO_WALK ] = 1;
    cr.ModeBase[ MODE_NO_RUN ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.ModeBase[ MODE_NO_PVP ] = 1;
    cr.ModeBase[ MODE_INVULNERABLE ] = 1;
    cr.ModeBase[ MODE_NO_PUSH ] = 1;
    cr.ModeBase[ MODE_NO_ENEMY_STACK ] = 1;
    cr.ModeBase[ MODE_NO_UNARMED ] = 1;
    cr.ParamBase[ QST_INVIS ] = 40;
    cr.SetEvent( CRITTER_EVENT_TALK, "_SurvivalKindman_talk" );
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "_Survival_sight" );
}

bool _SurvivalKindman_talk( Critter& kindman, Critter& player, bool attach, uint talkCount ) // выбор режима игры
{
    if( player.ParamBase[ QST_GAMEMODE ] != GAME_START )
        return false;
	
	Item@[] items;
	player.GetItems( SLOT_ARMOR, items );
	player.GetItems( SLOT_HAND1, items );
	player.GetItems( SLOT_HAND2, items );
	player.GetItems( SLOT_INV, items );
	
	DeleteItems( items );
	
	player.ParamBase[ QST_GAMEMODE ] = GAME_SURVIVAL;
	kind_tele2( player, null, 25 );
	return false;
}

void answer_SurvivalKindman_talk( Critter& player, uint answerI, string& answerS )
{
    if( player.ParamBase[ QST_GAMEMODE ] != GAME_START )
        return;
    if( answerI == 0 )
    {
        player.ParamBase[ QST_GAMEMODE ] = GAME_SURVIVAL;
        uint LocPid = 25;

        kind_tele2( player, null, LocPid );
    }
}

void _Survival_sight( Critter& cr, Critter& showCr )
{
    Map@ map = cr.GetMap();
    Critter@[] critters;
    if( showCr.IsPlayer() && showCr.ParamBase[ QST_GAMEMODE ] == GAME_START && ( map.GetCrittersHex( cr.HexX, cr.HexY, 15, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, critters ) <= 1 ) )
    {
        uint16[] GMskins =
        {
            0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 20, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 53, 57, 61, 62, 63, 64, 66,
            69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 87, 88, 91, 94, 95, 96, 99, 103, 110, 120
        };
        cr.ChangeCrType( GMskins[ Random( 0, GMskins.length() ) ] );
    }
}

void _InitStartGM( Critter& cr, bool firstTime ) // самый стартовый нпц
{
    cr.StatBase[ ST_PERCEPTION ] = 10;
    cr.StatBase[ ST_DIALOG_ID ] = 331;           // нпц_гайд
    cr.ShowCritterDist1 = 15;
    cr.ModeBase[ MODE_NO_WALK ] = 1;
    cr.ModeBase[ MODE_NO_RUN ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.ModeBase[ MODE_NO_PVP ] = 1;
    cr.ModeBase[ MODE_INVULNERABLE ] = 1;
    cr.ModeBase[ MODE_NO_PUSH ] = 1;
    cr.ModeBase[ MODE_NO_ENEMY_STACK ] = 1;
    cr.ModeBase[ MODE_NO_UNARMED ] = 1;
    cr.ParamBase[ QST_INVIS ] = 40;
    cr.SetEvent( CRITTER_EVENT_TALK, "_StartGM_talk" );
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "_StartGM_sight" );
}

void _StartGM_sight( Critter& cr, Critter& showCr )
{
    Map@ map = cr.GetMap();
    Critter@[] critters;
    if( showCr.IsPlayer() && showCr.ParamBase[ QST_GAMEMODE ] == GAME_START && ( map.GetCrittersHex( cr.HexX, cr.HexY, 15, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, critters ) <= 1 ) )
    {
        uint16[] GMskins =
        {
            0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 20, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 53, 57, 61, 62, 63, 64, 66,
            69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 87, 88, 91, 94, 95, 96, 99, 103, 110, 120
        };
        cr.ChangeCrType( GMskins[ Random( 0, GMskins.length() ) ] );
    }
}

bool _StartGM_talk( Critter& player, Critter& talkCr, bool attach, uint talkCount ) // выбор режима игры
{
	ShowStartVars( talkCr );
	return false;
}

void ShowStartVars( Critter& player )
{
    if( player.ParamBase[ QST_GAMEMODE ] == GAME_START )
    {
		bool isMale = player.Stat[ ST_GENDER ] == GENDER_MALE;
        player.ShowScreen( SCREEN_DIALOGBOX, 4 + ( isMale? 1 : 0 ), "answer_StartGM_talk" );
        player.Say( SAY_DIALOGBOX_TEXT, "Добро пожаловать в игру!" + ( isMale ? "Или выберите длинну волос." : "" ) );
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Обучение" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Начать игру" );
		player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "Изменить скин" );
		player.Say( SAY_DIALOGBOX_BUTTON( 3 ), isMale ? "Рост волос" : "Цвет волос" );
		if( isMale )
			player.Say( SAY_DIALOGBOX_BUTTON( 4 ), "Цвет кожи" );
    }
    else
        player.Say( SAY_NETMSG, "Ошибка, обратитесь к ГеймМастерам." );
}

void answer_StartGM_talk( Critter& player, uint answerI, string& answerS )
{
    if( answerI == 0 )
	{
        Location @ loc = GetLocationByPid( LOCATION_Bridge, 0 );
        Map @ map = loc.GetMapByIndex( 0 );
        Map@ start = GetMapByPid( MAP_UTILITY_START, 0 );
        player.Say( SAY_NETMSG, "Вы выбрали режим обучения." );
        _crOut( start, player );
        player.TransitToMap( map.Id, 0 );
	}
	
	if( answerI == 1 )
    {
        bool tele = false;
        tele = player.TransitToHex( 305 + Random( -3, 3 ), 240 + Random( -3, 3 ), 0 ); // к кайнду выживания
        if( !tele )
            player.Say( SAY_NETMSG, "Попробуйте еще раз." );
        else
            player.Say( SAY_NETMSG, "Вы выбрали режим выживания." );
    }
	
    if( answerI == 2 )
    {
		if( player.CountItem(  PID_SKIN_CHANGER ) < 1 )
			player.AddItem( PID_SKIN_CHANGER, 1 );
		player.Say( SAY_NETMSG, "Предмет для смены скинов появился к кармане. Что бы сбросить скин позже в игре пишите ~naked, сейчас можно просто снова использовать косметичку. Что бы изменить описание персонажа - скажите ~lex \"текст\", без кавычек." );
	}
	
	if( answerI == 3 ) //Считается, что сюда женские персонажи не зайдут, т.к. им не выводится данный пункт меню.
	{	//player.Stat[ ST_GENDER ] == GENDER_MALE
		if( player.Stat[ ST_GENDER ] == GENDER_MALE )
		{
			uint[] types = { 120, 62, 110 };
			uint index = types.find( player.Stat[ ST_BASE_CRTYPE ] );
			if( player.Stat[ ST_BASE_CRTYPE ] == 0 || index == -1 ) index = 62;
			if( index > -1 )
			{
				index = types[ ( index + 1 ) % types.length() ];
				player.ParamBase[ ST_BASE_CRTYPE ] = index;
				player.ChangeCrType( index );
			}
			else
				player.Say( SAY_NETMSG, "Так отращивать волосы можно лишь голым дикарям. Остальные скины и причёски доступны через косметичку." );
			ShowStartVars( player );
		}
		else
		{
			uint[] types = { 151, 61 };
			uint index = types.find( player.Stat[ ST_BASE_CRTYPE ] );
			if( player.Stat[ ST_BASE_CRTYPE ] == 0 || index == -1 ) index = 61;
			if( index > -1 )
			{
				index = types[ ( index + 1 ) % types.length() ];
				player.ParamBase[ ST_BASE_CRTYPE ] = index;
				player.ChangeCrType( index );
			}
			else
				player.Say( SAY_NETMSG, "Так менять цвет кожи можно лишь голым дикарям. Остальные скины и причёски доступны через косметичку." );
			ShowStartVars( player );
		}
	}
	
	if( answerI == 4 )
	{
		uint[] types = { 62, 140 };
		uint index = types.find( player.Stat[ ST_BASE_CRTYPE ] );
		if( player.Stat[ ST_BASE_CRTYPE ] == 0 || index == -1 ) index = 62;
		if( index > -1 )
		{
			index = types[ ( index + 1 ) % types.length() ];
			player.ParamBase[ ST_BASE_CRTYPE ] = index;
			player.ChangeCrType( index );
		}
		else
			player.Say( SAY_NETMSG, "Так менять цвет кожи можно лишь голым дикарям. Остальные скины и причёски доступны через косметичку." );
		ShowStartVars( player );
	}

}

void _InitAdventureGM( Critter& cr, bool firstTime ) // нпц приключенцев
{
    cr.StatBase[ ST_DIALOG_ID ] = 331;               // нпц_гайд
    cr.ModeBase[ MODE_NO_WALK ] = 1;
    cr.ModeBase[ MODE_NO_RUN ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.ModeBase[ MODE_NO_PVP ] = 1;
    cr.ModeBase[ MODE_INVULNERABLE ] = 1;
    cr.ModeBase[ MODE_NO_PUSH ] = 1;
    cr.ModeBase[ MODE_NO_ENEMY_STACK ] = 1;
    cr.ModeBase[ MODE_NO_UNARMED ] = 1;
    cr.ParamBase[ QST_INVIS ] = 40;
    cr.SetEvent( CRITTER_EVENT_TALK, "_StartAdventureGM_talk" );
    // cr.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_StartAdventureGM_sight");
}

void _StartAdventureGM_sight( Critter& cr, Critter& showCr )
{
    Map@ map = cr.GetMap();
    Critter@[] critters;
    if( showCr.IsPlayer() && showCr.ParamBase[ QST_GAMEMODE ] == GAME_START && ( map.GetCrittersHex( cr.HexX, cr.HexY, 15, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, critters ) <= 1 ) )
    {
        uint16[] GMskins =
        {
            0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 20, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 53, 57, 61, 62, 63, 64, 66,
            69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 87, 88, 91, 94, 95, 96, 99, 103, 110, 120
        };
        cr.ChangeCrType( GMskins[ Random( 0, GMskins.length() ) ] );
    }
}


bool _StartAdventureGM_talk( Critter& player, Critter& talkCr, bool attach, uint talkCount ) // выбор режима игры
{
    GameVar@ activation = GetLocalVar( LVAR_activationStatus, talkCr.Id );
    GameVar@ request = GetLocalVar( LVAR_requestStatus, talkCr.Id );

    if( talkCr.ParamBase[ QST_GAMEMODE ] == GAME_START )
    {
        if( activation.GetValue() > request.GetValue() )
        {
            talkCr.ShowScreen( SCREEN_DIALOGBOX, 3, "answer_StartAdventureGM_activ" );
            talkCr.Say( SAY_DIALOGBOX_TEXT, "Вы АКТИВИРОВАННЫ" );
            talkCr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "В Модок" );
            talkCr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "В Саттер" );
            talkCr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "Править чарлист" );
        }
        else if( activation.GetValue() == -1 )
        {
            talkCr.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_unactiv" );
            talkCr.Say( SAY_DIALOGBOX_TEXT, "Вам отказанно в активации и скорее всего повторно рассматривать не будут." );
            talkCr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Править чарлист" );
            talkCr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Оставить как есть" );
        }
        else if( talkCr.ParamBase[ ST_VAR8 ] != 0 )
        {
            talkCr.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_unactiv" );
            talkCr.Say( SAY_DIALOGBOX_TEXT, "Вы уже подтвердили выбор, правки отзовут реквест активации." );
            talkCr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Править чарлист" );
            talkCr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Оставить как есть" );
        }
        else
        {
		string[] data = { "answer_StartAdventureGM_talk", "Выберите опцию:", "SKILLS", "Склад", "Описание", "Подтвердить" };
		DIALOG_MENU( player, data );
        }
        return false;
    }
    else
        talkCr.Say( SAY_NETMSG, "Ошибка, обратитесь к ГеймМастерам." );
    return false;
}

void answer_StartAdventureGM_activ( Critter& player, uint answerI, string& answerS )
{
    if( player is null )
        return;
    if( answerI == 0 )
    {
        player.ParamBase[ QST_GAMEMODE ] = GAME_ADVENTURE;
        GameVar@ citizenship = GetLocalVar( LVAR_modoc_citizenship, player.Id );
        if( citizenship.GetValue() == 11 )
            citizenship.opAssign( 2 );
        else if( citizenship.GetValue() == 12 )
            citizenship.opAssign( 3 );
        else if( citizenship.GetValue() == 13 )
        {
            citizenship.opAssign( 2 );
            player.ParamBase[ QST_GAMEMODE ] = GAME_SURVIVAL;
        }
        else
            citizenship.opAssign( 0 );
        if( citizenship.GetValue() == 3 )
        {
            Item@   pass = player.AddItem( PID_MODOC_DOCUMENTS, 1 );
            string@ name = GetPlayerName( player.Id );
            pass.SetLexems( "$ModocRegistrationName" + name );
        }
        kind_tele2( player, null, LOCATION_Sutter_4_1 );
    }
    if( answerI == 1 )
    {
        player.ParamBase[ QST_GAMEMODE ] = GAME_ADVENTURE;
        GameVar@ citizenship = GetLocalVar( LVAR_modoc_citizenship, player.Id );
        if( citizenship.GetValue() == 11 )
            citizenship.opAssign( 2 );
        else if( citizenship.GetValue() == 12 )
            citizenship.opAssign( 3 );
        else if( citizenship.GetValue() == 13 )
        {
            citizenship.opAssign( 2 );
            player.ParamBase[ QST_GAMEMODE ] = GAME_SURVIVAL;
        }
        else
            citizenship.opAssign( 0 );
        if( citizenship.GetValue() == 3 )
        {
            Item@   pass = player.AddItem( PID_MODOC_DOCUMENTS, 1 );
            string@ name = GetPlayerName( player.Id );
            pass.SetLexems( "$ModocRegistrationName" + name );
        }
        kind_tele2( player, null, LOCATION_Sutter_4_1 );
    }
    if( answerI == 2 )
    {
        GameVar@ request = GetLocalVar( LVAR_requestStatus, player.Id );
        request.opAddAssign( 1 );
        player.ParamBase[ ST_VAR8 ] = 0;
        file f;
        if( f.open( "adventurers\\" + player.Id + ".txt", "w" ) >= 0 )
        {
            f.close();
        }
		string[] data = { "answer_StartAdventureGM_talk", "Выберите опцию:", "SKILLS", "Склад", "Описание", "Подтвердить" };
		DIALOG_MENU( player, data );
    }
}

void answer_StartAdventureGM_unactiv( Critter& player, uint answerI, string& answerS )
{
    if( player is null )
        return;
    if( answerI == 0 )
    {
        file f;
        if( f.open( "adventurers\\" + player.Id + ".txt", "w" ) >= 0 )
        {
            f.close();
        }
        GameVar@ request = GetLocalVar( LVAR_requestStatus, player.Id );
        request.opAddAssign( 1 );
        player.ParamBase[ ST_VAR8 ] = 0;
		string[] data = { "answer_StartAdventureGM_talk", "Выберите опцию:", "SKILLS", "Склад", "Описание", "Подтвердить" };
		DIALOG_MENU( player, data );
    }
}

import void DIALOG_MENU( Critter& cr, string[] data ) from "gm";

void answer_GM_PANNEL_SELF_VAULT( Critter& player, uint answerI, string& answerS )
{
	OpenCrate( player, answerI );
}


string[] stat_names = { "легкое", "тяжелое", "энерго", "рукопашная", "холодное", "метательное", "санитар", "доктор", "скрытность", "взлом", "кража", "ловушки", "наука", "ремонт", "разговор", "торговля", "игра", "скиталец" };
void answer_StartAdventureGM_talk( Critter& player, uint answerI, string& answerS )
{
   if( player is null )
        return;
    if( answerI == 0 )
    {
		string[] data = { "answer_StartAdventureGM_talk_STATS_SKILL", "Навыки игрока, осталось " + player.ParamBase[ ST_VAR7 ] + " очков навыков" };
		for( int i = 200; i < 218; i++ )
		{
			data.insertLast( "[" + player.ParamBase[ i ] + " " + stat_names[i - 200] );
		}
		DIALOG_MENU( player, data );
    }
    if( answerI == 1 )
    {
		string[] data = { "answer_GM_PANNEL_SELF_VAULT", "Выберите категорию:", 
			"Холодное", "Стрелковое", "Аммуниция + Метательное", "Инструменты", "Броня", "Вещества + Пища", "Ценности", "Расходники", "Хлам" 
		};
		DIALOG_MENU( player, data );
    }
    if( answerI == 2 )
    {
        ShowInputBoxScreen( player, "map_start@unsafe_Description#Описание, приметы", 0, INPUTBOX_CLOSE_ON_ENTER );
    }
    if( answerI == 3 )
    {
        player.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_talk_CONFIRM" );
        player.Say( SAY_DIALOGBOX_TEXT, "Вы уверены в своем выборе?" );
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Да, абсолютно" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Нет." );
    }
}

void answer_StartAdventureGM_talk_HELP( Critter& player, uint answerI, string& answerS )
{
    if( player is null )
        return;
    if( answerI == 0 )
    {
		string[] data = { "answer_StartAdventureGM_talk", "Выберите опцию:", "SKILLS", "Склад", "Описание", "Подтвердить" };
		DIALOG_MENU( player, data );
    }
}

void OpenCrate( Critter& player, uint type )
{
	if( type >= itemlist.length() ) return;
	
    Map@   map = GetMapByPid( MAP_UTILITY_START, 0 );
    uint16 x = 0, y = 0;
	map.GetEntireCoords( type + 1, 0, x, y );
    Item@ Cont = map.GetItem( x, y, 245 );
    
	CheckItems( Cont, type );
    
	uint[] data = { player.Id, Cont.Id };
	CreateTimeEvent( __FullSecond + 1, "e_delayed_ShowContainer", data, false );
}

uint e_delayed_ShowContainer( uint[] @ values )
{
	if( !valid(values) || values.length() != 2 ) return 0;
	Critter@ player = GetCritter( values[0] );
	if( !valid(player) ) return 0;
	Item@ cont = GetItem( values[1] );
	if( !valid(cont) ) return 0;
	player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
	return 0;
}

//"Холодное", "Стрелковое", "Аммуниция + Метательное", "Инструменты", "Броня", "Вещества + Пища", "Ценности", "Расходники", "Хлам" 
const uint[][] itemlist = {
	{	//Холодное
		PID_HUNTING_KNIFE,
	    PID_SHIV,
		PID_SLEDGEHAMMER2,
		PID_knfcmbt1,
		PID_knfkuhn2,
		PID_knfpilka,
		PID_knftesk1,
		PID_tesak2,
		PID_mltelctr,
		PID_mlthmmr1,
		PID_mltmlot2,
		PID_SLEDGE,
		PID_sprelctr,
		PID_spriron1,
		PID_sprwood2,
		PID_hndkstt3,
		PID_hndkstt2,
		PID_hndkstt1,
		PID_hndcrclr,
		PID_hndglove,
		PID_hndpstl1,
		PID_plkratsl,
		PID_plkplic1,
		PID_plkpalka,
		PID_plkfomka,
		PID_plkcue01,
		PID_plkscck2,
		PID_polprod,
		PID_RUST_KATANA,
		PID_KATANA,
		PID_CLUB2,
		PID_BITA,
		PID_BLIND_FURY,
		PID_MIKKI,
		PID_BO,
		PID_CUBOTAN,
		PID_TESAK,
		PID_CEP,
		PID_RAZOR,
		PID_PRUTOK,
		PID_SCALPEL,
		PID_TACTICAL_KNIFE,
		PID_MACHETE,
		PID_SHOCK_CASTET,
		PID_ELECTRO_SPEAR,
		PID_HEAVY_SPEAR,
		PID_COYOT_KNIFE,
		PID_COYOT_CLUB,
		PID_GONZO,
		PID_IMP_CASTET,
		PID_FIRE_CASTET,
		PID_KNIFE,
		PID_KNIFE_P,
		PID_REVFIST1,
		PID_REVKNIFE1,
		PID_REVKNIFE2,
		PID_COMBAT_KNIFE,
		PID_CKNIFE_P,
		PID_LIL_JESUS_WEAPON,
		PID_SWITCHBLADE,
		PID_SCISSORS,
		PID_RIPPER,
		PID_CUTTHROAT,
		PID_WAKIZASHI_BLADE,
		PID_SPEAR,
		PID_SHARP_SPEAR,
		PID_SPEAK_P,
		PID_SHARPENED_POLE,
		PID_REVCLUB1,
		PID_IRON_PROD,
		PID_GOLF_CLUB,
		PID_WOOD_PLANK,
		PID_WATER_TUBE,
		PID_CLUB,
		PID_CROWBAR,
		PID_WRENCH,
		PID_SLEDGEHAMMER,
		PID_LOUISVILLE_SLUGGER,
		PID_SUPER_SLEDGE,
		PID_CATTLE_PROD,
		PID_SUPER_CATTLE_PROD,
		PID_CHAIN,
		PID_BOXING_GLOVES,
		PID_PLATED_BOXING_GLOVES,
		PID_RING_BOXING_GLOVES,
		PID_RING_PLATED_BOXING_GLOVES,
		PID_BRASS_KNUCKLES,
		PID_SPIKED_KNUCKLES,
		PID_POWER_FIST,
		PID_MEGA_POWER_FIST
	}, 
	{	//Стрелковое
	    PID_ZIP_GUN,
		PID_IMPROVED_BAZOOKA,
		PID_rflshort,
		PID_bzkarmy,
		PID_bzkemi,
		PID_bzksnr,
		PID_bzkzip,
		PID_bgturrfl,
		PID_dminigun,
		PID_mnghevy,
		PID_mngturet,
		PID_mngurgan,
		PID_bgflame1,
		PID_bgflame2,
		PID_bgflame3,
		PID_mngheat,
		PID_bglaw,
		PID_bgbaraka,
		PID_bgsupprt,
		PID_sawgun,
		PID_ZIPFLAMR,
		PID_sniperps,
		PID_rfllilit,
		PID_laserApo,
		PID_lasergnCold,
		PID_solargun,
		PID_bgslr3,
		PID_bgslr4,
		PID_lightsupold,
		PID_smgplsma,
		PID_plasmar,
		PID_bgplasma,
		PID_plasmac,
		PID_plsmprot,
		PID_raygun,
		PID_vibrator,	
		PID_FMINAB,
		PID_rflpoket,
		PID_rflshot4,
		PID_rflshotr,
		PID_rflwild,
		PID_rflhunt1,
		PID_rflhunt2,
		PID_rflnail,
		PID_rflpnev1,
		PID_rflpnev2,
		PID_rflrprd2,
		PID_rflscop,
		PID_rflscop3,
		PID_rflnscop,
		PID_krisssmg,
		PID_rflrain,
		PID_rflrpair,
		PID_rflhrdnr,
		PID_smgfilip,
		PID_smghkmgz,
		PID_smghkscp,
		PID_smghlmut,
		PID_smgkrikt,
		PID_smgvndt1,
		PID_wpbrtta,
		PID_smggetto,
		PID_rflcivil,
		PID_rfldrum,
		PID_rfljackl,
		PID_rflklh,
		PID_rfln17a1,
		PID_rflnscop,
		PID_rflrain,
		PID_rflrpair,
		PID_Detectiv,
		PID_FMINAA,
		PID_pstair1,
		PID_pstair2,
		PID_pstcolt1,
		PID_pstdtctv,
		PID_pstglok1,
		PID_pstglok2,
		PID_pstjackl,
		PID_pstlugr,
		PID_pstosa,
		PID_pstrepar,
		PID_pstrpair,
		PID_pstscope,
		PID_pstsignl,
		PID_pstsl9,
		PID_pstslugr,
		PID_psttrnkv,
		PID_REZX,
		PID_rfl40mm1,
		PID_rfl40mm2,
		PID_rflfobos,
		PID_smgsl1,
		PID_SAVAGE,
		PID_LASER_POLICE,
		PID_COLT2,
		PID_DEAGLE_SCOPE,
		PID_DEAGLE_GOLD,
		PID_IPOLICE,
		PID_DUTEN,
		PID_LUCKY_PISTOL,
		PID_IMPROVED_SAVAGE,
		PID_OLD_REVOLVER,
		PID_OLD_LASER,
		PID_10MM_PISTOL_80,
		PID_10MM_PISTOL_FONARIK,
		PID_WINCHESTER_PISTOL,
		PID_10MM_GIFT,
		PID_BACKPACK_FLAMER,
		PID_OLD_MINIGUN,
		PID_GAUSS_PPK5,
		PID_M2041,
		PID_VINT_PP,
		PID_MACHINGU_N_223,
		PID_M16K,
		PID_GENRIS_RIFLE,
		PID_10MM_PISTOL_MAGAZIN,
		PID_STARIY_OBREZ,
		PID_HUNTING_RIFLE2,
		PID_VARMINT,
		PID_MAUSER02,
		PID_POMPA,
		PID_MAUSER01,
		PID_UDM42,
		PID_STRIKER,
		PID_9MM_PP,
		PID_PHOTON_PISTOL,
		PID_GRANDM1,
		PID_REVOLVER_LOW,
		PID_PISTOL_LOW,
		PID_SHOTPISTOL_LOW,
		PID_SMOKE_GUN_LOW,
		PID_9MM_MAUSER,
		PID_10MM_PISTOL,
		PID_14MM_PISTOL,
		PID_DESERT_EAGLE,
		PID_DESERT_EAGLE_EXT_MAG,
		PID_223_PISTOL,
		PID_44_MAGNUM_REVOLVER,
		PID_44_MAGNUM_SPEEDLOADER,
		PID_NEEDLER_PISTOL,
		PID_PK12_GAUSS_PISTOL,
		PID_ONEHAND_ROCKET_LAUNCHER,
		PID_FLARE_GUN,
		PID_ANACONDA,
		PID_COLT,
		PID_SPRINGER_RIFLE,
		PID_SPEARTHROWER1,
		PID_REV_RIFLE_LOW,
		PID_GECKO_LOW,
		PID_AUTOGUN_LOW,
		PID_SNIPER_GUN_LOW,
		PID_LOW_SNIPER2,
		PID_LOW_SNIPER3,
		PID_DOUBLE_RIFLE,
		PID_HUNTING_RIFLE,
		PID_SCOPED_HUNTING_RIFLE,
		PID_ASSAULT_RIFLE,
		PID_ASSAULT_RIFLE_EXT_MAG,
		PID_SNIPER_RIFLE,
		PID_FN_FAL,
		PID_FN_FAL_NIGHT_SCOPE,
		PID_FN_FAL_HPFA,
		PID_RED_RYDER_BB_GUN,
		PID_RED_RYDER_LE_BB_GUN,
		PID_JONNY_BB_GUN,
		PID_INDEPENDENT,
		PID_M72_GAUSS_RIFLE,
		PID_QUADRO_SHOTGUN,
		PID_SHOTGUN,
		PID_SAWED_OFF_SHOTGUN,
		PID_COMBAT_SHOTGUN,
		PID_HK_CAWS,
		PID_PANCOR_JACKHAMMER,
		PID_REMINGTON,
		PID_10MM_SMG,
		PID_HK_P90C,
		PID_TOMMY_GUN,
		PID_HK_G11,
		PID_HK_G11E,
		PID_GREASE_GUN,
		PID_MAUSER_SMG,
		PID_DRUM_GUN_LOW,
		PID_SPEARTHROWER2,
		PID_SAWGUN_LOW,
		PID_BIGGUN_LOW,
		PID_14mm_BIGGUN2_LOW,
		PID_3GUN_LOW,
		PID_GATLING_LOW,
		PID_FLAMER,
		PID_IMPROVED_FLAMETHROWER,
		PID_ROCKET_LAUNCHER,
		PID_MINIGUN,
		PID_AVENGER_MINIGUN,
		PID_VINDICATOR_MINIGUN,
		PID_BOZAR,
		PID_LIGHT_SUPPORT_WEAPON,
		PID_M60,
		PID_SOUND_BLASTER,
		PID_GRENADELAUNCHER,
		PID_LASER_PISTOL_LOW,
		PID_LASER_PISTOL_LOW2,
		PID_LASER_PISTOL,
		PID_MAGNETO_LASER_PISTOL,
		PID_SOLAR_SCORCHER,
		PID_LASER_RIFLE,
		PID_LASER_RIFLE_EXT_CAP,
		PID_GATLING_LASER,
		PID_GATLING_LASER,
		PID_ALIEN_LASER_PISTOL,
		PID_LASER_RIFLE_LOW,
		PID_PLASMA_SMG_LOW,
		PID_PLASMA_SMG_LOW2,
		PID_PLASMA_PISTOL,
		PID_PLASMA_PISTOL_EXT_CART,
		PID_TURBO_PLASMA_RIFLE,
		PID_PLASMA_PISTOL_LOW,
		PID_YK32_PULSE_PISTOL,
		PID_YK42B_PULSE_RIFLE,
		PID_SUN,
		PID_SUN2,
		PID_SUN3,
		PID_KIRE,
		PID_M41A,
		PID_RPGUN1,
		PID_RPGUN2,
		PID_RPGUN3
	},
	{	//Аммуниция + Метательное
		PID_PLANT_SPIKE,
		PID_FARGRAF,
		PID_capcan,
		PID_FONMINE,
		PID_head01,
		PID_head02,
		PID_iteltrdr,
		PID_itextrdr,
		PID_itmina,
		PID_Scaner,
		PID_VTB,
		PID_FM67,
		PID_grnemi,
		PID_grnfire,
		PID_grnhome,
		PID_grnmltr1,
		PID_grnmltr2,
		PID_grnmltv,
		PID_metgremi,
		PID_metgrnd3,
		PID_metgrnd4,
		PID_methndgr,
		PID_metnozh1,
		PID_metnozh2,
		PID_metfreza,
		PID_metrock,
		PID_metshar1,
		PID_FARTEFCT,
		PID_DYNAMITE2,
		PID_GUNPOWDER_GRENADE,
		PID_ROCK,
		PID_GOLD_NUGGET,
		PID_URANIUM_ORE,
		PID_REFINED_ORE,
		PID_BALL,
		PID_FLARE,
		PID_ACTIVE_FLARE,
		PID_BOOMERANG_LOW,
		PID_THROWING_KNIFE,
		PID_MKNIFE_P,
		PID_REV_BALL1,
		PID_REV_BALL2,
		PID_MOLOTOV_COCKTAIL,
		PID_FRAG_GRENADE,
		PID_PLASMA_GRENADE,
		PID_HOLY_HAND_GRENADE,
		PID_PULSE_GRENADE,
		PID_FLASH_GRENADE,
		PID_MINE,
		PID_DYNAMITE,
		PID_PLASTIC_EXPLOSIVES,
		PID_DARTS_LOW,
		PID_10mm_LOW,
		PID_10MM_AP,
		PID_10MM_AP,
		PID_10MM_JHP,
		PID_044mag_LOW,
		PID_44_MAGNUM_JHP,
		PID_44_FMJ_MAGNUM,
		PID_45_CALIBER_AMMO,
		PID_223_LOW,
		PID_223_FMJ,
		PID_12g_LOW,
		PID_SHOTGUN_SHELLS,
		PID_5MM_JHP,
		PID_5MM_AP,
		PID_14mm_LOW,
		PID_14MM_AP,
		PID_7_62MM_AMMO,
		PID_BBS,
		PID_9MM_AMMO,
		PID_9MM_AMMO,
		PID_9MM_BALL,
		PID_FLAMETHROWER_FUEL,
		PID_FLAMETHROWER_FUEL_MK_II,
		PID_GRENADELAUNCHER_AMMO,
		PID_EXPLOSIVE_ROCKET,
		PID_ROCKET_AP,
		PID_CUENCELL_LOW,
		PID_SMALL_ENERGY_CELL,
		PID_MICRO_FUSION_CELL,
		PID_4_7MM_CASELESS,
		PID_HN_NEEDLER_CARTRIDGE,
		PID_HN_AP_NEEDLER_CARTRIDGE,
		PID_NEED_CART_POISON,
		PID_NEED_CART_NT,
		PID_2MM_EC_AMMO,
		PID_FLARE_GUN_AMMO,
		PID_HOWITZER_SHELL
	},
	{	//Инструменты
		PID_LAMPA,
		PID_ROCK,
		PID_medrout,
		PID_HYPO04,
		PID_repkit1i,
		PID_repkit2i,
		PID_repkit3i,
		PID_plkclef2,
		PID_knflaser,
		PID_itnitki1,	
		PID_FLINT,
		PID_FLARE,
		PID_REVFIST1,
		PID_KNIFE,
		PID_COMBAT_KNIFE,
		PID_SCISSORS,
		PID_CUTTHROAT,
		PID_SHIV,
		PID_ROPE,
		PID_CROWBAR,
		PID_WRENCH,
		PID_AXE,
		PID_SHOVEL,
		PID_PICKAXE,
		PID_SLEDGEHAMMER,
		PID_SUPER_SLEDGE,
		PID_DRILL,
		PID_RADIO,
		PID_LIGHTER,
		PID_OIL_CAN,
		PID_RESPIRATOR,
		PID_MULTI_TOOL,
		PID_WELDING,
		PID_SUPER_TOOL_KIT,
		PID_LOCKER_LOW,
		PID_LOCKER_MED,
		PID_LOCKER_HARD,
		PID_DEFIB,
		PID_ROD,
		PID_HOOK,
		PID_STRING,
		PID_LOCKPICKS,
		PID_EXP_LOCKPICK_SET,
		PID_ELECTRONIC_LOCKPICKS,
		PID_ELEC_LOCKPICK_MKII,
		PID_FIRST_AID_KIT,
		PID_FIELD_MEDIC_KIT,
		PID_DOCTORS_BAG,
		PID_PARAMEDICS_BAG,
		PID_MEDICAL_SUPPLIES,
		PID_GEIGER_COUNTER,
		PID_STEALTH_BOY,
		PID_MOTION_SENSOR,
		PID_BIG_BOOK_OF_SCIENCE,
		PID_DEANS_ELECTRONICS,
		PID_FIRST_AID_BOOK,
		PID_SCOUT_HANDBOOK,
		PID_GUNS_AND_BULLETS,
		PID_TECHNICAL_MANUAL,
		PID_CHEMISTRY_MANUAL,
		PID_Svarka,
		PID_FSCALPL,
		PID_itscrew1,
		PID_ittool02,
		PID_plkclef1,
		PID_plkmltk1,
		PID_CATS_PAW_ISSUE_5
	},
	{	//Броня
		PID_FIRE_ARMOR,
		PID_JUMPSUIT,
		PID_VEST_MK1,
		PID_armltfuk,
		PID_armltsct,
		PID_armltr,
		PID_arbsbl1,
		PID_ARMFIRE,
		PID_ArmorGaz,
		PID_arlthr1,
		PID_arlthr2,
		PID_FZZZ1,
		PID_FZZZ2,
		PID_arbsbl2,
		PID_arhokkey,
		PID_armetal,
		PID_armltcmb,
		PID_aras2k1,
		PID_aras2k2,
		PID_arbattl1,
		PID_ardfnder,
		PID_arekzo,
		PID_arkirasa,
		PID_POLICE_ARMOR,
		PID_BIKER_JACKET,
		PID_OLD_JACKET,
		PID_CARAVAN_MASTER_JACKET,
		PID_ANTIRAD_COSTUME,
		PID_IMPROVED_JACKET,
		PID_PERSONAL_JACKET,
		PID_LEATHER_ARMOR_MK_III,
		PID_IMPROVED_METAL_ARMOR_MK_II,
		PID_ZERKALO_METAL_ARMOR_MK_II,
		PID_METAL_ARMOR_MK_III,
		PID_POKRISHKA_ARMOR,
		PID_VEST_MK2,
		PID_POWERED_ARMOR_NEVADA,
		PID_FAKE_JUMPSUIT,
		PID_SANDROBE,
		PID_BLACK_ROBE,
		PID_PURPLE_ROBE,
		PID_KEEPBRIGE_ROBE,
		PID_LEATHER_JACKET,
		PID_CURED_LEATHER_ARMOR,
		PID_CURED_LEATHER_ARMOR_MK_II,
		PID_MANTIS_ARMOUR,
		PID_LEATHER_ARMOR,
		PID_LEATHER_ARMOR_MK_II,
		PID_LEATHER_ARMOR_MK_III,
		PID_METAL_ARMOR,
		PID_METAL_ARMOR_MK_II,
		PID_TESLA_ARMOR,
		PID_MIRELURK_ARMOR,
		PID_POLICE_ARMOR,
		PID_COMBAT_ARMOR,
		PID_COMBAT_ARMOR_MK_II,
		PID_BROTHERHOOD_COMBAT_ARMOR,
		PID_BLACK_COMBAT_ARMOR,
		PID_CASER,
		PID_CADES,
		PID_CARED,
		PID_EKZO,
		PID_EKZO_2,
		PID_EKZO_3,
		PID_POWERED_ARMOR,
		PID_HARDENED_POWER_ARMOR,
		PID_ADVANCED_POWER_ARMOR,
		PID_ADVANCED_POWER_ARMOR_MK2
	},
	{	//Вещества + Пища
		PID_HEALING_POWDER,
		PID_medpdot,
		PID_ULTRA_ANTIDOTE,
		PID_ANTISMOKE,
		PID_UHOD,
		PID_BEER2,
		PID_CLEAN_WATER2,
		PID_COMBAT_STIMPACK,
		PID_PRAH,
		PID_CARAMEL2,
		PID_PREWARWISKEY,
		PID_VOKAS,
		PID_CONOVAL,
		PID_MENTATS_FRUIT,
		PID_medwhsk,
		PID_MANTIS_FOOD,
		PID_RUTBEER,
		PID_lavshtin,
		PID_SANDWICH,
		PID_RAD_COLA,
		PID_BLOOD_MARY,
		PID_TURBO_COLA,
		PID_FORSAGE_GUM,
		PID_PAINKILLERS2,
		PID_PIZZA,
		PID_GRASS,
		PID_NUKA_CHERRY,
		PID_COLA_ROTTEN,
		PID_PASLEN,
		PID_medspup,
		PID_OREHOVIYRASTVOR,
		PID_POTROHA_SPICED,
		PID_AMTH_CORPSE,
		PID_BEER_ROTTEN,
		PID_COTLETY,
		PID_ATOMIC_COCTAIL,
		PID_STIMPAK,
		PID_SUPER_STIMPAK,
		PID_HYPO,
		PID_BIO_GEL,
		PID_RAD_X,
		PID_RADAWAY,
		PID_ANTIDOTE,
		PID_HEART_PILLS,
		PID_PILLS,
		PID_JET_ANTIDOTE,
		PID_BANDAGE,
		PID_ANTISEPTIC,
		PID_ANESTETIC,
		PID_MEDCLIP,
		PID_MEDSPLINT,
		PID_MEDTHREAD,
		PID_MEDNEEDLE,
		PID_ANTIDOTE_2,
		PID_HYPO_BLOOD,
		PID_HYPO_POISON,
		PID_MUTAGENIC_SYRUM,
		PID_MENTATS,
		PID_BUFFOUT,
		PID_PSYCHO,
		PID_JET,
		PID_KOSYAK,
		PID_BEER,
		PID_BOOZE,
		PID_BOTTLE_FULL,
		PID_GLASS_BOTTLE_FULL,
		PID_GAMMA_GULP_BEER,
		PID_ROENTGEN_RUM,
		PID_ROT_GUT,
		PID_NUKA_COLA,
		PID_CIGARETTES,
		PID_MUTATED_FRUIT,
		PID_IGUANA_ON_A_STICK,
		PID_MEAT_ON_A_STICK,
		PID_MEAT_JERKY,
		PID_COOKIE,
		PID_MEAT,
		PID_BOX_OF_NOODLES,
		PID_FROZEN_DINNER,
		PID_CHEEZY_POOFS,
		PID_SMITTY_MEAL,
		PID_ALGAE,
		PID_FISH_SMALLEST,
		PID_FISH_SMALL,
		PID_FISH,
		PID_FISH_BIG,
		PID_FISH_BIGGEST,
		PID_PLANT_RADCVET,
		PID_RAD_MEAT,
		PID_RAT_MEAT,
		PID_GECKO_MEAT,
		PID_COOKED_MEAT,
		PID_COOKED_RAT_MEAT,
		PID_COOKED_GECKO_MEAT,
		PID_COOKED_FISH,
		PID_FLAPJACK,
		//PID_FLOUR, //Такого пида нет, пиздёж!
		PID_COOKED_MOLERAT_STOMATCH,
		PID_SALAD,
		PID_CABBAGE,
		PID_CORN,
		PID_RAGOUT,
		PID_MUSH_GREEN,
		PID_sugar,
		PID_PIROG,
		PID_MELASSA,
		PID_KAIF,
		PID_FPSHL9,
		PID_FPSHL7,
		PID_essence,
		PID_energtik,
		PID_EGGGECKO,
		PID_DinkiDa,
		PID_humnmeat,
		PID_itcandy,
		PID_MOLERAT_STOMATCH
	},
	{	//Ценности
		PID_HOLODISK,
		PID_PIP_BOY_ANALIZATOR,
		PID_BLUE_PASS_KEY,
		PID_HANDCUFFS,
		PID_SKIN_CHANGER,
		PID_BOTTLE_CAPS,
		PID_REAL_BOTTLE_CAPS,
		PID_GOLD_NUGGET,
		PID_GOLDEN_BAR,
		PID_GOLDEN_JEWELRY,
		PID_GOLDEN_COIN,
		PID_MORNING_STAR_MINE,
		PID_KOKOWEEF_MINE_SCRIP,
		PID_DOLL,
		PID_RANGER_MAP,
		PID_RAIDERS_MAP,
		PID_MAP,
		PID_SPECTACLES,
		PID_MIRROR_SHADES,
		PID_MOTOGLES,
		PID_BRIEFCASE,
		PID_MOORE_BAD_BRIEFCASE,
		PID_MOORE_GOOD_BRIEFCASE,
		PID_RAMIREZ_BOX_CLOSED,
		PID_FAKE_GECK,
		PID_BAROMETR,
		PID_COMPAS,
		PID_DOSIMETR,
		PID_VIC_RADIO,
		PID_RADIO,
		PID_PACKAGE,
		PID_PACKAGE_CHEK,
		PID_KLESH,
		PID_GUARD_BADGE,
		PID_HUNT,
		PID_SHER_BADGE,
		PID_SHERIFF_BADGE,
		PID_KHAN_BADGE,
		PID_MERCS_SIGN,
		PID_MERCS_SIGN2,
		PID_RANGER_PIN,
		PID_FUZZY_PAINTING,
		PID_PHOTO,
		PID_INFOPAD,
		PID_GOLD_LOCKET,
		PID_ANNA_GOLD_LOCKET,
		PID_CORNELIUS_GOLD_WATCH,
		PID_NECKLACE,
		PID_OZHER,
		PID_TALISMAN,
		PID_OCTOGLOBE,
		PID_TAPE_RECORDER,
		PID_VIC_WATER_FLASK,
		PID_WATER_FLASK,
		PID_DANTON_POISON,
		PID_OXYGEN_TANK,
		PID_POISON_TANK,
		PID_SMALL_STATUETTE,
		PID_URN,
		PID_TROPHY_OF_RECOGNITION,
		PID_MAGIC_8_BALL,
		PID_DAISIES,
		PID_RUBBER_BOOTS,
		PID_INACTIVECOLLAR,
		PID_BALL_GAG,
		PID_BLUE_CONDOM,
		PID_GREEN_CONDOM,
		PID_RED_CONDOM,
		PID_COSMETIC_CASE,
		PID_DICE,
		PID_LOADED_DICE,
		PID_DECK_OF_CARDS,
		PID_MARKED_DECK_OF_CARDS,
		PID_DECK_OF_TRAGIC_CARDS,
		PID_CATS_PAW,
		PID_ACCOUNT_BOOK,
		PID_BECKY_BOOK,
		PID_HUBOLOGIST_BOOK,
		PID_SAMURAI_MAG,
		PID_SCIENCE_MAG,
		PID_BOOK1,
		PID_RPSTUFF1,
		PID_RPSTUFF2,
		PID_RPSTUFF3,
		PID_RPSTUFF4,
		PID_DOG_TAGS,
		PID_BLACK_COC_BADGE,
		PID_RED_COC_BADGE,
		PID_MODOC_DOCUMENTS,
		//PID_MODOC_PASS, //Такого объекта нет!
		// PID_MODOC_DAY_PASS, //Такого объекта нет!
		PID_DAY_PASS,
		PID_FAKE_CITIZENSHIP,
		PID_PRESIDENTIAL_PASS,
		PID_STABLES_ID_BADGE,
		PID_SLAG_MESSAGE,
		PID_PART_REQUISITION_FORM,
		PID_CLIPBOARD,
		PID_ELRON_FIELD_REP,
		PID_ENLIGHTENED_ONE_LETTER,
		PID_MEMO,
		PID_POSTMAN_LETTER,
		PID_FLUTE,
		PID_MAG_LENTA,
		PID_ELECTRONIC_BUG,
		PID_ENERGY_BARIER_ACCESS_CARD,
		PID_ACCESS_CARD,
		PID_SECURITY_CARD,
		PID_YELLOW_REACTOR_KEYCARD,
		PID_RED_REACTOR_KEYCARD,
		PID_V15_KEYCARD,
		PID_VAULT_13_SHACK_KEY,
		PID_PRES_ACCESS_KEY,
		PID_TANKER_FOB,
		PID_RED_PASS_KEY,
		PID_NUKE_KEY,
		PID_YELLOW_PASS_KEY,
		PID_TEMPLE_KEY,
		PID_SUNC,
		PID_PSYCHIC_NULLIFIER,
		PID_MICROCHIP,
		PID_MEM_CHIP_BLUE,
		PID_MEM_CHIP_GREEN,
		PID_MEM_CHIP_RED,
		PID_MEM_CHIP_YELLOW,
		PID_DERMAL_PIP_BOY_DISK,
		PID_PIP_BOY_MEDICAL_ENHANCER,
		PID_CYBERNETIC_BRAIN,
		PID_TANGLERS_HAND,
		PID_GOLD_TOOTH,
		PID_DIXON_EYE,
		PID_CLIFTON_EYE,
		PID_PLAYERS_EAR,
		PID_MASTICATORS_EAR,
		PID_DR_HENRY_PAPERS,
		PID_VERTIBIRD_PLANS,
		PID_CAT,
		PID_porno,
		PID_ColaFish,
		PID_COMICS,
		PID_DlznsChk,
		PID_DARTS,
		PID_ENCODER,
		PID_engmovm,
		PID_FELKEY,
		PID_FILTR,
		PID_FINGER,
		PID_fishkaA,
		PID_fishkaB,
		PID_fishkaC,
		PID_fishkaD,
		PID_fishkaE,
		PID_FLASKB,
		PID_FLIST08,
		PID_FLIST09,
		PID_FLocks,
		PID_fotoBnd,
		PID_fotogrf,
		PID_FPSHL6,
		PID_FSLVShk,
		PID_GLASS,
		PID_HYPO02,
		PID_itmoney,
		PID_itsoap01,
		PID_itstopka,
		PID_ittmpon1,
		PID_KEIS,
		PID_KEY2,
		PID_key6,
		PID_KeyDumba,
		PID_KeyWind,
		PID_LETTER,
		PID_LPASS,
		PID_MANYVOR,
		PID_MapSolt,
		PID_MEMORY,
		PID_mgzn01,
		PID_MilkBrhm,
		PID_pelt3,
		PID_PIPBOY,
		PID_plkligt1,
		PID_PorpSigr,
		PID_PORTMONE,
		PID_PRES_KEY,
		PID_strbox,
		PID_STRING,
		PID_StrpBlt,
		PID_tross,
		PID_DANTOS,
		PID_TRUBA
	},
	{	//Расходники
		PID_SAND,
		PID_blstrBM,
		PID_medbrin,
		PID_medlarm,
		PID_medrest,
		PID_medstrn,
		PID_svirus,
		PID_FZZZ4,
		PID_VTE,
		PID_VTD,
		PID_VTC,
		PID_VTA,
		PID_vodzapch,
		PID_voddet3,
		PID_voddet2,
		PID_voddet1,
		PID_termit,
		PID_setC,
		PID_setB,
		PID_servoeng,
		PID_plkpipe1,
		PID_motorok,
		PID_motorbr,
		PID_MOTOR,
		PID_jckldrum,
		PID_itlckrl1,
		PID_itbltnut,
		PID_itbarrei,
		PID_gilza,
		PID_FVOKAS2,
		PID_FPRESS,
		PID_FPASLNC,
		PID_FPASLNB,
		PID_Emulgat,
		PID_DAMAG,
		PID_COMPUTER,
		PID_CENTRF,
		PID_CARTNT,
		PID_CARSLR,
		PID_CABEL,
		PID_ROCK,
		PID_FLINT,
		PID_METAL_ORE,
		PID_LEAD_ORE,
		PID_MINERAL,
		PID_GOLD_NUGGET,
		PID_URANIUM_ORE,
		PID_REFINED_ORE,
		PID_ROCK_BLOCK,
		PID_BRICK,
		PID_WOOD_PLANK,
		PID_WOOD_PLANK2,
		PID_IRON_PROD,
		PID_WATER_TUBE,
		PID_PLANK,
		PID_CHAIN,
		PID_GLASS_BAR,
		PID_GLASS,
		PID_LINZA,
		PID_MIRROR,
		PID_FLARE,
		PID_KLK,
		PID_PLANT_SPIKE,
		PID_PART_OF_ROPE,
		PID_ROPE,
		PID_SANDBAG_EMPTY,
		PID_FLOWER,
		PID_BROC_FLOWER,
		PID_XANDER_ROOT,
		PID_FIREWOOD,
		PID_MANTIS_SHELL,
		PID_MIRELUK_SHELL,
		PID_MUTATED_GLAND,
		PID_RADSCORPION_PARTS,
		PID_SCORPION_TAIL,
		PID_CRAFT_L_LINT,
		PID_CRAFT_L_RAGS,
		PID_CRAFT_L_HIDE,
		PID_MOUSE_SKIN,
		PID_GECKO_PELT,
		PID_GOLDEN_GECKO_PELT,
		PID_FIRE_GECKO_PELT,
		PID_BRAHMIN_SKIN,
		PID_BOTTLE_EMPTY,
		PID_BOTTLE_GLASS,
		PID_HYPODERMIC_NEEDLE,
		PID_EMPTY_JET,
		PID_CHEMICALS,
		PID_GUNPOWDER,
		PID_NITROGLYCERIN,
		PID_HEXOGEN,
		PID_PLASTIC_EXPLOSIVES_DULL,
		PID_TNT,
		PID_TUBE,
		PID_SHORT_TUBE,
		PID_CRAFT_E_LAMP,
		PID_CRAFT_E_PART,
		PID_CRAFT_E_CHIP,
		PID_CRAFT_M_JUNK,
		PID_CRAFT_M_BARS,
		PID_CRAFT_M_STEL,
		PID_RAD_LOW,
		PID_IRON_PLATE,
		PID_IRON_PLATE,
		PID_IRON_DETALS,
		PID_IRON_BAR,
		PID_PB_PLATE,
		PID_PB_FOR_AMMO,
		PID_WOOD_PART,
		PID_PERED_MEH,
		PID_SOED_MEH,
		PID_OHLAD_MEH,
		PID_DETAL_MEH,
		PID_EMKOCT_MEH,
		PID_HLAM_MEH,
		PID_HLAM2_MEH,
		PID_BANKA_MEH,
		PID_SPIKE_MEH,
		PID_ELECTO_MEH,
		PID_DVIGAT_MEH,
		PID_METAL_LIST_MEH,
		PID_REVOLVER_PART,
		PID_MOTOR,
		PID_MOTIVATOR,
		PID_PLASMA_TRANSFORMER,
		PID_MINE_PART,
		PID_EXPLOSIVE_SWITCH,
		PID_EXCAVATOR_CHIP,
		PID_NAVCOM_PARTS,
		PID_ROBOT_PARTS,
		PID_HY_MAG_PART,
		PID_CAR_FUEL_CELL_CONTROLLER,
		PID_CAR_FUEL_INJECTION,
		PID_ROBOT_MOTIVATOR,
		PID_K9_MOTIVATOR,
		PID_prdhrntl,
		PID_itrvlvbr,
		PID_itgall01,
		PID_FSHMPN,
		PID_drova,
		PID_Bankes,
		PID_WELDING_USED
	},
	{	//Хлам
		PID_H_CLAW,
		//PID_MUTARIJUANA, //Нету травки, увы. Нас наебали.
		PID_DECOMPOSING_BODY,
		PID_SHIT_BIG,
		PID_SHIT_SMALL,
		PID_MR_NIXON_DOLL,
		PID_BLOW_UP_DOLL,
		PID_POPPED_BLOW_UP_DOLL,
		PID_itplate3,
		PID_itplate2,
		PID_GAME,
		PID_SANDBAG_1
	}
};
void CheckItems( Item& cont, uint type )
{
	if( type >= itemlist.length() || !valid(cont) ) return;
	
	Item@[] allitems;
	cont.GetItems( -1, allitems );
	for( uint i = 0; i < allitems.length(); i++ )
		if( valid(allitems[i]) && itemlist[type].find( allitems[i].GetProtoId() ) == -1 ) DeleteItem( allitems[i] );

	for( int i = itemlist[type].length() - 1; i >= 0; i-- )
	{
		Item@ myitem = cont.GetItem( itemlist[type][i], 0 );
		if( !valid( myitem ) )
			@ myitem = cont.AddItem( itemlist[type][i], 1, 0 );
		if( valid(myitem) && myitem.IsStackable() && myitem.GetCount() < 500 ) 
			cont.AddItem( itemlist[type][i], 500 - myitem.GetCount(), 0 );
		if( !valid(myitem) ) Log( "Proto [" + itemlist[type][i] + "] does not exists." );
	}
}

void answer_StartAdventureGM_talk_STATS( Critter& player, uint answerI, string& answerS )
{
    if( player is null )
        return;
    if( answerI == 1 )
    {
	}
    if( answerI == 3 )
    {
		string[] data = { "answer_StartAdventureGM_talk", "Выберите опцию:", "SKILLS", "Склад", "Описание", "Подтвердить" };
		DIALOG_MENU( player, data );
    }
}

void ask_StartAdventureGM_talk_STATS_SPECIAL( Critter& player, uint answerI, string& answerS )
{
    int parameter = player.Stat[ ST_VAR1 ];
    if( !valid( player ) )
        return;
    if( answerS.length() > 0 )
    {
        int number = 0;
        StrToInt( answerS, number );
        if( parameter >= 0 && parameter <= 6 )
        {
            if( number > 10 || number < 1 )
                player.Say( SAY_NETMSG, "недопустимое значение" );
            else if( player.ParamBase[ ST_VAR6 ] - number + player.ParamBase[ parameter ] < 0 )
                player.Say( SAY_NETMSG, "недоcтаточно очков" );
            else
            {
                player.ParamBase[ ST_VAR6 ] -= number - player.ParamBase[ parameter ];
                player.ParamBase[ parameter ] = number;
                player.Say( SAY_NETMSG, "вы изменили параметр" );
            }
        }
        if( parameter >= 200 && parameter <= 217 )
        {
            if( number > 300 )
                player.Say( SAY_NETMSG, "недопустимое значение" );
            else if( number < 30 )
                player.Say( SAY_NETMSG, "нельзя указывать значение навыка меньше 30" );
            else if( player.ParamBase[ ST_VAR7 ] - number + player.ParamBase[ parameter ] < 0 )
                player.Say( SAY_NETMSG, "недоcтаточно очков навыков" );
            else
            {
                player.ParamBase[ ST_VAR7 ] -= number - player.ParamBase[ parameter ];
                player.ParamBase[ parameter ] = number;
                player.Say( SAY_NETMSG, "вы изменили параметр" );
            }
        }
        if( parameter == 3 && player.ParamBase[ parameter ] <= 3 )
        {
            player.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_talk_STATS_SPECIAL_POWERBUILD" );
            player.Say( SAY_DIALOGBOX_TEXT, "к персонажам с низкой харизмой другие игроки относятся с неприязнью, убедитесь что это соответствует роли" );
            player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "к параметрам" );
        }
        else if( parameter >= 0 && parameter <= 6 && ( player.ParamBase[ parameter ] >= 9 || player.ParamBase[ parameter ] <= 2 ) )
        {
            player.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_talk_POWERBUILD" );
            player.Say( SAY_DIALOGBOX_TEXT, "значение параметра граничное, убедитесь что это важно по роли, иначе активация маловероятна" );
            player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "к параметрам" );
        }
        else if( parameter == 211 && player.ParamBase[ parameter ] >= 50 )
        {
            player.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_talk_POWERBUILD" );
            player.Say( SAY_DIALOGBOX_TEXT, "навык ловушек больше 50, убедитесь что по роли вам это необходимо и история персонажа соответствует, иначе активация маловероятна" );
            player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "к параметрам" );
        }
        else if( parameter == 210 && player.ParamBase[ parameter ] >= 50 )
        {
            player.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_talk_POWERBUILD" );
            player.Say( SAY_DIALOGBOX_TEXT, "воровство больше 50, убедитесь что по роли вам это необходимо и история персонажа соответствует, иначе активация маловероятна" );
            player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "к параметрам" );
        }
        else if( parameter == 209 && player.ParamBase[ parameter ] >= 50 )
        {
            player.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_talk_POWERBUILD" );
            player.Say( SAY_DIALOGBOX_TEXT, "взлом больше 50, допустим только для ролей преступников и детективов, убедитесь что персонаж соответствует, иначе активация маловероятна" );
            player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "к параметрам" );
        }
        else if( parameter == 212 && player.ParamBase[ parameter ] >= 80 )
        {
            player.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_talk_POWERBUILD" );
            player.Say( SAY_DIALOGBOX_TEXT, "значение науки больше 80, допустимо только для образованных персонажей, убедитесь что роль соответствует" );
            player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "к параметрам" );
        }
        else if( parameter == 213 && player.ParamBase[ parameter ] >= 80 )
        {
            player.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_talk_POWERBUILD" );
            player.Say( SAY_DIALOGBOX_TEXT, "значение ремонта больше 80, допустимо только для профильных персонажей, часто занимающихся техникой, убедитесь что роль соответствует" );
            player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "к параметрам" );
        }
        else if( parameter >= 200 && parameter <= 217 && player.ParamBase[ parameter ] >= 160 )
        {
            player.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartAdventureGM_talk_POWERBUILD" );
            player.Say( SAY_DIALOGBOX_TEXT, "значение навыка больше 160, допустимо только для узкоспециализированных в этой области персонажей, убедитесь что роль соответствует" );
            player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "к параметрам" );
        }
        else if( parameter >= 200 && parameter <= 217 )
        {
			string[] data = { "answer_StartAdventureGM_talk_STATS_SKILL", "Навыки игрока, осталось " + player.ParamBase[ ST_VAR7 ] + " очков навыков" };
			for( int i = 200; i < 218; i++ )
			{
				data.insertLast( "[" + player.ParamBase[ i ] + " " + stat_names[i - 200] );
			}
			DIALOG_MENU( player, data );
		}
    }
}

void answer_StartAdventureGM_talk_POWERBUILD( Critter& player, uint answerI, string& answerS )
{
	string[] data = { "answer_StartAdventureGM_talk_STATS_SKILL", "Навыки игрока, осталось " + player.ParamBase[ ST_VAR7 ] + " очков навыков" };
	for( int i = 200; i < 218; i++ )
	{
		data.insertLast( "[" + player.ParamBase[ i ] + " " + stat_names[i - 200] );
	}
	DIALOG_MENU( player, data );
}


void answer_StartAdventureGM_talk_STATS_SKILL( Critter& player, uint answerI, string& answerS )
{
	player.ParamBase[ ST_VAR1 ] = 200 + answerI;
	player.ShowScreen( SCREEN_SAY, 0, "map_start@ask_StartAdventureGM_talk_STATS_SPECIAL" );
	player.Say( SAY_SAY_TITLE, stat_names[answerI] );
}

void answer_StartAdventureGM_talk_STATS_SPECIAL( Critter& player, uint answerI, string& answerS )
{
    if( answerI == 0 )
    {
        player.ParamBase[ ST_VAR1 ] = 0;
        player.ShowScreen( SCREEN_SAY, 0, "map_start@ask_StartAdventureGM_talk_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "Сила" );
    }
    if( answerI == 1 )
    {
        player.ParamBase[ ST_VAR1 ] = 1;
        player.ShowScreen( SCREEN_SAY, 0, "map_start@ask_StartAdventureGM_talk_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "Восприятие" );
    }
    if( answerI == 2 )
    {
        player.ParamBase[ ST_VAR1 ] = 2;
        player.ShowScreen( SCREEN_SAY, 0, "map_start@ask_StartAdventureGM_talk_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "Выносливость" );
    }
    if( answerI == 3 )
    {
        player.ParamBase[ ST_VAR1 ] = 3;
        player.ShowScreen( SCREEN_SAY, 0, "map_start@ask_StartAdventureGM_talk_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "Харизма" );
    }
    if( answerI == 4 )
    {
        player.ParamBase[ ST_VAR1 ] = 4;
        player.ShowScreen( SCREEN_SAY, 0, "map_start@ask_StartAdventureGM_talk_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "Интеллект" );
    }
    if( answerI == 5 )
    {
        player.ParamBase[ ST_VAR1 ] = 5;
        player.ShowScreen( SCREEN_SAY, 0, "map_start@ask_StartAdventureGM_talk_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "Ловкость" );
    }
    if( answerI == 6 )
    {
        player.ParamBase[ ST_VAR1 ] = 6;
        player.ShowScreen( SCREEN_SAY, 0, "map_start@ask_StartAdventureGM_talk_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "Удача" );
    }
    if( answerI == 7 )
    {
        player.ShowScreen( SCREEN_DIALOGBOX, 3, "answer_StartAdventureGM_talk_STATS" );
        player.Say( SAY_DIALOGBOX_TEXT, "Параметры игрока" );
//        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "SPECIAL" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "SKILLS 0-9" );
        player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "SKILLS 10-20" );
        player.Say( SAY_DIALOGBOX_BUTTON( 3 ), "Назад" );
    }
}

void unsafe_Description( Critter& player, int skill, int p1, int p2, string@ message, int[] @ p4 )
{
    if( message.length() != 0 )
    {
        player.SetLexems( message );
		string[] data = { "answer_StartAdventureGM_talk", "Выберите опцию:", "SKILLS", "Склад", "Описание", "Подтвердить" };
		DIALOG_MENU( player, data );
    }
}

void answer_StartAdventureGM_talk_CONFIRM( Critter& player, uint answerI, string& answerS )
{
    if( player is null )
        return;
    if( answerI == 0 )
    {
        ShowInputBoxScreen( player, "map_start@unsafe_Kventa#Ссылка на квенту", 0, INPUTBOX_CLOSE_ON_ENTER );
    }
}

void unsafe_Kventa( Critter& player, int skill, int p1, int p2, string@ message, int[] @ p4 )
{
    if( message.length() != 0 )
    {
        Item@[] allitems;
        player.GetItems( -1, allitems );

        string date = TimeToString( player );
        string race = "";
        player.ParamBase[ ST_VAR8 ] = 1;
        if( player.ParamBase[ ST_BODY_TYPE ] == BT_GHOUL )
            race = "Гуль";
        else if( player.ParamBase[ ST_BODY_TYPE ] == BT_SUPER_MUTANT )
            race = "Супермутант";
        else
            race = "Человек";
        string   pass = "";
        GameVar@ citizenship = GetLocalVar( LVAR_modoc_citizenship, player.Id );
        if( citizenship.GetValue() == 0 )
            pass = "чужак";
        else if( citizenship.GetValue() == 11 )
            pass = "гость";
        else if( citizenship.GetValue() == 12 )
            pass = "гражданин";
        GameVar@ request = GetLocalVar( LVAR_requestStatus, player.Id );
        GameVar@ TotalPlayers = GetGlobalVar( GVAR_total_players ); // общее число персонажей
        if( TotalPlayers.GetValue() < player.Id )
            TotalPlayers.opAssign( player.Id );
        request.opAddAssign( 1 );
        file f;
        if( f.open( "adventurers\\" + player.Id + ".txt", "w" ) >= 0 )
        {
            f.writeString( request.GetValue() + "\n" +
                           race + "\n" +
                           date + "  -  " + pass + "\n" +
                           GetPlayerName( player.Id ) + "\n" +
                           message + "\n" +
                           player.ParamBase[ 0 ] + "\n" +
                           player.ParamBase[ 1 ] + "\n" +
                           player.ParamBase[ 2 ] + "\n" +
                           player.ParamBase[ 3 ] + "\n" +
                           player.ParamBase[ 4 ] + "\n" +
                           player.ParamBase[ 5 ] + "\n" +
                           player.ParamBase[ 6 ] + "\n" + "\n" +
                           player.ParamBase[ 200 ] + "\n" +
                           player.ParamBase[ 201 ] + "\n" +
                           player.ParamBase[ 202 ] + "\n" +
                           player.ParamBase[ 203 ] + "\n" +
                           player.ParamBase[ 204 ] + "\n" +
                           player.ParamBase[ 205 ] + "\n" +
                           player.ParamBase[ 206 ] + "\n" +
                           player.ParamBase[ 207 ] + "\n" +
                           player.ParamBase[ 208 ] + "\n" +
                           player.ParamBase[ 209 ] + "\n" +
                           player.ParamBase[ 210 ] + "\n" +
                           player.ParamBase[ 211 ] + "\n" +
                           player.ParamBase[ 212 ] + "\n" +
                           player.ParamBase[ 213 ] + "\n" +
                           player.ParamBase[ 214 ] + "\n" +
                           player.ParamBase[ 215 ] + "\n" +
                           player.ParamBase[ 216 ] + "\n" +
                           player.ParamBase[ 217 ] + "\n" + "\n" + "Инвентарь" + "\n" );

            Item@[] items;
            player.GetItems( SLOT_ARMOR, items );
            player.GetItems( SLOT_HAND1, items );
            player.GetItems( SLOT_HAND2, items );
            player.GetItems( SLOT_INV, items );
            for( uint i = 0; i < items.length(); i++ )
            {
                f.writeString( items[ i ].GetCount() + "\n" );
                f.writeString( items[ i ].GetProtoId() + "\n" );
            }
			f.writeString( 12345 + "\n" );
            f.close();
        }
    }
}

void answer_StartAdventureGM_talk_MODOC( Critter& player, uint answerI, string& answerS )
{
    if( player is null )
        return;
    GameVar@ citizenship = GetLocalVar( LVAR_modoc_citizenship, player.Id );
    if( answerI == 0 )
    {
        citizenship.opAssign( 0 );
        player.Say( SAY_NETMSG, "Теперь вы чужой в Модоке." );
    }
    if( answerI == 1 )
    {
        citizenship.opAssign( 11 );
        player.Say( SAY_NETMSG, "Теперь вы гость в Модоке." );
    }
    if( answerI == 2 )
    {
        citizenship.opAssign( 12 );
        player.Say( SAY_NETMSG, "Теперь вы гражданин Модока." );
    }
}

void answer_StartAdventureGM_talk_RACE( Critter& player, uint answerI, string& answerS )
{
    if( player is null )
        return;
    if( answerI == 0 )
    {
        Item@[] items;
        player.GetItems( SLOT_ARMOR, items );
        player.GetItems( SLOT_HAND1, items );
        player.GetItems( SLOT_HAND2, items );
        DeleteItems( items );
        player.StatBase[ ST_MUTATION ] = 0;
        player.StatBase[ ST_MAX_LIFE ] = 0;
        player.ParamBase[ PE_STRONG_BACK ] = 0;
        if( player.Stat[ ST_GENDER ] == GENDER_MALE )
        {
            player.ParamBase[ ST_BODY_TYPE ] = BT_MEN;
            player.ChangeCrType( 69 );
        }
        else
        {
            player.ParamBase[ ST_BODY_TYPE ] = BT_WOMEN;
            player.ChangeCrType( 74 );
        }
        player.StatBase[ ST_BASE_CRTYPE ] = 0;
        player.Say( SAY_NETMSG, "Теперь вы выглядите...  нормально." );

    }
    if( answerI == 1 )
    {
        Item@[] items;
        player.GetItems( SLOT_ARMOR, items );
        player.GetItems( SLOT_HAND1, items );
        player.GetItems( SLOT_HAND2, items );
        DeleteItems( items );
        player.StatBase[ ST_MUTATION ] = 3;
        player.StatBase[ ST_MAX_LIFE ] = 100;
        player.ParamBase[ PE_STRONG_BACK ] = 0;
        player.ParamBase[ ST_BODY_TYPE ] = BT_GHOUL;
        player.ChangeCrType( 28 );
        player.StatBase[ ST_BASE_CRTYPE ] = 28;
        player.Say( SAY_NETMSG, "Теперь вы выглядите...  страннее." );
    }
    if( answerI == 2 )
    {
        Item@[] items;
        player.GetItems( SLOT_ARMOR, items );
        player.GetItems( SLOT_HAND1, items );
        player.GetItems( SLOT_HAND2, items );
        DeleteItems( items );
        player.StatBase[ ST_MUTATION ] = 3;
        player.StatBase[ ST_MAX_LIFE ] = 100;
        player.ParamBase[ PE_STRONG_BACK ] = 0;
        player.ParamBase[ ST_BODY_TYPE ] = BT_GHOUL;
        player.ChangeCrType( 79 );
        player.StatBase[ ST_BASE_CRTYPE ] = 79;
        player.Say( SAY_NETMSG, "Теперь вы выглядите...  страннее." );
    }
    if( answerI == 3 )
    {
        Item@[] items;
        player.GetItems( SLOT_ARMOR, items );
        player.GetItems( SLOT_HAND1, items );
        player.GetItems( SLOT_HAND2, items );
        DeleteItems( items );
        player.StatBase[ ST_MUTATION ] = 3;
        player.StatBase[ ST_MAX_LIFE ] = 100;
        player.ParamBase[ PE_STRONG_BACK ] = 0;
        player.ParamBase[ ST_BODY_TYPE ] = BT_GHOUL;
        player.ChangeCrType( 29 );
        player.StatBase[ ST_BASE_CRTYPE ] = 29;
        player.Say( SAY_NETMSG, "Теперь вы выглядите...  страннее." );
    }
    if( answerI == 4 )
    {
        Item@[] items;
        player.GetItems( SLOT_ARMOR, items );
        player.GetItems( SLOT_HAND1, items );
        player.GetItems( SLOT_HAND2, items );
        DeleteItems( items );
        player.StatBase[ ST_MUTATION ] == 3;
        player.StatBase[ ST_MAX_LIFE ] = 100;
        player.ParamBase[ PE_STRONG_BACK ] = 3;
        player.ParamBase[ ST_BODY_TYPE ] = BT_SUPER_MUTANT;
        player.ChangeCrType( 21 );
        player.StatBase[ ST_BASE_CRTYPE ] = 21;
        player.Say( SAY_NETMSG, "Теперь вы выглядите...  сильнее." );
    }
    if( answerI == 5 )
    {
		string[] data = { "answer_StartAdventureGM_talk", "Выберите опцию:", "SKILLS", "Склад", "Описание", "Подтвердить" };
		DIALOG_MENU( player, data );
    }
}

void r_toHex( Critter& master, Critter@ slave, int val )
{
    Map@ map = master.GetMap();

    if( map is null )
        return;

    uint16 hexX = 0, hexY = 0;

    if( !map.GetEntireCoords( val, 0, hexX, hexY ) )
        return;

    master.TransitToHex( hexX, hexY, 5 );
}

void kind_tele2( Critter& master, Critter@ slave, int val )
{
    if( not valid( master ) )
        return;

    Location @ loc = GetLocationByPid( val, 0 );  // modoc entrance
    if( not valid( loc ) )
    {
        slave.Say( SAY_NETMSG, "Location not found" );
        return;
    }

	Map @ map = loc.GetMapByIndex(0);
    if( not valid( map ) )
    {
        master.Say( SAY_NETMSG, "Map index not found" );
        return;
    }
	
	if( master.ParamBase[ QST_GAMEMODE ] == GAME_ADVENTURE )
	{
		file f;
		if( f.open( "adventurers\\" + master.Id + ".txt", "r" ) >= 0 )
		{
			Item@ item;		
			string text = "";
			uint   pos = 0;
			uint   line = 0;
			int    number = 0;
			int    count = 0;	
			bool   isCount = true;
			f.setPos( 0 );
			while( !f.isEndOfFile() )
			{
				line ++;
				f.readLine( text );
				text.resize( text.length() - 1 );
				StrToInt( text, number );
				if( line >= 6 && line <= 12)
				{
					master.ParamBase[ line - 6] = number;
				}
				else if( line >= 14 && line <= 31 )
				{
					master.ParamBase[ line + 186 ] = number;
				}
				else if( line >= 34 )
				{
					Log("line="+line+" , num="+number);				
					if( number == 12345 ) break;
					if( isCount )
						{
						count = number;
						isCount = false;
						}
					else
					{
						@ item = master.AddItem( number, count );
						if( item.AmmoCount != 0 ) item.AmmoCount = 0;
						isCount = true;
					}
				}
			}
			f.close();
		}
		else return;
    }
	
    master.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 10, master.HexX, master.HexY );

    if( loc.GetProtoId() == 25 ) //Форт:
	{
		uint16 x = 0, y = 0;
		switch( Random( 1, 3 ) )
		{
			case( 1 ):
				x = 605;
				y = Random( 209, 505 );
			break;
			case( 2 ):
				x = Random( 307, 605 );
				y = 505;
			break;
			case( 3 ):
				x = 307;
				y = Random( 207, 505 );
			break;
			default: break;
		}
		master.TransitToMap( map.Id, x, y, 0 );
		master.Say( SAY_NETMSG, "Вы наконец добрались до центрального квартала Саттера. Форт должен находиться в самом центре, это ЖД станция." );
		
		/* //Отключил по просьбам трудящихся.
		if( master.Stat[ ST_BASE_CRTYPE ] == 62 || master.Stat[ ST_BASE_CRTYPE ] == 0 || master.Stat[ ST_BASE_CRTYPE ] == 61 )
		{
			uint[] data = { master.Id };
			CreateTimeEvent( __FullSecond + REAL_SECOND( 1 ), "e_randomSkin", data, true );
		}
		*/
	}
	else
	{
		uint16 hexX = 0, hexY = 0, hexX0 = 0, hexY0 = 0;
		map.GetEntireCoords( 255, 0, hexX0, hexY0 );
		
		for( uint i = 0; i < 10; i++ )
		{
			hexX = hexX0 + ( Random( 0, 2 ) - 1 ) * Random( 0, 100 );
			hexY = hexY0 + ( Random( 0, 2 ) - 1 ) * Random( 0, 100 );
			if( map.GetCrittersHex( hexX, hexY, 10, FIND_LIFE | FIND_ONLY_NPC, null ) == 0 ) break;
		}
	}
	
    master.SetEvent( CRITTER_EVENT_USE_ITEM, null );
    master.SetEvent( CRITTER_EVENT_DROP_ITEM, null );
    master.SetEvent( CRITTER_EVENT_ATTACK, null );
    master.SetEvent( CRITTER_EVENT_DEAD, null );	
}

uint e_randomSkin( uint[] @ values )
{
	if(!valid(values)) return 0;
	
	Critter@ cr = GetCritter(values[0]);
	if(!valid(cr)) return 0;
	
    RadomSkin( cr );
	
    return 0;
}


uint[][] skins = { //Это ужос.. знаю, знаю. Но что поделаешь..
	{ 13 },
	{ 6 }
};

uint[][] naked_skins = { //Это ужос.. знаю, знаю. Но что поделаешь..
	{ 12, 13, 31, 39, 40, 41, 44, 45, 48, 57, 62, 64, 69, 82, 88, 89, 91, 92, 93, 106, 107, 108, 110, 116, 117, 118, 120, 136, 139, 140, 142 }, //MALE
	{ 4, 5, 6, 33, 34, 35, 36, 37, 61, 63, 135, 141 } //FEMALE
};

void unsafe_getNaked( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	getNaked( player );
}

//import void getNaked( Critter& cr ) from "map_start";
void getNaked( Critter& cr )
{
	if( cr.ParamBase[ ST_BODY_TYPE ] >= BT_SUPER_MUTANT ) //not man, woman, child
		return;

	bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE );
	uint crType = cr.Stat[ ST_BASE_CRTYPE ];
	//if( naked_skins[isMale ? 0 : 1 ].find(crType) != -1 )
	if(true) //Отключил, чет заёбывают уже своими хуёвыми идеями.
	{
		cr.Say( SAY_EMOTE_ON_HEAD, "раздевается" );
		cr.Animate( 0, ANIM2_USE, null, false, true );
		cr.Animate( 0, ANIM2_PICKUP, null, false, true );
		
		Item@ armor = cr.GetItem( 0, SLOT_ARMOR );
		if( valid( armor ) )
		{
			_CritMoveItem( cr, armor, SLOT_INV );
		}
		else
		{
			cr.ParamBase[ ST_BASE_CRTYPE ] = isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F;
			cr.ChangeCrType( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
		}
	}
}

void RadomSkin( Critter& cr )
{
	bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE );
	uint crType = cr.Stat[ ST_BASE_CRTYPE ];
	crType = skins[isMale ? 0 : 1 ][Random( 0, skins[isMale ? 0 : 1 ].length() - 1 )];
	cr.ParamBase[ ST_BASE_CRTYPE ] = crType;
	cr.ChangeCrType( crType );
	
	/*
	cr.ShowScreen( SCREEN_DIALOGBOX, 2, "answer_StartKit" );
	cr.Say( SAY_DIALOGBOX_TEXT, "Что бы ваш персонаж не сверкал голой жопой, вам выдали случайный скин.\nЧто бы раздеться - используйте комманду:\n~naked" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "вернуть дикаря" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "можно другой?" );
	*/
}

void answer_StartKit( Critter& player, uint answerI, string& answerS )
{
	if( answerI == 0 )
	{
		player.ParamBase[ ST_BASE_CRTYPE ] = player.Stat[ ST_GENDER ] == GENDER_MALE ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F;
		player.ChangeCrType( player.Stat[ ST_GENDER ] == GENDER_MALE ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
		player.Say( SAY_NETMSG, "Не забывайте, что ваш персонаж сейчас практически голый. Это вызывает подозрения!" );
	}
	if( answerI == 1 )
	{
		if( player.Param[ ST_VAR5 ] > 10 )
			player.Say( SAY_NETMSG, "Больше нельзя. Надо было внимательней читать текст - стартовый Гид говорил, что смена скина доступна на обучающей карте." );
		else
		{
			player.ParamBase[ ST_VAR5 ]++;
			RadomSkin( player );
		}		
	}
}

void _crIn( Map& map, Critter& cr )
{
    if( cr.IsPlayer() && cr.GetAccess() == ACCESS_CLIENT )
    {
		//cr.ParamBase[ QST_GAMEMODE ] = GAME_START;
        cr.SetEvent( CRITTER_EVENT_USE_ITEM, "_Start_Player_use" );
        cr.SetEvent( CRITTER_EVENT_DROP_ITEM, "_Start_Player_drop" );
        cr.SetEvent( CRITTER_EVENT_ATTACK, "_Start_Player_attack" );
        cr.SetEvent( CRITTER_EVENT_DEAD, "_Start_Player_dead" );
    }
}

void _crOut( Map& map, Critter& cr )
{
    if( cr.IsPlayer() && cr.GetAccess() > ACCESS_CLIENT )
    {
        cr.SetEvent( CRITTER_EVENT_USE_ITEM, null );
        cr.SetEvent( CRITTER_EVENT_DROP_ITEM, null );
        cr.SetEvent( CRITTER_EVENT_ATTACK, null );
        cr.SetEvent( CRITTER_EVENT_DEAD, null );
		//if( cr.ParamBase[ QST_GAMEMODE ] == GAME_START ) cr.ParamBase[ QST_GAMEMODE ] = GAME_SURVIVAL;	
    }
	else if( cr.ParamBase[ QST_GAMEMODE ] == GAME_START )
	{
    Item@[] items;
    cr.GetItems( SLOT_INV, items );
    cr.GetItems( SLOT_HAND1, items );
    cr.GetItems( SLOT_HAND2, items );
    DeleteItems( items );	
	}
}

void _Start_Player_dead( Critter& cr, Critter@ killer )
{
    Map@ start = GetMapByPid( MAP_UTILITY_START, 0 );
    _crOut( start, cr );
    Item@[] items;
    cr.GetItems( SLOT_ARMOR, items );
    cr.GetItems( SLOT_INV, items );
    cr.GetItems( SLOT_HAND1, items );
    cr.GetItems( SLOT_HAND2, items );
    DeleteItems( items );
}

void _Start_Player_drop( Critter& cr, Item& item )
{
    cr.Say( SAY_NETMSG, "Предмет был поглощен пустотой." );
    if( valid( item ) )
        DeleteItem( item );
}

bool _Start_Player_attack( Critter& cr, Critter& target )
{
    cr.Say( SAY_NETMSG, "Вам кажется сейчас это неуместо." );
    return true;
}

bool _Start_Player_use( Critter& cr, Item& item, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    cr.Say( SAY_NETMSG, "Вам кажется сейчас это неуместо." );
    return true;
}
