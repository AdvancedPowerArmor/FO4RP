

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}                                        

int strength,perception,agility,endurance;

void AffectParalysis(Critter&cr,int value)
{
	uint[]indexes;
	uint[]durations;
	uint stats;
	int resist;
	bool isActive=cr.GetTimeEvents((6),indexes,durations,null)!=0;
	
	if(value>0)
	resist=value*cr.Stat[(31)]/100;
	value-=resist;
	if(cr.Param[(180)]==0)
	{
		stats=cr.Param[(0)];
		stats=stats|(cr.Param[(1)]<<8)|(cr.Param[(5)]<<16)|(cr.Param[(2)]<<24);
	}
	cr.ParamBase[(180)]+=value;
	if(cr.ParamBase[(180)]>0)
	cr.ParamBase[(500)]=1;
	
	if(!isActive)
	{
		cr.AddTimeEvent("cte_Paralysis",10*60,(6),stats);
	}
} 

uint cte_Paralysis(Critter&cr,int identifier,uint&rate)
{
	uint paral_stage=0;
	strength=(rate)&0xFF;
	perception=(rate>>8)&0x00FF;
	agility=(rate>>16)&0x0000FF;
	endurance=(rate>>24)&0x000000FF;    
	
	if(cr.Param[(180)]<0)
	cr.ParamBase[(180)]=0;
	if(cr.Param[(180)]<=50)
	paral_stage=1;
	if(cr.Param[(180)]>50)
	paral_stage=2;
	if(cr.Param[(180)]>100)
	paral_stage=3;
	if(cr.Param[(180)]==0)
	paral_stage=0;
	
	if(paral_stage!=0&&cr.IsPlayer())
	{
		cr.ParamBase[(500)]=1;
		if(cr.Stat[(67)]<5&&cr.Stat[(67)]!=10)
		cr.SayMsg((6),(3),Random(12904,12907));
	}
	else
	cr.ParamBase[(500)]=0;
	
	switch(paral_stage)
	{
		case 0:
		cr.ParamBase[(0)]=strength;
		cr.ParamBase[(1)]=perception;
		cr.ParamBase[(5)]=agility;
		cr.ParamBase[(2)]=endurance;
		cr.SayMsg((11),(3),12903);
		return 0;
		
		case 1:
		cr.ParamBase[(0)]--;
		cr.ParamBase[(1)]--;
		cr.ParamBase[(5)]--;
		cr.ParamBase[(2)]--;
		cr.ParamBase[(180)]-=5;
		cr.SayMsg((11),(3),12900);
		return 10*60;
		
		case 2:
		cr.ParamBase[(0)]-=2;
		cr.ParamBase[(1)]-=2;
		cr.ParamBase[(5)]-=2;
		cr.ParamBase[(2)]-=2;
		cr.ParamBase[(180)]-=5;
		cr.SayMsg((11),(3),12901);
		return 30*60;
		
		case 3:
		if(!cr.IsKnockout())
		cr.ToKnockout(((false)?(82):(83)),((false)?(86):(87)),((false)?(88):(89)),50,cr.HexX,cr.HexY);
		cr.ParamBase[(0)]=1;
		cr.ParamBase[(1)]=1;
		cr.ParamBase[(5)]=1;
		cr.ParamBase[(2)]=1;
		cr.ParamBase[(180)]-=5;
		cr.SayMsg((11),(3),12902);
		return 60*60;
		
		default:
		return 10*60;
	}
	return 20*60;
}

void DropParalysis(Critter&cr,int value)
{
	if(value>0)
	cr.SayMsg((11),(3),12908);
	if(value>cr.Param[(180)])
	cr.ParamBase[(180)]=0;
	else
	cr.ParamBase[(180)]-=value;
} 

void DropParalysisInstant(Critter&cr)
{
	
	if(cr.Param[(180)]!=0)
	{
		cr.ParamBase[(0)]=strength;
		cr.ParamBase[(1)]=perception;
		cr.ParamBase[(5)]=agility;
		cr.ParamBase[(2)]=endurance;
		cr.ParamBase[(180)]=0;
		if(cr.Param[(73)]==0)
		cr.ParamBase[(500)]=0;
		cr.EraseTimeEvents((6));
	}
}
