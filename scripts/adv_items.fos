// advenced items system
// powermagic

// #include "_defines.fos"
#include "_macros.fos"
// #include "math.fos"

#define PID_FIREBARREL    ( 7900 )
#define PID_FIREPLACE     ( 7901 )
#define PID_CACTUS_1      ( 7905 )
#define PID_CACTUS_2      ( 7906 )
#define PID_POWER_GEN     ( 7907 )
#define PID_LIGHT_ENV     ( 7908 ) // va1 = lightColor, val2 = radius



/*

   Val1 - broke count (0 charges item br
   Val2 - condition (0 - work, 1 - light crash, 2 - medium, 3 - hard, 4 - destroy)
   Val3 -
   Val4 - state of active(when break : -1 ready to repair, > -1 repair state, when work > 0 - charge)
   Val5 - needed items


 */

string     event;
string     msg;

dictionary groups;



void AdvItemDictInit()
{
    groups.set( "7907", 0 ); // power gen \ light off \ on
    groups.set( "7900", 1 ); // fire barral
    groups.set( "7901", 2 ); // fireplace
    groups.set( "286", 2 );  // firewood
    groups.set( "7902", 3 ); // well
    groups.set( "7903", 3 ); // well
    groups.set( "7904", 3 ); // well
    groups.set( "7905", 5 ); // cactus
    //groups.set( "7906", 5 ); // cactus генератор

    //   groups.se	t("2315", 1); //trash barrel
    //   groups.set("2612", 2); //fireplace
    //   groups.set("2611", 2); //fireplace
}

// bool CheckGroups( )

void _InitItem( Item& item, bool firstTime )
{
    AdvItemDictInit();
    string temp = item.GetProtoId();
//     Log(temp);
    int8   key = 0;
    if( groups.exists( temp ) )
    {
        groups.get( temp, key );
//       Log(key);
        event = "e_" + key; // +item.GetProtoId();
//       Log(event);
        ChangeFrame( item, 0 );
//       item.Val2 = 0;
//       LightControl(item, true, 15469066, 8);
        item.Val4 = 1;
        item.Val5 = 0;
        /*
           if(item.GetProtoId() == PID_POWER_GEN)
           {
           item.Val5 = 240;
           item.Val6 = 242;
           }*/
        if( item.GetProtoId() == PID_CACTUS_1 || item.GetProtoId() == PID_CACTUS_2 )
        {
            uint8 charges = Random( 10, 15 );
            item.Val3 = charges;
            item.Val4 = charges;
        }

        if( item.GetProtoId() == PID_FIREBARREL )
        {
            item.Val2 = 1;
            item.Val4 = 1;
        }
//
        if( item.Val2 != 0 )
        {
            item.SetEvent( ITEM_EVENT_SKILL, "e_BrokenItem" );
        }
        else
        {
            item.SetEvent( ITEM_EVENT_SKILL, event + "_Skill" );
        }
        item.SetEvent( ITEM_EVENT_USE_ON_ME, event + "_Repair" );
        if( firstTime )
        {
            item.Val1 = 100;
        }
    }
    else
    {
        Log( "shit dude" );
    }
//

    /*
       if(item.Val2 > 0 && item.Val2 < 5)
       {
       event = "e_"+item.GetProtoId();
       item.SetEvent(ITEM_EVENT_SKILL, "e_BrokenItem");
       item.SetEvent(ITEM_EVENT_USE_ON_ME, event+"_Repair");
       return;
       }
       item.SetEvent(ITEM_EVENT_SKILL, event+"_Skill");
       item.SetEvent(ITEM_EVENT_USE_ON_ME, event+"_OnMe");
     */
}

void EnterItem( /*Critter& cr, */ Item& item, Item& usedItem, uint8 count )
{
    Critter@ cr = GetCritter( usedItem.CritId );
    item.Val3 += 1;
    item.Val5 += 1;                                                     // charge counter ++
    if( item.Val5 >= count )
    {
        cr.Say( SAY_NETMSG, "Charge " + item.Val5 + " / " + count );
        cr.Say( SAY_NETMSG, "Вы добавили немного деталей для починки." );
        item.Val4 -= 1;
        item.Val5 = 0;
    }
    else
    {
        cr.Say( SAY_NETMSG, "Charge " + item.Val5 + " / " + count );
    }
    DeleteUsedItem( usedItem );
}

void DeleteUsedItem( Item& usedItem )
{
    Critter @ cr = GetCritter( usedItem.CritId );
    if( usedItem.GetProtoId() != PID_LIGHTER )
    {
        if( usedItem.GetCount() != 1 )
        {
            usedItem.SetCount( usedItem.GetCount() - 1 );
        }
        else
        {
            cr.DeleteItem( usedItem.GetProtoId(), 1 );
        }                                                                                                                        // delete item
    }
}

void ChangeFrame( Item& item, uint8 frame )
{
    item.AnimStayBegin      = frame;
    item.AnimStayEnd        = frame;
    item.AnimShowBegin      = frame;
    item.AnimShowEnd        = frame;
    item.AnimHideBegin      = frame;
    item.AnimHideEnd        = frame;
    item.Update();
    return;
}

void NeededItem( Critter& cr, uint16 protoId )
{
    cr.Say( SAY_NETMSG, "Требуется:" );
    cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, protoId * 100 );
}

void SetItemRepaired( Item& item )
{
    item.Val4 = 0;
    item.Val2 = 0;
    item.SetEvent( ITEM_EVENT_SKILL, event + "_Skill" );
    return;
}

bool e_BrokenItem( Item& item, Critter& cr, int skill )
{
    switch( skill )
    {
    case SKILL_PICK_ON_GROUND:
        cr.Say( SAY_NETMSG, "Предмет слишком тяжелый даже для вас." );
        return true;
    case SK_REPAIR:
        if( item.Val4 == -1 )
        {
            SetItemRepaired( item );
            cr.Say( SAY_NETMSG, "Вы успешно починили предмет." );
            return true;
        }
        else
        {
            cr.Say( SAY_NETMSG, "Нужны детали." );
            return true;
        }
    case SK_SCIENCE:
        cr.Say( SAY_NETMSG, "Предмет сломан. Тип поломки " + item.Val2 + ". Текущий уровень починки " + item.Val4 );
        return true;
    default:
        return false;
    }
    return false;
}

bool Cooking( Item@ usedItem )
{
    Critter @  cr = GetCritter( usedItem.CritId );
    switch( usedItem.GetProtoId() )
    {
    case PID_MEAT:
        cr.DeleteItem( PID_MEAT, 1 );
        cr.AddItem( PID_IGUANA_ON_A_STICK, 1 );
        cr.Say( SAY_NETMSG, "Вы приготовили мясо." );
        return true;
    default:
        break;
    }
    return false;
}

void UseDynItem( Item& item, Critter& cr )
{
    string temp;
    if( item.Val1 > 1 )
    {
        uint16 count = ABS( 1 + ( cr.StatBase[ SK_SCIENCE ] / 100 ) + ( cr.StatBase[ ST_LUCK ] / 5 ) + ( cr.StatBase[ ST_AGILITY ] / 5 ) );
        item.Val1 -= count;
        temp = count + " val1 = " + item.Val1;
        cr.Say( SAY_NETMSG, temp );
    }
    else
    {
        item.Val2 = 1;
        item.Val4 = 1;
        item.SetEvent( ITEM_EVENT_SKILL, "e_BrokenItem" );
    }
}

bool TryRepair( Critter& cr, uint16 skillRepair, uint16 skillScience )
{
    if( cr.Stat[ SK_REPAIR ] >= skillRepair )
    {
        if( cr.Stat[ SK_SCIENCE ] >= skillScience )
        {
            if( skillScience < 31 )
            {
                cr.StatBase[ ST_EXPERIENCE ] += skillRepair;
            }                                                                           // experience add
            else
            {
                cr.StatBase[ ST_EXPERIENCE ] += skillRepair * abs( ( skillScience / 30 ) );
            }
            return true;
        }
        else
        {
            cr.Say( SAY_NETMSG, "Вам не хватает научных знаний." );
        }
    }
    else
    {
        cr.Say( SAY_NETMSG, "Вы не совсем понимаете как это починить." );
    }
    return false;
}

void LightControl( Item& item, bool onOff, uint color, uint8 radius )
{
    if( onOff )
    {
        item.LightIntensity = 100;
    }
    else
    {
        item.LightIntensity = -1;
    }
    item.LightColor = color;
    item.LightRadius = radius;
    item.Update();
//   msg = "color ="+item.LightColor+" radius ="+item.LightRadius+" intens ="+item.LightIntensity;
//   Log(msg);
}

uint LightColor( int color )
{
//   uint temp = 0;
    switch( color )
    {
    case 1:
        color = 9999666;
        break;                          // normal electric light
    default:
        color = 0;
        break;
    }
    return color;
}

// debug

void addlight( Critter& player, int param0, int param1, int param2 )
{
    Map @ map = player.GetMap();
    uint16 hexX = 0, hexY = 0;
    for( uint8 i = 240; i < 242; i++ )
    {
        if( not map.GetEntireCoords( i, 0, hexX, hexY ) )
        {
            Log( "entire num " + i + " not found(light env)" );
            return;
        }
        Log( "hexX = " + hexX + " hexY = " + hexY );
        Item@ light = map.AddItem( hexX, hexY, PID_LIGHT_ENV, 1 );
        if( valid( light ) )
        {
            Log( "light valid" );
//     LightControl(item, onOff, color, radius);
        }
        else
        {
            Log( "light not valid" );
        }
    }
}
/**************************************************
   //				ITEMS		//
**************************************************/


//		group 0 - power gens				//

bool e_0_Repair( Item& item, Critter& cr, Item@ usedItem )
{
    switch( item.Val2 )
    {
    case 0:
        return false;
    case 1:
        if( usedItem.GetProtoId() == PID_MULTI_TOOL || usedItem.GetProtoId() == PID_SUPER_TOOL_KIT )
        {
            TryRepair( cr, 70, 50 );
            return true;
        }
    default:
        break;
    }
    return false;
}

bool e_0_Skill( Item& item, Critter& cr, int skill )
{
    switch( skill )
    {
    case SKILL_PICK_ON_GROUND:
        if( item.Val4 == 0 && item.Val2 == 0 )
        {
            cr.Say( SAY_NETMSG, "off" );
            item.Val4 = 1;
            LightAllCont( item, false );                     // , 0, 0);
        }
        else
        {
            cr.Say( SAY_NETMSG, "on" );
            item.Val4 = 0;
            LightAllCont( item, true );                     // , 999666, 8);
        }
        return true;
    case SK_SCIENCE:
        cr.Say( SAY_NETMSG, "SUCK!" );
        return true;
//     case SK_REPAIR  : TryRepair(cr, 100, 70); return true;
    default:
        break;
    }
    return false;
}

// GetEntireCoords  (uint8 entire, uint8 num, uint16& hexX, uint16& hexY)

void LightAllCont( Item& item, bool onOff ) // , uint color, uint8 radius)
{
    string logMsg;
    Log( "light active" );
    Item@  light;
    Map @ map = GetMap( item.MapId );
    uint16 hexX = 0, hexY = 0;
//   uint color = 0;
    logMsg = item.Val1 + " " + item.Val3;
    Log( logMsg );
    for( uint8 i = item.Val1; i < item.Val3; i++ )
    {

        for( uint8 j = 0; j < map.CountEntire( i ); j++ )
        {
            if( !map.GetEntireCoords( i, j, hexX, hexY ) )
            {
                Log( "entire num " + i + " not found(light env)" );
                return;
            }
//      Log("hexX = "+hexX+" hexY = "+hexY);
            @light = map.GetItem( hexX, hexY, PID_LIGHT_ENV );
            if( valid( light ) )
            {
//      color = GetLightColor(light.Val4);
                LightControl( light, onOff, LightColor( light.Val4 ), light.Val2 );
            }
            else
            {
                Log( "light not valid" );
            }
        }
    }
}

//	end of group 0				//

//              group 1 - firebarrel \ fireplace                //

bool e_1_Repair( Item& item, Critter& cr, Item@ usedItem ) // firebarrel
{
    switch( item.Val2 )
    {
    case 0:
        if( Cooking( usedItem ) )
        {
            return true;
        }
        switch( usedItem.GetProtoId() )
        {
        case PID_BOTTLE_FULL:
            item.Val2 = 1;
            item.Val4 = 0;
            LightControl( item, false, 0, 0 );
            ChangeFrame( item, 1 );
            cr.Say( SAY_NETMSG, "Вы потушили бочку." );
            DeleteUsedItem( usedItem );
            return true;
        case PID_FIREWOOD:
            item.Val3 += 1;
            cr.Say( SAY_NETMSG, "Вы добавили немного дерева." );
            DeleteUsedItem( usedItem );
            return true;
        default:
            break;
        }
    case 1:
        switch( item.Val4 )
        {
        case 0:
            if( usedItem.GetProtoId() == PID_CROWBAR )
            {
                cr.AddItem( PID_FIREWOOD, item.Val3 - 1 );
                cr.Say( SAY_NETMSG, "Вы извлекли несгоревшее дерево из бочки." );
                LightControl( item, false, 0, 0 );
                ChangeFrame( item, 0 );
                item.Val3 = 0;
                item.Val4 = 1;
                item.Val5 = 0;
                return true;
            }
            if( usedItem.GetProtoId() == PID_LIGHTER )
            {
                EnterItem( item, usedItem, 1 );
                ChangeFrame( item, 2 );
                uint[] values = { item.Id };
                item.Val5 = CreateTimeEvent( __FullMinute, "e_FireWoodInBarrel", values, false );
                SetItemRepaired( item );
                LightControl( item, true, 15469066, 8 );
                return true;
            }
            else
            {
                NeededItem( cr, PID_LIGHTER );
                return true;
            }                                                                                                                                              // full, but inactive		//in active now

        // break;
        /*case 1: if(usedItem.GetProtoId() == PID_LIGHTER)      {EnterItem(item, usedItem, 1); return true;} else {NeededItem(cr, PID_LIGHTER); break;}	*/ // full, but inactive
        case 1:
            if( usedItem.GetProtoId() == PID_FIREWOOD )
            {
                EnterItem( item, usedItem, 3 );
                ChangeFrame( item, 1 );
                return true;
            }
            else
            {
                NeededItem( cr, PID_FIREWOOD );
                return true;
            }                                                                                                                                                                           // break;	//empty
        default:
            break;
        }
    default:
        break;
    }
    return false;
}

bool e_1_Skill( Item& item, Critter& cr, int skill )
{
    switch( skill )
    {
    case SK_SCIENCE:
        cr.Say( SAY_NETMSG, "Количество дерева: " + item.Val3 );
        return true;
    /*case SK_TRAPS:
       {
        item.Val2 = 1;
        item.Val4 = 1;
        item.SetEvent(ITEM_EVENT_SKILL, "e_BrokenItem");
        item.SetEvent(ITEM_EVENT_USE_ON_ME, event+"_Repair");
        cr.Say(SAY_NETMSG, "Вы сломали предмет.");
        return true;
       }*/
    case SKILL_PICK_ON_GROUND:
    {
        cr.Say( SAY_NETMSG, "Это слишком тяжело даже для вас." );
        return true;
    }
    }
    return false;
}


uint e_FireWoodInBarrel( uint[] @ values )
{
//   Log("time work");
    Item @ item = GetItem( values[ 0 ] );
    if( item.Val3 > 0 )
    {
        item.Val3 -= 1;
        item.Val5 = CreateTimeEvent( __FullMinute + 50, "e_FireWoodInBarrel", values, false );
    }
    else
    {
        if( item.GetProtoId() == PID_FIREPLACE )
        {
            ChangeFrame( item, 1 );
            EraseTimeEvent( item.Val5 );
            item.Val5 = CreateTimeEvent( __FullMinute, "e_FirePlaceBurningDown", values, false );
            return 0;
        }
        ChangeFrame( item, 0 );
        item.SetEvent( ITEM_EVENT_SKILL, "e_BrokenItem" );
        item.Val2 = 1;
        item.Val4 = 1;
        EraseTimeEvent( item.Val5 );
        item.Val5 = 0;
        LightControl( item, false, 0, 0 );

    }
    return 0;
}

//		end of group 1                  //

//		group 2				//
//	torch, fireplace			//

bool e_2_Repair( Item& item, Critter& cr, Item@ usedItem )
{
    uint[] values = { item.Id };
    switch( item.Val2 )
    {
    case 0:
        if( Cooking( usedItem ) )
        {
            return true;
        }
        switch( usedItem.GetProtoId() )                         // work state
        {
        case PID_BOTTLE_FULL:
            item.Val2 = 1;
            item.Val4 = 1;
            ChangeFrame( item, 1 );
            item.Val5 = CreateTimeEvent( __FullMinute, "e_FirePlaceBurningDown", values, false );
            DeleteUsedItem( usedItem );
            return true;
        case PID_FIREWOOD:
            item.Val3 += 1;
            cr.Say( SAY_NETMSG, "Вы добавили немного дерева." );
            EnterItem( item, usedItem, 1 );
            return true;
        default:
            break;
        }
    case 1:
        if( item.GetProtoId() == PID_FIREWOOD )
        {
            if( usedItem.GetProtoId() == PID_LIGHTER && item.Accessory == ACCESSORY_HEX )
            {
                if( !item.ChangeProto( PID_FIREPLACE ) )
                {
                    Log( "SHHIIIIT!" );
                }
                item.Update();
                item.Val3 = item.GetCount();
                ChangeFrame( item, 2 );
                SetItemRepaired( item );
//              uint[] values = {item.Id};
                item.Val5 = CreateTimeEvent( __FullMinute, "e_FireWoodInBarrel", values, false );
                return true;
            }
        }
        if( item.GetProtoId() == PID_FIREPLACE )
        {
            switch( item.Val4 )
            {
            case 0:
                if( usedItem.GetProtoId() == PID_FIREWOOD )
                {
                    item.Val5 = CreateTimeEvent( __FullMinute, "e_FireWoodInBarrel", values, false );
                    EnterItem( item, usedItem, 1 );
                    ChangeFrame( item, 2 );
                    SetItemRepaired( item );
                    return true;
                }
                else
                {
                    NeededItem( cr, PID_FIREWOOD );
                    return true;
                }
            case 1:
                if( usedItem.GetProtoId() == PID_FLAMETHROWER_FUEL )
                {
                    item.Val5 = CreateTimeEvent( __FullMinute + 10, "e_FirePlaceBurningDown", values, false );
                    EnterItem( item, usedItem, 1 );
                    ChangeFrame( item, 1 );
                    item.Val4 = 0;
                    return true;
                }
                else
                {
                    NeededItem( cr, PID_FLAMETHROWER_FUEL );
                    return true;
                }
            default:
                break;
            }
        }
    default:
        break;
    }
    return false;
}

bool e_2_Skill( Item& item, Critter& cr, int skill )
{
    switch( skill )
    {
    case SK_SCIENCE:
        cr.Say( SAY_NETMSG, "Количество дерева: " + item.Val3 );
        return true;
    case SKILL_PICK_ON_GROUND:
    {
        if( item.GetProtoId() != PID_FIREWOOD )
        {
            cr.Say( SAY_NETMSG, "Не стоит это поднимать, правда." );
            return true;
        }
    }
    }
    return false;
}

uint e_FirePlaceBurningDown( uint[] @ values )
{
    Item @ item = GetItem( values[ 0 ] );
    switch( item.Val4 )
    {
    case 0:
        EraseTimeEvent( item.Val5 );
        item.Val5 = CreateTimeEvent( __FullMinute + 10, "e_FirePlaceBurningDown", values, false );
        ChangeFrame( item, 0 );
        item.Val4 = 1;
        break;
    case 1:
        DeleteItem( item );
        break;
    default: /* EraseTimeEvent(item.Val5); */
        break;
    }
    return 0;
}

//	end of group 2				//


//	group 3					//
//	wells					//

//              TryRepair(cr, repair, science) if true -> success

bool e_3_Repair( Item& item, Critter& cr, Item@ usedItem ) // firebarrel
{
    switch( item.Val2 )
    {
    case 0:
        if( usedItem.GetProtoId() == PID_BOTTLE_EMPTY )
        {
            if( e_3_BrokenWell( item, usedItem ) )
            {
                return true;
            }
            DeleteUsedItem( usedItem );
            cr.AddItem( PID_BOTTLE_FULL, 1 );
            cr.Say( SAY_NETMSG, "Вы наполнили бутылку." );
//            UseDynItem(item, cr);
            return true;
        }
    case 1:
        if( usedItem.GetProtoId() == PID_MULTI_TOOL )
        {
            SetItemRepaired( item );
            return true;
        }
    case 2:
        switch( item.Val4 )
        {
        case 0:
            if( usedItem.GetProtoId() == PID_ROPE )
            {
                EnterItem( item, usedItem, 1 );
                item.Val4 = -1;
                return true;
            }
            else
            {
                NeededItem( cr, PID_ROPE );
                return true;
            }
        case 1:
            if( usedItem.GetProtoId() == PID_CRAFT_M_STEL )
            {
                EnterItem( item, usedItem, 3 );
                item.Val4 = 0;
                return true;
            }
            else
            {
                NeededItem( cr, PID_CRAFT_M_STEL );
                return true;
            }
        }
    default:
        break;
    }
    return false;
}

bool e_3_Skill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        cr.Say( SAY_NETMSG, "Попробуйте использовать пустую бутылку на колодец." );
        return true;
    }
//   if(skill == SK_REPAIR && item.Val2 != 0)
//   {
//     TryRepair(cr, 30, 15);
//   }
//
    return false;
}

bool e_3_BrokenWell( Item& item, Item& usedItem )
{
    return false; // hot shit fix
    Critter @ cr = GetCritter( usedItem.CritId );
    uint8 failChance = Random( 0, 99 );
    if( cr.StatBase[ ST_LUCK ] * 10 < failChance )
    {
        cr.Say( SAY_NETMSG, "Вы уронили бутылку." );
        if( cr.StatBase[ ST_AGILITY ] > Random( 1, 9 ) )
        {
            cr.Say( SAY_NETMSG, "...но чудом сумели поймать её!" );
            return true;
        }
        else
        {
            DeleteUsedItem( usedItem );
            return true;
        }
    }
    return false;
}

//	end of group 3				//


//	group 4					//
//						//
/*
   bool e_4_Repair(Item& item, Critter& cr, Item@ usedItem)
   {
   switch(item.Val2)
   {

   }
   return false;
   }
 */

//	end of group 4				//

//	group 5					//
//	cactus					//

bool e_5_Repair( Item& item, Critter& cr, Item@ usedItem ) // firebarrel
{
    if( usedItem.GetProtoId() == PID_KNIFE || usedItem.GetProtoId() == PID_COMBAT_KNIFE || usedItem.GetProtoId() == PID_THROWING_KNIFE || usedItem.GetProtoId() == PID_LIL_JESUS_WEAPON )
    {
        if( item.Val3 > 0 )
        {
            if( cr.CountItem( PID_BOTTLE_EMPTY ) > 0 )
            {
                Item @ bottle = cr.GetItem( PID_BOTTLE_EMPTY, SLOT_INV );
                DeleteUsedItem( bottle );
                cr.AddItem( PID_BOTTLE_FULL, 1 );
                cr.Say( SAY_NETMSG, "Вы наполнили бутылку." );
                item.Val3 -= 1;
                return true;
            }
            else
            {
                cr.Say( SAY_NETMSG, "Нужна пустая бутылка." );
            }
        }
        else
        {
            if( item.Val5 == 0 ) // if TimeEvent is !runnig
            {
                uint[] values = { item.Id };
                item.Val5 = CreateTimeEvent( __FullMinute + Random( 5, 20 ), "e_CactusCharge", values, false );
            }
        }
    }
    return false;
}

bool e_5_Skill( Item& item, Critter& cr, int skill )
{
    if( skill == SK_SCIENCE )
    {
        cr.Say( SAY_NETMSG, "Вода в кактусе: " + item.Val3 + " / " + item.Val4 );
        return true;
    }
    return false;
}
uint e_CactusCharge( uint[] @ values )
{
    Item @ cactus = GetItem( values[ 0 ] );
    if( cactus.Val4 >= cactus.Val3 )
    {
        cactus.Val3 += Random( 1, 3 );
        cactus.Val5 = CreateTimeEvent( __FullMinute + Random( 5, 20 ), "e_CactusCharge", values, false );
    }
    else
    {
        EraseTimeEvent( cactus.Val5 );
        cactus.Val5 = 0;
    }
    return 0;
}

//	end of group 5				//

/*
   bool e_579_Repair(Item& item, Critter& cr, Item@ usedItem)		//repair condition // TEST
   {
   msg = usedItem.GetProtoId()+" "+item.Val4;
   cr.Say(SAY_NETMSG, msg);
   if(item.Val2 == 0)
   {
    cr.Say(SAY_NETMSG, "Ремонт не требуется.");
   }
   if(item.Val2 > 0 && item.Val2 < 5)
   {

    switch(item.Val4)
    {
      case 0: if(usedItem.GetProtoId() == PID_CRAFT_M_STEL)	{EnterItem(item, usedItem, 5); return true;} else {NeededItem(cr, PID_CRAFT_M_STEL); break;}
      case 1: if(usedItem.GetProtoId() == PID_STIMPAK)	{EnterItem(item, usedItem, 5); return true;} else {NeededItem(cr, PID_STIMPAK); break;}
      case 2: if(usedItem.GetProtoId() == PID_MOTOR)    {EnterItem(item, usedItem, 1); return true;} else {NeededItem(cr, PID_MOTOR); break;}
      case 3: if(usedItem.GetProtoId() == PID_JET)      {EnterItem(item, usedItem, 4); return true;} else {NeededItem(cr, PID_JET); break;}
      default : return false;
    }
   }

   /*
   if(usedItem.GetProtoId() == 40)
   {

    return true;
   }*
   return false;
   }

   bool e_579_Skill(Item& item, Critter& cr, int skill)
   {
   if(skill == SK_TRAPS)
   {
    item.Val2 = Random(1,2);
    item.Val4 = 3;
    item.SetEvent(ITEM_EVENT_SKILL, "e_BrokenItem");
    item.SetEvent(ITEM_EVENT_USE_ON_ME, event+"_Repair");
    cr.Say(SAY_NETMSG, "Вы сломали предмет.");
    return true;
   }
   return false;
   }
   /*
   bool e_579_OnMe(Item& item, Critter& cr, Item@ usedItem)
   {
   if(item.GetProtoId() == 40)
   {
    cr.Say(SAY_NETMSG, "OnMe");
   }
   return true;
   }
 */
