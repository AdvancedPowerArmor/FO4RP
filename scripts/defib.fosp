

bool LocIsModoc(uint locPid)
{
	return(locPid<=(6));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(25)||locPid==(40)||locPid==(42)||locPid==26||locPid==27||locPid==29||locPid>=96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(41));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

funcdef uint PROCESS(Critter@,int&,int&,int&);                  

import bool RegisterProcess(uint8 type,any func)from"ltp";

import bool StartProcess(Critter&cr,uint8 type,int param0,int param1,int param2,uint time)from"ltp";
import bool StartProcess(Critter&cr,uint8 type,int param0,uint time)from"ltp";
import bool StartProcess(Critter&cr,uint8 type,uint time)from"ltp";

import bool StopProcess(Critter&cr)from"ltp";

import bool checkTDH(Critter&cr)from"ltp";
import bool checkTDH(Critter&cr,uint8 type)from"ltp";         

import bool IsNotHuman(Critter&cr)from"handcuffs";
void _itemInit(Item&item,bool FirstTime)
{
	item.SetEvent((2),"_reanimate");
}

bool _reanimate(Item&item,Critter&cr,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(!(@onCritter!=null)||(IsNotHuman(onCritter)))
	{
		return false;
	}
	
	if(onCritter.IsLife()&&(!IsNotHuman(onCritter)))
	{
		
		cr.SayMsg((11),(3),12923);
		return true;
	}
	
	if(cr.Param[(207)]<150&&(!IsNotHuman(onCritter)))
	{
		cr.SayMsg((11),(3),12920);
		return true;
	}
	if(onCritter.IsDead()&&(!IsNotHuman(onCritter)))
	{
		if(!ltp_defib_inited)
		ltp_defib_init();
		uint16 rndTime=15000-(cr.StatBase[(207)]*40);
		StartProcess(cr,(31),onCritter.Id,0,0,rndTime);
		cr.SayMsg((11),(3),12923);
		
		return true;                                                     
		
	}
	return false;
}   

bool ltp_defib_inited=false;

void ltp_defib_init()
{
	PROCESS@___pfunc=@process_defib;any ___pany;___pany.store(@___pfunc);RegisterProcess((31),___pany);
	ltp_defib_inited=true;
}

uint process_defib(Critter@cr,int&param0,int&param1,int&param2)
{
	if(param0==-1&&(cr is null)){param0=int((31));return(0xF035BCF3);}
	
	Critter@onCritter=GetCritter(param0);
	if(@onCritter==null)
	return 0; 
	
	if(onCritter.Anim2Dead<=(112))
	{     
		
		Map@map=onCritter.GetMap();
		if(onCritter.Anim2Dead==(112))
		cr.ParamBase[(76)]+=300;
		else
		cr.ParamBase[(76)]+=200;
		
		if(map.IsHexPassed(onCritter.HexX,onCritter.HexY))
		{
			onCritter.ToLife();
			onCritter.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),100,onCritter.HexX,onCritter.HexY);
		}
		else if(map.IsHexPassed(onCritter.HexX+1,onCritter.HexY))
		{
			onCritter.TransitToHex(onCritter.HexX+1,onCritter.HexY,onCritter.Dir);
			onCritter.ToLife();
			onCritter.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),100,onCritter.HexX,onCritter.HexY);
		}
		else if(map.IsHexPassed(onCritter.HexX-1,onCritter.HexY))
		{
			onCritter.TransitToHex(onCritter.HexX-1,onCritter.HexY,onCritter.Dir);
			onCritter.ToLife();
			onCritter.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),100,onCritter.HexX,onCritter.HexY);
		}
		else if(map.IsHexPassed(onCritter.HexX,onCritter.HexY+1))
		{
			onCritter.TransitToHex(onCritter.HexX,onCritter.HexY+1,onCritter.Dir);
			onCritter.ToLife();
			onCritter.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),100,onCritter.HexX,onCritter.HexY);
		}
		else if(map.IsHexPassed(onCritter.HexX,onCritter.HexY-1))
		{
			onCritter.TransitToHex(onCritter.HexX,onCritter.HexY-1,onCritter.Dir);
			onCritter.ToLife();
			onCritter.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),100,onCritter.HexX,onCritter.HexY);
		}
		else if(map.IsHexPassed(onCritter.HexX+1,onCritter.HexY+1))
		{
			onCritter.TransitToHex(onCritter.HexX+1,onCritter.HexY+1,onCritter.Dir);
			onCritter.ToLife();
			onCritter.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),100,onCritter.HexX,onCritter.HexY);
		}
		else if(map.IsHexPassed(onCritter.HexX-1,onCritter.HexY-1))
		{
			onCritter.TransitToHex(onCritter.HexX-1,onCritter.HexY-1,onCritter.Dir);
			onCritter.ToLife();
			onCritter.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),100,onCritter.HexX,onCritter.HexY);
		}
		cr.DeleteItem((670),1);
		cr.SayMsg((11),(3),12921);
		if(onCritter.IsNpc())
		onCritter.EraseEnemyFromStack(cr.Id);
		return 0;
	}
	else
	{
		cr.SayMsg((11),(3),12922);
		return 0;
	}
	
	return 0;
}
