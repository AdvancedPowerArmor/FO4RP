// Author: cvet
#include "_macros.fos"

#ifdef __CLIENT
# define Critter    CritterCl
# define Item       ItemCl
#endif

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.
bool critter_check_move_item( Critter& cr, Item& item, uint8 toSlot, Item@ itemSwap )
{
    uint8 fromSlot = item.CritSlot;

    bool  moveFreeze = false,
          dropFreeze = false;

    if( cr.Stat[ ST_BODY_TYPE ] > 4 && cr.Stat[ ST_BODY_TYPE ] < 10 || cr.Stat[ ST_BODY_TYPE ] > 10 ) // TabaK. Запрет на оружие животным. //q3 перенес из critter_move_item, надо перенести в gamemodes/arcade
    {
        moveFreeze = true;
        dropFreeze = true;
    }

    // Drop
    if( toSlot == SLOT_GROUND )
        return !dropFreeze;             // q3

    // If busy, then allow only hands item swapping
    bool handsSwap = ( ( fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 ) || ( fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 ) );
    if( valid( itemSwap ) && !handsSwap )
        return false;

    if( moveFreeze && !handsSwap )
        return false;                          // q3

    // Weapon animation
    if( toSlot == SLOT_HAND1 )
    {
        if( item.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, item.Proto.Weapon_Anim1 ) )
            return false;
    }

    // Armor animation
    if( toSlot == SLOT_ARMOR )
    {
        if( item.GetType() != ITEM_TYPE_ARMOR )
            return false;
        if( item.Proto.Slot != SLOT_INV )
            return false;
        if( !IsCritterCanArmor( cr.CrType ) )
            return false;
    }

    // Custom slot checks
    if( toSlot > SLOT_ARMOR )
    {
        if( toSlot != item.Proto.Slot )
            return false;
    }

    // Allow moving
    return true;
}

#ifdef __SERVER

import void ChangeCritterSpeed( Critter& cr ) from "speed";                        // q3: pm speed

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on critter item moved.
void critter_move_item( Critter& cr, Item& item, uint8 fromSlot )
{
    uint8 toSlot = item.CritSlot;
    // uint crType=cr.Stat[ST_BASE_CRTYPE];
    // bool isMale=(cr.Stat[ST_GENDER]==GENDER_MALE);

    /*if(cr.IsPlayer())
       {
            cr.Say(SAY_NETMSG, "change_item "+fromSlot+" to "+item.CritSlot+" acc "+item.Accessory+" cont "+item.ContainerId);
       }*/

    // indefine bullshit
    // if(fromSlot == 0 && !item.IsCanUseByIndefine(cr)) {cr.MoveItem(item.Id, 1, fromSlot); cr.Say(SAY_NETMSG, "Вы не можете использовать это."); return;}

    if( fromSlot == 0xFF || item.CritSlot == 0xFF )
    {
        ChangeCritterSpeed( cr );       // pm added

        if( item.GetType() == ITEM_TYPE_CONTAINER )
        {
            int  contWeight = 0;
            Item@[] items;
            uint len = item.GetItems( -1, items );
            for( uint i = 0; i < len; i++ )
            {
                if( items[ i ] is null )
                    continue;

                contWeight += int( items[ i ].Proto.Weight * items[ i ].GetCount() );
            }
            if( fromSlot == 0xFF )
                contWeight *= -1;
            cr.ParamBase[ ST_CARRY_WEIGHT_EXT ] += contWeight;
            // cr.Say(SAY_NETMSG, "в контейнере "+contWeight);
            // cr.Say(SAY_NETMSG, "у криттера все ехт "+cr.ParamBase[ST_CARRY_WEIGHT_EXT]);

            return;
        }
    }
    /*if(fromSlot==0 && item.Accessory==ACCESSORY_CONTAINER && item.ContainerId!=0)
       {
            cr.Say(SAY_NETMSG, "в контейнер");
            Item@ cont = GetItem(item.ContainerId);
            if(@cont!=null && cont.Accessory==ACCESSORY_CRITTER && cont.CritId==cr.Id)
            {
                    cr.Say(SAY_NETMSG, "отнимаем");
                    cr.ParamBase[ST_CARRY_WEIGHT_EXT]-=int(item.Proto.Weight*item.GetCount());
            }
       }*/

    // Armor changing
    if( item.GetType() == ITEM_TYPE_ARMOR && ( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR ) )
    {
        if( GetCritterAnimType( cr.CrType ) != ANIM_TYPE_3D )
        {
            // Default dude
            bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE );
            uint crType = cr.Stat[ ST_BASE_CRTYPE ];
            if( crType == 0 )
                crType = ( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
            if( toSlot == SLOT_ARMOR )
                crType = ( isMale ? item.Proto.Armor_CrTypeMale : item.Proto.Armor_CrTypeFemale );

            // Nochange skins
            if( crType != 104 && crType != 111 && crType != 112 && crType != 3 && crType != 10 && crType != 71 && crType != 1 && crType != 2 && crType != 122 && crType != 84 )
            {
				uint[] NoArmorSkins = {
				9,
				28,
				33,
				34,
				35,
				36,
				37,
				39,
				42,
				45,
				48,
				57,
				72,
				73,
				79,
				89,
				91,
				92,
				93,
				95,
				99};
                if ( NoArmorSkins.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 ) crType = cr.Stat[ ST_BASE_CRTYPE ];
            }
				
            // Long hair dude redirects
            if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_TRIBAL ) && isMale )
            {
                crType = cr.Stat[ ST_BASE_CRTYPE ];
                if( toSlot == SLOT_ARMOR )
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        crType = CRTYPE_LHD_LEATHER_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHER_ARMOR_M_2 )
                        crType = CRTYPE_LHD_LEATHER_ARMOR_MK2;
                    else if( crType == LEATHER_ARMOR_MK_III )
                        crType = CRTYPE_LHD_LEATHERBLUE;
                    else if( crType == CRTYPE_DW_LEATHER_JACKET_M )
                        crType = CRTYPE_LHD_LEATHER_JACKET;
                    else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        crType = CRTYPE_LHD_METAL_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHERBLUE_M )
                        crType = CRTYPE_LHD_LEATHERBLUE;
                    else if( crType == CRTYPE_DW_JUMPSUIT_M )
                        crType = CRTYPE_LHD_JUMPSUIT;
                }
            }
            else if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLD_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLD_TRIBAL ) && isMale )
            {
                crType = cr.Stat[ ST_BASE_CRTYPE ];
                if( toSlot == SLOT_ARMOR )
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        crType = CRTYPE_BLD_LEATHER_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHER_ARMOR_M_2 )
                        crType = CRTYPE_BLD_LEATHER_ARMOR_MK2;
                    else if( crType == LEATHER_ARMOR_MK_III )
                        crType = CRTYPE_BLD_LEATHERBLUE;
                    else if( crType == CRTYPE_DW_LEATHER_JACKET_M )
                        crType = CRTYPE_BLD_LEATHER_JACKET;
                    else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        crType = CRTYPE_BLD_METAL_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHERBLUE_M )
                        crType = CRTYPE_BLD_LEATHERBLUE;
                    else if( crType == CRTYPE_DW_JUMPSUIT_M )
                        crType = CRTYPE_BLD_JUMPSUIT;							
                }
            }
			
            else if( cr.Stat[ ST_BASE_CRTYPE ] == AZMADON_JUMP )
            {
                crType = cr.Stat[ ST_BASE_CRTYPE ];
                if( toSlot == SLOT_ARMOR )
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        crType = AZMADON_SNEAK;
                    else if( crType == CRTYPE_DW_LEATHER_ARMOR_M_2 )
                        crType = AZMADON_SNEAK;
                    else if( crType == CRTYPE_DW_LEATHER_JACKET_M )
                        crType = AZMADON_SNEAK;
                    else if( crType == LEATHER_ARMOR_MK_III )
                        crType = AZMADON_SNEAK;
                    else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        crType = AZMADON_SNEAK;
                    else if( crType == CRTYPE_DW_LEATHERBLUE_M )
                        crType = AZMADON_SNEAK;
                    else if( crType == CRTYPE_DW_JUMPSUIT_M )
                        crType = AZMADON_SNEAK;
                    else if( crType == AZMADON_HALAT )
                        crType = AZMADON_SNEAK;							
                }
            }
            else if( cr.Stat[ ST_BASE_CRTYPE ] == NIG_JUMPSUIT )
            {
                crType = cr.Stat[ ST_BASE_CRTYPE ];
                if( toSlot == SLOT_ARMOR )
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        crType = NIG_LEATHER_JACKET_MEH;
                    else if( crType == CRTYPE_DW_LEATHER_ARMOR_M_2 )
                        crType = NIG_LEATHER_JACKET_MEH;
                    else if( crType == CRTYPE_DW_LEATHER_JACKET_M )
                        crType = NIG_LEATHER_JACKET;
                    else if( crType == LEATHER_ARMOR_MK_III )
                        crType = NIG_LEATHER_JACKET_MEH;
                    else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        crType = NIG_METAL_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHERBLUE_M )
                        crType = NIG_LEATHER_JACKET_MEH;
                    else if( crType == CRTYPE_COMBAT_ARM_1 )
                        crType = NIG_CA;							
                }
            }
            if( toSlot == SLOT_ARMOR )                                                  // TabaK  проверка на мутантскую броню.
            {
                uint body = cr.Param[ ST_BASE_CRTYPE ];
                if( body == 20 || body == 21  || body == 114 )
                {
                    if( item.GetProtoId() != 592 && item.GetProtoId() != 593 )
                    {
                        uint   flags = item.BrokenFlags;
                        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 105664 );
                        uint   pid = item.GetProtoId();
                        uint16 wear = item.Deterioration;
                        DeleteItem( item );
                        Item@  newArmor = cr.AddItem( pid, 1 );
                        newArmor.Deterioration = wear;
                        newArmor.BrokenFlags = flags;
                        newArmor.Update();
                        crType = cr.Param[ ST_BASE_CRTYPE ];
                    }
                }
                else if( body != 20  && body != 21 && body != 114  )
                {
                    if( item.GetProtoId() == 592 || item.GetProtoId() == 593 )
                    {
                        uint   flags = item.BrokenFlags;
                        uint16 wear = item.Deterioration;
                        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 105663 );
                        uint   pid = item.GetProtoId();
                        DeleteItem( item );
                        Item@  newArmor = cr.AddItem( pid, 1 );
                        newArmor.Deterioration = wear;
                        newArmor.BrokenFlags = flags;
                        newArmor.Update();
                        crType = cr.Param[ ST_BASE_CRTYPE ];
                    }
                }
            }
            // }//////////////////
            // if(crType==0) crType=(isMale?CRTYPE_DEFAULT_M:CRTYPE_DEFAULT_F);
            if( cr.CrType != crType )
                cr.ChangeCrType( crType );
        }

        // Armor modifiers
        // Also look Armor perk validation in critter_init
        int sign = ( toSlot == SLOT_ARMOR ? int(1) : -1 );
        switch( item.Proto.Armor_Perk )
        {
        case ARMOR_PERK_POWERED:         // +3 strength, +30 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 30 * sign;
            break;
        case ARMOR_PERK_COMBAT:         // +20 radiation resist
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 20 * sign;
            break;
        case ARMOR_PERK_ADVANCED_I:     // +4 strength, +60 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 60 * sign;
            break;
        case ARMOR_PERK_ADVANCED_II:         // +4 strength, +75 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 75 * sign;
            break;
        case ARMOR_PERK_CHARISMA:         // +1 charisma
            cr.StatBase[ ST_CHARISMA_EXT ] += 1 * sign;
            break;
		case ARMOR_PERK_ECZO:
			cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 50 * sign;
			cr.StatBase[ ST_STRENGTH_EXT ] += 2 * sign;
			break;
		case ARMOR_PERK_ECZO_2:
			cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 10 * sign;
			cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
			break;
        default:
            break;
        }
        cr.StatBase[ ST_CURRENT_ARMOR_PERK ] = ( toSlot == SLOT_ARMOR ? item.Proto.Armor_Perk : 0 );
    }

    // Slot modifiers
    // SLOT_PERK_MIRROR_SHADES // +1 charisma
    // SLOT_PERK_COSMETIC_CASE // +1 charisma to female
    // SLOT_PERK_MOTION_SENSOR // +20 outdoorsman
    // SLOT_PERK_STEALTH_BOY   // +20 sneak
}
#endif
